var documenterSearchIndex = {"docs":
[{"location":"manual3_main_method/#Main-Method-performSFI","page":"Main Method","title":"Main Method performSFI","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"This section introduces the main method performSFI, which performs the trajectory simulation and saves the final electron momentum spectrum.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Pages = [\"manual3_main_method.md\"]\nDepth = 3","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"CurrentModule = SemiclassicalSFI","category":"page"},{"location":"manual3_main_method/#Brief-Documentation","page":"Main Method","title":"Brief Documentation","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"performSFI","category":"page"},{"location":"manual3_main_method/#SemiclassicalSFI.performSFI","page":"Main Method","title":"SemiclassicalSFI.performSFI","text":"Performs a semiclassical simulation with given parameters.\n\nParameters\n\nRequired params. for all:\n\ninit_cond_method = <:ADK|:SFA|:SFAAE|:WFAT|:MOADK>  : Method of electrons' initial conditions. Currently supports :ADK, :SFA, :SFAAE for atoms and :WFAT, :MOADK for molecules.\nlaser::Laser                                        : A Lasers.Laser object containing information of the laser field.\ntarget::Target                                      : A Targets.Target object containing information of the atom/molecule target.\nsample_t_intv = (start,stop)                        : Time interval in which the initial electrons are sampled.\nsample_t_num                                        : Number of time samples.\ntraj_t_final                                        : Time when every trajectory simulation ends.\nfinal_p_max = (pxMax,pyMax,pzMax)                   : Boundaries of final momentum spectrum collected in three dimensions.\nfinal_p_num = (pxNum,pyNum,pzNum)                   : Numbers of final momentum spectrum collected in three dimensions.\n\nRequired params. for step-sampling methods:\n\nss_kd_max   : Boundary of kd (momentum's component along transverse direction (in xy plane)) samples.\nss_kd_num   : Number of kd (momentum's component along transverse direction (in xy plane)) samples.\nss_kz_max   : Boundary of kz (momentum's component along propagation direction (z ax.)) samples.\nss_kz_num   : Number of kz (momentum's component along propagation direction (z ax.)) samples (an even number is required).\n\nRequired params. for Monte-Carlo-sampling methods:\n\nmc_kp_num   : Number of kp (initial momentum which is perpendicular to field direction, two dimensional) samples in a single time sample.\nmc_kp_max   : Maximum value of momentum's transversal component (perpendicular to field direction).\n\nOptional params. for all:\n\nsave_path                                       : Output HDF5 file path.\nsave_3D_spec = false                            : Determines whether the 3D momentum spectrum is saved (if not, will only save 2D by flattening on the xy plane) (default false).\ntraj_phase_method = <:CTMC|:QTMC|:SCTS>         : Method of classical trajectories' phase (default :CTMC). Currently :QTMC and :SCTS only supports atom targets.\ntraj_rtol = 1e-6                                : Relative error tolerance when solving classical trajectories using adaptive methods (default 1e-6).\ntraj_nondipole = false                          : Determines whether the non-dipole effect is taken account in the simulation (default false).\ntraj_GPU = false                                : [Experimental] Determines whether to enable GPU acceleration in trajectory simulation (default false).\nsample_cutoff_limit = 1e-16                     : The cut-off limit of the probability of the sampled electron, electrons with probabilities lower than the limit would be discarded.\nsample_monte_carlo = false                      : Determines whether Monte-Carlo sampling is used when generating electron samples (default false). Currently only supports ADK.\nfinal_ryd_collect = false                       : Determines whether rydberg final states are collected (default false).\nfinal_ryd_n_max                                 : The maximum principle quantum number n for rydberg final states to be collected.\n\nOptional params. for atomic SFA, SFA-AE and ADK methods:\n\nrate_prefix = <:ExpRate|:ExpPre|:ExpJac|:Full>  : Prefix of the exponential term in the ionization rate (default :ExpRate).\n\nOptional params. for target Molecule:\n\nmol_orbit_idx = 0   : Index of the ionizing orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1) (default 0).\n\nOptional params. for MO-ADK method:\n\nmoadk_orbit_m = 0   : Magnetic quantum number m of the ionizing orbital along the z axis. m = 0,1,2 indicate σ, π and δ respectively (default 0).\n\nOptional params. for ADK method:\n\nadk_tun_exit = <:IpF|:FDM|:Para> : Tunneling exit method for ADK methods (when init_cond_method==:ADK) (default :IpF).\n\n\n\n\n\n","category":"function"},{"location":"manual3_main_method/#Lasers-and-Targets","page":"Main Method","title":"Lasers & Targets","text":"","category":"section"},{"location":"manual3_main_method/#Lasers","page":"Main Method","title":"Lasers","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"laser::Laser","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"A Lasers.Laser object containing information of the laser field. Cf. the documentation for Lasers.","category":"page"},{"location":"manual3_main_method/#Targets","page":"Main Method","title":"Targets","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"target::Target","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"A Targets.Target object containing information of the atom/molecule target. Cf. the documentation for Targets.","category":"page"},{"location":"manual3_main_method/#Workflow-for-Preparation-of-the-Molecule-Target","page":"Main Method","title":"Workflow for Preparation of the Molecule Target","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"To use the Molecule as the target and the relating initial condition methods MO-ADK or WFAT, some coefficients need to be calculated in advance. Here we present a workflow for preparation of the Molecule target before invoking the performSFI method, taking the carbon monoxide molecule as an example.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"note: Note\nCurrently only the PySCF is implemented as the library's molecular computation interface, which only supports the Linux platform. What's more, in current version, only close-shell molecules are supported!","category":"page"},{"location":"manual3_main_method/#Initialization","page":"Main Method","title":"Initialization","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"First of all, initialize a Molecule object, and provide the necessary information of the molecule. Cf. the documentation of Molecule.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"using SemiclassicalSFI.Targets\nmol = Molecule(atoms=[\"C\",\"O\"], atom_coords=[0 0 -0.180; 0 0 0.950],\n               charge=0, name=\"Carbon Monoxide\",\n               data_path=\"./Molecule_CarbonMonoxide.h5\")","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"warning: Unit of the atom coordinates\nThe input of the atom coordinates is in Angstrom (Å), which is not atomic unit (Bohr). 1 Bohr = 0.53 Å.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"tip: Data saving of the Molecule object\nIf the user specifies data_path in the constructor method of Molecule, the data would be automatically saved each time the user invokes the MolCalcMOADKCoeff! and MolCalcWFATData!. However, if doesn't specify (in case the user does not wish to save the data), the data would not be saved, and the user has to manually invoke MolSaveDataAs to save the data afterwards.","category":"page"},{"location":"manual3_main_method/#Calculate-MO-ADK-Coefficients","page":"Main Method","title":"Calculate MO-ADK Coefficients","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"To calculate the MO-ADK coefficients of the Molecule object, invoke the MolCalcMOADKCoeff! method:","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"MolCalcMOADKCoeff!(mol)","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"For typical small molecules, using default parameters usually gives satisfactory results. However, for special demands, the user may refer to the documentation of MolCalcMOADKCoeff! and Targets.MolecularCalculators.calcMOADKCoeff for more calculation parameters.","category":"page"},{"location":"manual3_main_method/#Calculate-WFAT-Data","page":"Main Method","title":"Calculate WFAT Data","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"To calculate the data necessary for the WFAT of the Molecule object, invoke the MolCalcWFATData! method:","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"MolCalcWFATData!(mol, orbitIdx_relHOMO = 0)","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"To obtain the data of other orbitals besides HOMO, the user may alter the orbitIdx_relHOMO parameter. For custom calculation parameters, refer to the documentation of MolCalcWFATData! and Targets.MolecularCalculators.calcStructFactorData.","category":"page"},{"location":"manual3_main_method/#Setting-the-Molecule's-Orientation","page":"Main Method","title":"Setting the Molecule's Orientation","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"The orientation of the molecule can be specified by invoking the SetMolRotation method:","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"SetMolRotation(mol, 0.0,π/2,π/3)","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"and can be obtained through the MolRotation method:","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"MolRotation(mol)","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"tip: Testing molecular calculation setup\nThe test sets of this library include molecular calculations, the user may run the tests of this library to check if the environment is correctly set up for molecular calculation:using Pkg\nPkg.test(\"SemiclassicalSFI\")\n# In pkg mode of REPL:\n# (@v1.8) pkg> test SemiclassicalSFI","category":"page"},{"location":"manual3_main_method/#Initial-Condition-Methods","page":"Main Method","title":"Initial Condition Methods","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"init_cond_method = <:ADK|:SFA|:SFAAE|:WFAT|:MOADK>","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Method of electrons' initial conditions. Currently supports :ADK, :SFA, :SFAAE for atoms, and :WFAT, :MOADK for molecules.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"For more information about the theories, cf. Theory - Initial Conditions.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"note: Note\nFor initial condition methods ADK, SFA or SFA-AE, you must specify an atom target of types HydrogenLikeAtom or SAEAtom; For initial condition methods WFAT or MO-ADK, you must specify a molecule target of type Molecule. ADK SFA SFA-AE WFAT MO-ADK\nHydrogenLikeAtom ✔ ✔ ✔  \nSAEAtom ✔ ✔ ✔  \nMolecule    ✔ ✔","category":"page"},{"location":"manual3_main_method/#Atomic-Rate-Prefix","page":"Main Method","title":"Atomic Rate Prefix","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"rate_prefix = <:ExpRate|:ExpPre|:ExpJac|:Full>","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Prefix of the exponential term in the ionization rate (default :ExpRate).","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"For atomic ADK, SFA and SFA-AE, we obtained the ionization probability in the following form:","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"mathrmdWmathrmdbmk_perp mathrmdt_mathrmr = bmJ(k_dt_mathrmr) lvert P_bmp(t_mathrms) rvert^2 exp(2 mathrmIm Phi_mathrmtun)","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"where the lvert P_bmp(t_mathrms) rvert^2 denotes the prefactor, which has different expressions for different theories:","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"SFA SFA-AE ADK\n bmp+bmA(t_mathrms) cdot bmF(t_mathrms) ^-alpha left (k_perp^2+2I_mathrmp)(F^2-bmk_perp cdot bmF) right^-alpha2 left (k_perp^2+2I_mathrmp)F^2right^-alpha2","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"The bmJ(k_dt_mathrmr) denotes the Jacobian which arises from the coordinate transformation.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"For initial condition methods ADK, SFA and SFA-AE, specifying ExpRate would not add any prefix besides the exponential term; ExpPre would include the prefactor lvert P_bmp(t_mathrms) rvert^2; ExpJac would include the Jacobian bmJ(k_dt_mathrmr); Full indicates inclusion of both the prefactor and Jacobian.","category":"page"},{"location":"manual3_main_method/#Tunneling-Exit-Methods-For-Atomic-ADK","page":"Main Method","title":"Tunneling Exit Methods For Atomic ADK","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"adk_tun_exit = <:IpF|:FDM|:Para>","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Tunneling exit method for atomic ADK methods (when init_cond_method==:ADK) (default :IpF). Cf. Tunneling Exit Methods For Atomic ADK.","category":"page"},{"location":"manual3_main_method/#Sampling-Methods-and-Parameters","page":"Main Method","title":"Sampling Methods and Parameters","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"In SemiclassicalSFI.jl the initial electrons are sampled in the (t_mathrmrk_dk_z) coordinate, where k_d denotes the initial momentum's component in the xy plane (which is perpendicular to the electric field). There are two ways of sampling in these coordinates, namely step sampling and Monte-Carlo sampling.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"sample_monte_carlo = false : Determines whether Monte-Carlo sampling is used when generating electron samples (default false).\nsample_t_intv = (start,stop) : Time interval in which the initial electrons are sampled.\nsample_t_num : Number of time samples.\nsample_cutoff_limit = 1e-16 : The cut-off limit of the probability of the sampled electron, electrons with probabilities lower than the limit would be discarded (default 1e-16).","category":"page"},{"location":"manual3_main_method/#Step-Sampling","page":"Main Method","title":"Step Sampling","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"In the step sampling scheme, the sample_t_num time samples are uniformly distributed in the interval sample_t_intv. In each time sample, a batch of electrons of different initial conditions are launched and collected, whose initial momenta bmk_perp are distributed on a Cartesian grid (k_dk_z). The Cartesian grid is defined by the following parameters:","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"ss_kd_max, ss_kd_num, ss_kz_max, ss_kz_num","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"In the k_d dimension, ss_kd_num samples distribute uniformly in the interval (-ss_kd_max,ss_kd_max); and in the k_z dimension, there are ss_kz_num equidistant samples in the interval (-ss_kz_max,ss_kz_max).","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"The step sampling method is supported for all initial condition methods.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"warning: ss_kz_num should be an even number\nUnder the dipole case, electrons with zero initial k_z would remain zero k_z, which may induce some problems in the step-length choice of the ODE solver and result in \"final electron with anomalously large momentum\" warning. Thus the sampling on the k_z direction should avoid zero. Setting ss_kz_num to an even number is a good choice.","category":"page"},{"location":"manual3_main_method/#Monte-Carlo-Sampling","page":"Main Method","title":"Monte-Carlo Sampling","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"In the Monte-Carlo sampling scheme, the sample_t_num time samples are randomly chosen in the sample_t_intv; A batch containing mc_kp_num electrons would be sampled in a single time sample, the electrons' initial momenta bmk_perp are also randomly sampled inside a circle k_d^2+k_z^2 leq k_perpmathrmmax^2, where the k_perpmathrmmax is defined in the parameter as mc_kp_max.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"mc_kp_num : Number of kp (initial momentum which is perpendicular to field direction, two dimensional) samples in a single time sample.\nmc_kp_max : Maximum value of momentum's transversal component (perpendicular to field direction).","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Currently the Monte-Carlo sampling method is only supported for the ADK initial condition method.","category":"page"},{"location":"manual3_main_method/#Trajectory-Simulation","page":"Main Method","title":"Trajectory Simulation","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"After preparation of the initial electrons, the electrons evolve classically in the combined potential of the nucleus and laser field, and the trajectory simulation terminates at traj_t_final.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"traj_t_final : Time when every trajectory simulation ends.","category":"page"},{"location":"manual3_main_method/#Phase-Methods","page":"Main Method","title":"Phase Methods","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"traj_phase_method = <:CTMC|:QTMC|:SCTS>","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Method of classical trajectories' phase (default CTMC). Currently :QTMC and :SCTS only support atomic cases.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":" ADK SFA SFA-AE WFAT MO-ADK\nCTMC ✔ ✔ ✔ ✔ ✔\nQTMC ✔ ✔ ✔  \nSCTS ✔ ✔ ✔  ","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"For more information about phase methods, cf. Theory - Trajectory Simulation and Phase Methods.","category":"page"},{"location":"manual3_main_method/#Non-dipole-Effect","page":"Main Method","title":"Non-dipole Effect","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"traj_nondipole = false","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Determines whether the non-dipole effect is taken account in the simulation (default false).","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"For more information about the non-dipole effects, cf. Theory - Non-dipole Effects on the Trajectory Motion.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Currently, all targets support the inclusion of non-dipole effects.","category":"page"},{"location":"manual3_main_method/#Accuracy-Control","page":"Main Method","title":"Accuracy Control","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"traj_rtol = 1e-6","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Relative error tolerance when solving classical trajectories using adaptive methods (default 1e-6).","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"The classical trajectories of the electrons are obtained by solving ordinary differential equations using the OrdinaryDiffEq.jl package, where the solver would adjust the time-step length according to the relative error. Stricter error tolerance is favorable if the electron moves close to the nucleus, which usually happens in a linearly polarized laser field.","category":"page"},{"location":"manual3_main_method/#GPU-Acceleration-(Experimental)","page":"Main Method","title":"GPU Acceleration (Experimental)","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"traj_GPU = false","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Determines whether to enable GPU acceleration in trajectory simulation (default false).","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"The ordinary differential equations related to the electrons' classical trajectories can also be solved by GPU via the DiffEqGPU.jl package. The GPU acceleration now only supports the NVIDIA graphic cards, which also requires the CUDA driver to be correctly installed.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"tip: Testing GPU capability\nThe test sets of this library include GPU tests, the user may run the tests of this library to check if the graphic card is ready for GPU acceleration:using Pkg\nPkg.test(\"SemiclassicalSFI\")\n# In pkg mode of REPL:\n# (@v1.8) pkg> test SemiclassicalSFI","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"compat: Note: Experimental feature\nGPU acceleration is an experimental feature of the package and the API may change in the near future.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"note: Note: GPU acceleration efficiency\nThe GPU's advantage of speed over CPU may not be so obvious in the trajectory simulation. Sometimes the program is even slower when using GPU. Thus it's better to benchmark for specific hardware and choose the most efficient option.","category":"page"},{"location":"manual3_main_method/#Final-Electron-Collecting-and-Saving","page":"Main Method","title":"Final Electron Collecting & Saving","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"After the trajectory simulation ends, the electrons would be analyzed and collected. Those with positive energies finally become free electrons and would reach the detectors; while those with negative energies finally fall on Rydberg states. The collected momentum spectra and Rydberg spectra would be saved in an HDF5 file together with the simulation abstract. This library provides some parameters to customize the collecting and saving procedure.","category":"page"},{"location":"manual3_main_method/#D/3D-Momentum-Spectrum-Collecting","page":"Main Method","title":"2D/3D Momentum Spectrum Collecting","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"final_p_max = (pxMax,pyMax,pzMax) : Boundaries of final momentum spectrum collected in three dimensions.\nfinal_p_num = (pxNum,pyNum,pzNum) : Numbers of final momentum spectrum collected in three dimensions.\nsave_3D_spec = false : Determines whether the 3D momentum spectrum is saved (if not, will only save 2D by flattening on the xy plane) (default false).","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Electrons with positive final energies would be collected and placed on the 3D momentum grid determined by final_p_max and final_p_num. When setting save_3D_spec = false, the three-dimensional final momentum spectrum would be squashed into two-dimensional ones (by summing over the z axis).","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"The p_x, p_y and p_z grids would be saved in entries that are named after px, py and pz respectively in the output file, and the final momentum spectrum would be saved in the momentum_spec_2D or momentum_spec_3D entry (compressed to reduce the file size).","category":"page"},{"location":"manual3_main_method/#Rydberg-Final-State-Collecting","page":"Main Method","title":"Rydberg Final State Collecting","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"final_ryd_collect = false : Determines whether the rydberg final states are collected (default false).\nfinal_ryd_n_max : Determines the maximum principle quantum number n for rydberg final states to be collected.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Rydberg final states would be collected if final_ryd_collect is set to true. Only Rydberg states with principle quantum number that below final_ryd_n_max would be collected.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"The Rydberg spectrum is saved as a three-dimensional array in the entry named after ryd_spec in the output file. To get the probability of Rydberg state at (nlm), index with the indices (n,l+1,m+final_ryd_n_max).","category":"page"},{"location":"manual3_main_method/#Output-File","page":"Main Method","title":"Output File","text":"","category":"section"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"save_path : Output HDF5 file path.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"The output HDF5 file would be saved in the save_path. If the parameter is left unspecified or an error occurs when trying to write to the specified path, the output path would be set to ./SCSFI-yyyymmdd-hhmmss.h5.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"Apart from the information related to the momentum and Rydberg spectrum, an abstract encoded in YAML, which contains necessary input parameters, is also saved in the abstract entry of the output file.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"The output file can be opened and accessed using the HDF5.jl or JLD2.jl packages. Below shows the structure of typical output files.","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"# saving only 2D momentum spectrum\n🗂️ HDF5.File\n├─ 🔢 abstract\n├─ 🔢 info\n├─ 🔢 ion_prob\n├─ 🔢 ion_prob_uncollected\n├─ 🔢 momentum_spec_2D\n├─ 🔢 num_effective_traj\n├─ 🔢 px\n└─ 🔢 py","category":"page"},{"location":"manual3_main_method/","page":"Main Method","title":"Main Method","text":"# saving 3D momentum spectrum\n🗂️ HDF5.File\n├─ 🔢 abstract\n├─ 🔢 info\n├─ 🔢 ion_prob\n├─ 🔢 ion_prob_uncollected\n├─ 🔢 momentum_spec_2D\n├─ 🔢 momentum_spec_3D\n├─ 🔢 num_effective_traj\n├─ 🔢 px\n├─ 🔢 py\n└─ 🔢 pz","category":"page"},{"location":"example1_attoclock/#Example:-Attoclock-and-Initial-Condition-Methods","page":"Attoclock and Initial Condition Methods","title":"Example: Attoclock and Initial Condition Methods","text":"","category":"section"},{"location":"example1_attoclock/","page":"Attoclock and Initial Condition Methods","title":"Attoclock and Initial Condition Methods","text":"With the aim of studying the influence of non-adiabatic effects on the attoclock signal, we employ ADK, SFA-AE and SFA to provide the initial conditions of the electrons, and perform trajectory simulations.","category":"page"},{"location":"example1_attoclock/","page":"Attoclock and Initial Condition Methods","title":"Attoclock and Initial Condition Methods","text":"The simulation parameters are taken from Ma et al. [J. Phys. B 54, 144001 (2021)] [Ma_2021]","category":"page"},{"location":"example1_attoclock/","page":"Attoclock and Initial Condition Methods","title":"Attoclock and Initial Condition Methods","text":"[Ma_2021]: Y. Ma et al., Influence of Nonadiabatic, Nondipole and Quantum Effects on the Attoclock Signal. J. Phys. B: At. Mol. Opt. Phys. 54, 144001 (2021). DOI: 10.1088/1361-6455/ac0d3e","category":"page"},{"location":"example1_attoclock/","page":"Attoclock and Initial Condition Methods","title":"Attoclock and Initial Condition Methods","text":"@info \"SemiclassicalSFI Example - Attoclock\"\n\n@info \"Loading Packages...\"\nusing SemiclassicalSFI\nusing SemiclassicalSFI.Targets\nusing SemiclassicalSFI.Lasers\n\nt = HeAtom()\nl = Cos4Laser(peak_int=4e14, wave_len=800, cyc_num=2, ellip=1.0)\n\ninit_cond_list = [:ADK, :SFAAE, :SFA]\n\nfor init_cond in init_cond_list\n    @info \"Running $(init_cond)...\"\n    filename = \"SCSFI_He_4e14_800nm_2cyc_CP_$(init_cond)_CTMC.h5\"\n    performSFI(\n        target = t,\n        laser = l,\n        init_cond_method = init_cond,\n        sample_t_intv = (-80,80),\n        sample_t_num = 20000,\n        ss_kd_max = 1.5,\n        ss_kd_num = 1000,\n        ss_kz_max = 1.5,\n        ss_kz_num = 50,\n        traj_phase_method = :CTMC,\n        traj_t_final = 120,\n        final_p_max = (2,2,2),\n        final_p_num = (500,500,1),\n        save_path = filename\n    )\nend","category":"page"},{"location":"example1_attoclock/","page":"Attoclock and Initial Condition Methods","title":"Attoclock and Initial Condition Methods","text":"Below shows the momentum spectrum squashed on the polarization plane.","category":"page"},{"location":"example1_attoclock/","page":"Attoclock and Initial Condition Methods","title":"Attoclock and Initial Condition Methods","text":"(Image: example_attoclock.png)","category":"page"},{"location":"example2_phase_methods/#Example:-Phase-Methods","page":"Phase Methods","title":"Example: Phase Methods","text":"","category":"section"},{"location":"example2_phase_methods/","page":"Phase Methods","title":"Phase Methods","text":"To investigate the difference between the phase methods QTMC and SCTS, we use an 8-cycle linearly polarized laser pulse, employing the QTMC and SCTS as the phase methods during the trajectory simulation.","category":"page"},{"location":"example2_phase_methods/","page":"Phase Methods","title":"Phase Methods","text":"The simulation parameters are brought from [Phys. Rev. A 94, 013415 (2016)] [ShvetsovShilovski_2016]","category":"page"},{"location":"example2_phase_methods/","page":"Phase Methods","title":"Phase Methods","text":"[ShvetsovShilovski_2016]: N. I. Shvetsov-Shilovski et al. Semiclassical Two-Step Model for Strong-Field Ionization. Phys. Rev. A 94, 013415 (2016). DOI: 10.1103/PhysRevA.94.013415","category":"page"},{"location":"example2_phase_methods/#QTMC-Code","page":"Phase Methods","title":"QTMC Code","text":"","category":"section"},{"location":"example2_phase_methods/","page":"Phase Methods","title":"Phase Methods","text":"@info \"SemiclassicalSFI Example - Phase Methods - QTMC\"\n\n@info \"Loading Packages...\"\nusing SemiclassicalSFI\nusing SemiclassicalSFI.Targets\nusing SemiclassicalSFI.Lasers\n\nt = HAtom()\nl = Cos4Laser(peak_int=0.9e14, wave_len=800, cyc_num=8, ellip=0.0)\n\nfilename = \"SCSFI_H_0.9e14_800nm_8cyc_LP_ADKPara_ExpRate_QTMC.h5\"\n\nperformSFI(\n    target = t,\n    laser = l,\n    init_cond_method = :ADK,\n    adk_tun_exit = :Para,\n    sample_t_intv = (-300,300),\n    sample_t_num = 50000,\n    sample_cutoff_limit = 1e-16,\n    ss_kd_max = 1.0,\n    ss_kd_num = 400,\n    ss_kz_max = 1.0,\n    ss_kz_num = 400,\n    rate_prefix = :ExpRate,\n    traj_phase_method = :QTMC,\n    traj_t_final = 450,\n    traj_rtol = 1e-6,\n    save_3D_spec = true,\n    final_p_max = (1,1,1),\n    final_p_num = (400,400,400),\n    save_path = filename\n    )","category":"page"},{"location":"example2_phase_methods/#SCTS-Code","page":"Phase Methods","title":"SCTS Code","text":"","category":"section"},{"location":"example2_phase_methods/","page":"Phase Methods","title":"Phase Methods","text":"@info \"SemiclassicalSFI Example - Phase Methods - SCTS\"\n\n@info \"Loading Packages...\"\nusing SemiclassicalSFI\nusing SemiclassicalSFI.Targets\nusing SemiclassicalSFI.Lasers\n\nt = HAtom()\nl = Cos4Laser(peak_int=0.9e14, wave_len=800, cyc_num=8, ellip=0.0)\n\nfilename = \"SCSFI_H_0.9e14_800nm_8cyc_LP_ADKPara_ExpRate_SCTS.h5\"\n\nperformSFI(\n    target = t,\n    laser = l,\n    init_cond_method = :ADK,\n    adk_tun_exit = :Para,\n    sample_t_intv = (-300,300),\n    sample_t_num = 50000,\n    sample_cutoff_limit = 1e-16,\n    ss_kd_max = 1.0,\n    ss_kd_num = 400,\n    ss_kz_max = 1.0,\n    ss_kz_num = 400,\n    rate_prefix = :ExpRate,\n    traj_phase_method = :SCTS,\n    traj_t_final = 450,\n    traj_rtol = 1e-6,\n    save_3D_spec = true,\n    final_p_max = (1,1,1),\n    final_p_num = (400,400,400),\n    save_path = filename\n    )","category":"page"},{"location":"example2_phase_methods/","page":"Phase Methods","title":"Phase Methods","text":"Each piece of code takes 8.5 hours using 4 threads on an AMD Ryzen 9 7950X CPU at Manjaro Linux (Uranos 23.0.0).","category":"page"},{"location":"example2_phase_methods/","page":"Phase Methods","title":"Phase Methods","text":"note: Note\nThis example takes a very long time (~10h each task for 4 threads) to finish.\nIn this example, the 3D momentum spectrum is collected, which is very memory-consuming, consider using fewer threads.\nA 16-thread task is much less efficient than a 4-thread task and consumes much more memory. Therefore, it's suggested to use fewer threads (e.g., 4) per task.","category":"page"},{"location":"example2_phase_methods/","page":"Phase Methods","title":"Phase Methods","text":"The final momentum spectrum (the slice on the p_z-p_x plane near p_y=0) is displayed below. (Image: example_phase_methods.png)","category":"page"},{"location":"manual1_targets/#targets_doc","page":"Targets","title":"Targets","text":"","category":"section"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"This section provides information of available targets (atoms/molecules) in the library.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"A target interacts with the laser field and release the electron through multi-photon or tunneling processes. Here we list available targets implemented in the Targets module of the library.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Targets","category":"page"},{"location":"manual1_targets/#SemiclassicalSFI.Targets","page":"Targets","title":"SemiclassicalSFI.Targets","text":"The Targets module provides information about the targeting atoms or molecules.\n\n\n\n\n\n","category":"module"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Pages = [\"manual1_targets.md\"]\nDepth = 3","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"CurrentModule = SemiclassicalSFI.Targets","category":"page"},{"location":"manual1_targets/#Hydrogen-Like-Atom","page":"Targets","title":"Hydrogen-Like Atom","text":"","category":"section"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"A hydrogen-like atom has a potential of the form","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"V(r) = -fracZsqrtr^2+a","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"where Z is the nuclear charge number; a denotes the soft-core parameter, which is applied to avoid singularity of the potential and can be adjusted to fit the actual ionization potential of the atom (obtained by TDSE).","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"The hydrogen-like atom is implemented in the library as HydrogenLikeAtom.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Targets.HydrogenLikeAtom","category":"page"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.HydrogenLikeAtom","page":"Targets","title":"SemiclassicalSFI.Targets.HydrogenLikeAtom","text":"struct HydrogenLikeAtom <: SAEAtomBase\n\nRepresents a hydrogen-like atom.\n\nAn instance of HydrogenLikeAtom can be initialized via the constructor method:\n\nHydrogenLikeAtom(Ip, Z, soft_core=1.0, name=\"[NA]\")\n\nExample:\n\njulia> t = Targets.HydrogenLikeAtom(Ip=0.5, Z=1.0, soft_core=1.0, name=\"H\")\n[HydrogenLikeAtom] Atom H, Ip=0.5, Z=1.0, SoftCore=1.0\n\n\n\n\n\n","category":"type"},{"location":"manual1_targets/#Single-Active-Electron-(SAE)-Atom","page":"Targets","title":"Single-Active-Electron (SAE) Atom","text":"","category":"section"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"The single-active-electron (SAE) atom is an implementation of the empirical atomic SAE model potential proposed by Tong et al. [Tong_2005] The model potential of the SAE atom has the form","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"V(r) = -fracZ + a_1 mathrme^-b_1 r + a_2 r mathrme^-b_2 r + a_3 mathrme^-b_3 rr","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"where the a_i and b_i are tunable model potential parameters [note].","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"The SAE atom is implemented in the library as SAEAtom.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Targets.SAEAtom","category":"page"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.SAEAtom","page":"Targets","title":"SemiclassicalSFI.Targets.SAEAtom","text":"struct SAEAtom <: SAEAtomBase\n\nRepresents an atom under single-active-electron (SAE) approximation.\n\nAn instance of SAEAtom can be initialized via the constructor method:\n\nSAEAtom(Ip, Z, a1=0.0, b1=0.0, a2=0.0, b2=0.0, a3=0.0, b3=0.0, name=\"[NA]\")\n\nExample:\n\njulia> t = Targets.SAEAtom(Ip=0.9035698802, Z=1.0, a1=1.230723, b1=0.6620055, a2=-1.325040, b2=1.236224, a3=-0.2307230, b3=0.4804286, name=\"He\")\n[SAEAtom] Atom He, Ip=0.9035698802, Z=1.0\n\n\n\n\n\n","category":"type"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"[Tong_2005]: X. M. Tong et al., Empirical Formula for Static Field Ionization Rates of Atoms and Molecules by Lasers in the Barrier-Suppression Regime. J. Phys. B: At. Mol. Opt. Phys. 38, 2593–2600. DOI: 10.1088/0953-4075/38/15/001","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"[note]: The symbols of the parameters are different from that in the original article. a_1 b_1 a_2 b_2 a_3 b_3 correspond to a_1 a_2 a_3 a_4 a_5 a_6 in the original article respectively.","category":"page"},{"location":"manual1_targets/#Preset-Atom-Library","page":"Targets","title":"Preset Atom Library","text":"","category":"section"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"The library provides some preset commonly-used atoms or atomic ions for convenience.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"HydrogenLikeAtom : H, He⁺, Li²⁺\nSAEAtom :          He, Ne, Ne⁺, Ne²⁺, Ar, Ar⁺, Ar²⁺, V, Ni, Kr, Kr⁺, Rb, Nb, Pd, Xe, Xe⁺, Ta","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"These atoms/ions can be obtained by invoking Targets.**Atom() (for neutral atoms) or Targets.**#pAtom() (for positive atomic ions), where ** denotes the symbol of the nucleus and # denotes the positive charge the ion carries.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Example:","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"using SemiclassicalSFI","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"t1 = Targets.HAtom()\nt2 = Targets.Xe1pAtom()","category":"page"},{"location":"manual1_targets/#Molecule","page":"Targets","title":"Molecule","text":"","category":"section"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"The Molecule object represents a generic molecule, which is implemented in the library as Molecule. The structure of Molecule is much more complex than that of atoms because the Molecular ADK (MO-ADK) theory and Weak-Field Asymptotic Theory (WFAT) features for molecular strong-field ionization require a number of coefficients, which are saved to files for convenience.","category":"page"},{"location":"manual1_targets/#Initialization,-saving-and-loading","page":"Targets","title":"Initialization, saving and loading","text":"","category":"section"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"The Molecule object can be initialized either by providing necessary information of the molecule (mainly atoms, coordinates of the atoms and the charge of the molecule) or from external data (stored in the HDF5 format), cf. the documentation of Molecule:","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Targets.Molecule","category":"page"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.Molecule","page":"Targets","title":"SemiclassicalSFI.Targets.Molecule","text":"struct Molecule <: Target\n\nRepresents a generic molecule.\n\nFresh initialization\n\nA new instance of Molecule can be initialized via the constructor method:\n\nMolecule(atoms, atom_coords, charge::Integer=0, name::String=\"[NA]\", data_path::String=\"\", calc_energy::Bool=false, rot_α=0.0, rot_β=0.0, rot_γ=0.0)\n\nParameters:\n\natoms                   : Atoms in the molecule, stored as a vector of String.\natom_coords             : Atoms' coordinates in the molecule (in Angstrom), stored as a N×3 matrix.\ncharge                  : Total charge of the molecule (ion) (optional, default 0).\nname                    : Name of the molecule (optional).\ndata_path               : Path to the molecule's data (default empty). Specifying an empty string indicates no saving (but can still be saved later by calling method MolSaveDataAs).\ncalc_energy             : Indicates whether to calculate the energy data of the molecule upon initialization (default false).\nrot_α,rot_β,rot_γ   : Euler angles (ZYZ convention) specifying the molecule's orientation (optional, default 0).\n\nExample:\n\nThe following example creates a new instance of Hydrogen Molecule, and saves the data related to the Molecule to the specified path.\n\njulia> mol = Targets.Molecule(atoms=[\"H\",\"H\"], atom_coords=[0 0 -0.375; 0 0 0.375], charge=0, name=\"Hydrogen\", data_path=\"./Molecule_Hydrogen.h5\")\n[ Info: [Molecule] Data saved for molecule Hydrogen at \"./Molecule_Hydrogen.h5\".\nMolecule [Hydrogen]\n\nInitialization from existing data\n\nTo initialize an instance of Molecule from existing external data, invoke\n\nMolecule(data_path::String, rot_α=0.0, rot_β=0.0, rot_γ=0.0)\n\nExample:\n\njulia> mol = Targets.Molecule(\"./Molecule_Hydrogen.h5\")\nMolecule [Hydrogen]\n\n\n\n\n\n","category":"type"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"The Molecule object, after modification, can be manually saved to a HDF5 file via MolSaveDataAs.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Targets.MolSaveDataAs","category":"page"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.MolSaveDataAs","page":"Targets","title":"SemiclassicalSFI.Targets.MolSaveDataAs","text":"MolSaveDataAs(mol::Molecule, data_path::String)\n\nSaves the data of the Molecule to the data_path (will change the Molecule's inner field data_path).\n\n\n\n\n\n","category":"function"},{"location":"manual1_targets/#Molecular-SFI-Data-Preparation","page":"Targets","title":"Molecular-SFI Data Preparation","text":"","category":"section"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"To use the molecular strong-field ionization theories such as the MO-ADK and WFAT to provide the intitial conditions of the electrons, the structure coefficients of the Molecule have to be calculated beforehand and stored in the object. Cf. the documentation of MolCalcMOADKCoeff! and MolCalcWFATData!.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Evaluation of the structure coefficients depends on the external quantum chemistry packages. The Targets.MolecularCalculators module undertakes the task of communication with the external quantum packages. Currently only the PySCFMolecularCalculator is implemented.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"tip: Customized calculation parameters\nWhen invoking MolCalcMOADKCoeff! and MolCalcWFATData! to perform calculation of structure coefficients, customized calculation parameters can be passed to the kwargs of these methods. These parameters would be passed to the constructor method of the MolecularCalculator (e.g., the basis parameter of the PySCFMolecularCalculator), as well as the MolecularCalculators.calcStructFactorData, MolecularCalculators.calcMOADKCoeff methods. Refer to their documentation below for more information.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Targets.MolCalcMOADKCoeff!\nTargets.MolCalcWFATData!","category":"page"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.MolCalcMOADKCoeff!","page":"Targets","title":"SemiclassicalSFI.Targets.MolCalcMOADKCoeff!","text":"MolCalcMOADKCoeff!(mol::Molecule,\n                   orbitIdx_relHOMO::Integer = 0,\n                   MCType::Type = PySCFMolecularCalculator;\n                   kwargs...)\n\nCalculates the MOADK coefficients of the Molecule and saves the data.\n\nMCType              : Type of MolecularCalculator if the one for this Molecule is not initialized before. Default is PySCFMolecularCalculator if MCType is not specified.\norbitIdx_relHOMO    : Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1) (default 0).\nkwargs...           : Keyword arguments to pass to the MolecularCalculator, e.g. grid_rNum, l_max.\n\nExample:\n\njulia> mol = Molecule([\"H\",\"H\"], [0 0 -0.375; 0 0 0.375], 0, \"Hydrogen\")\nMolecule [Hydrogen]\n\njulia> MolCalcMOADKCoeff!(mol, basis=\"6-31g\")\n[ Info: [PySCFMolecularCalculator] Running calculation of MOADK coefficients... (ionizing orbital 0 relative to HOMO)\n\n\n\n\n\n","category":"function"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.MolCalcWFATData!","page":"Targets","title":"SemiclassicalSFI.Targets.MolCalcWFATData!","text":"MolCalcWFATData!(mol::Molecule,\n                 orbitIdx_relHOMO::Integer = 0,\n                 MCType::Type = PySCFMolecularCalculator;\n                 kwargs...)\n\nCalculates the WFAT data of the Molecule and saves the data.\n\nMCType              : Type of MolecularCalculator if the one for this Molecule is not initialized before. Default is PySCFMolecularCalculator if the MCType is not specified.\norbitIdx_relHOMO    : Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1) (default 0).\nkwargs...           : Keyword arguments to pass to the MolecularCalculator and the calcStructFactorData method, e.g. basis, grid_rNum, grid_rMax, sf_lMax, ⋯\n\nExample:\n\njulia> mol = Targets.Molecule([\"H\",\"H\"], [0 0 -0.375; 0 0 0.375], 0, \"Hydrogen\")\nMolecule [Hydrogen]\n\njulia> Targets.MolCalcWFATData!(mol, orbitIdx_relHOMO=0, basis=\"6-31g\")\n[ Info: [PySCFMolecularCalculator] Running molecular calculation...\n[ Info: Finished initialization [taking 0.0466409 second(s)].\n[ Info: [PySCFMolecularCalculator] Running calculation of structure factor data... (ionizing orbital 0 relative to HOMO)\n✓ Calculating the effective potential... (720000 pts)    Time: 0:00:22\nProgress: 100%[●●●●●●●●●●●●●●●●●●●●●●●●●] Time: 0:00:22 (31.08 μs/it)\n✓ Calculating the integrals... (7986 integrals)          Time: 0:02:48\nProgress: 100%[●●●●●●●●●●●●●●●●●●●●●●●●●] Time: 0:02:48 (21.08 ms/it)\n\n\n\n\n\n","category":"function"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Targets.MolecularCalculators\nTargets.MolecularCalculators.PySCFMolecularCalculator","category":"page"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.MolecularCalculators","page":"Targets","title":"SemiclassicalSFI.Targets.MolecularCalculators","text":"Contains interfaces relating to molecular calculation.\n\n\n\n\n\n","category":"module"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.MolecularCalculators.PySCFMolecularCalculator","page":"Targets","title":"SemiclassicalSFI.Targets.MolecularCalculators.PySCFMolecularCalculator","text":"struct PySCFMolecularCalculator <: MolecularCalculatorBase\n\nAn interface of molecular calculation using PySCF.\n\nAn instance of PySCFMolecularCalculator can be initialized via the following constructor method:\n\nPySCFMolecularCalculator(; mol, basis::String=\"pc-1\", kwargs...)\n\nParameters\n\nmol::Molecule   : The Molecule to be calculated.\nbasis::String   : Basis set used for calculation (default pc-1).\n\n\n\n\n\n","category":"type"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Targets.MolecularCalculators.calcStructFactorData\nTargets.MolecularCalculators.calcMOADKCoeff","category":"page"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.MolecularCalculators.calcStructFactorData","page":"Targets","title":"SemiclassicalSFI.Targets.MolecularCalculators.calcStructFactorData","text":"calcStructFactorData(;\n    mc::PySCFMolecularCalculator,\n    orbitIdx_relHOMO::Int = 0,\n    grid_rNum::Int  = 200,\n    grid_rMax::Real = 10.,\n    grid_θNum::Int  = 60,\n    grid_ϕNum::Int  = 60,\n    sf_nξMax ::Int  = 5,\n    sf_mMax  ::Int  = 5,\n    sf_lMax  ::Int  = 10,\n    kwargs...)\n\nCalculates the data used in structure factor calculation in WFAT of the given molecule.\n\nReturns\n\n(μ, IntData)  : Orbital dipole momentum and the IntData which stores the integrals.\n\nParameters\n\nmc              : The molecular calculator.\norbitIdx_relHOMO: Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO and -1 indicates HOMO-1) (default 0).\ngrid_rNum       : The number of radial grid (default 200).\ngrid_rMax       : The maximum radius of the radial grid (default 10.0).\ngrid_θNum       : The number of angular grid in the θ direction (default 60).\ngrid_ϕNum       : The number of angular grid in the ϕ direction (default 60).\nsf_nξMax        : The maximum number of n_ξ used in calculation (default 3).\nsf_mMax         : The maximum number of m used in calculation (default 3).\nsf_lMax         : The maximum angular quantum number l used in calculation (default 6).\n\n\n\n\n\n","category":"function"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.MolecularCalculators.calcMOADKCoeff","page":"Targets","title":"SemiclassicalSFI.Targets.MolecularCalculators.calcMOADKCoeff","text":"calcMOADKCoeff(;\n    mc::PySCFMolecularCalculator,\n    orbitIdx_relHOMO::Int = 0,\n    grid_rNum::Int  = 200,\n    grid_rReg::Tuple{<:Real,<:Real} = (3,8),\n    grid_θNum::Int  = 60,\n    grid_ϕNum::Int  = 60,\n    l_max::Int      = 6,\n    m_max::Int      = 3,\n    kwargs...)\n\nCalculates the MOADK coefficients of the given molecule.\n\nParameters\n\nmc              : The molecular calculator.\norbitIdx_relHOMO: Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO and -1 indicates HOMO-1) (default 0).\ngrid_rNum       : The number of radial grid (default 200).\ngrid_rReg       : The region of radial distance to fit the wavefunction to obtain the coefficients (default (3,8)).\ngrid_θNum       : The number of angular grid in the θ direction (default 60).\ngrid_ϕNum       : The number of angular grid in the ϕ direction (default 60).\nl_max           : The maximum number of l calculated (default 6).\nm_max           : The maximum number of m calculated (default 3).\n\n\n\n\n\n","category":"function"},{"location":"manual1_targets/#Molecule's-Orientation","page":"Targets","title":"Molecule's Orientation","text":"","category":"section"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"The molecule's orientation is described by a set of Euler angles (z-y-z convention), which defines a rotational transformation from the molecular frame (MF) to the lab frame (LF). This property of Molecule is NOT included in the saved file and thus needs to be specified each time upon initialization of the Molecule object from external files.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"note: Note\nHere the three Euler angles (α,β,γ) that describe the Molecule's orientation are completely different from that of the Euler angles (β',γ') in the WFAT and MO-ADK theory. These theories' \"lab frame\" is chosen for convenience of theoretical formulation, where the electric field is assumed to be static, pointing towards the +z direction, and has no relation with the lab frame mentioned above.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"The orientation of the molecule can be obtained and set via the MolRotation and SetMolRotation methods.","category":"page"},{"location":"manual1_targets/","page":"Targets","title":"Targets","text":"Targets.MolRotation\nTargets.SetMolRotation","category":"page"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.MolRotation","page":"Targets","title":"SemiclassicalSFI.Targets.MolRotation","text":"MolRotation(mol::Molecule)\n\nGets the Euler angles (ZYZ convention) specifying the molecule's orientation in format (α,β,γ).\n\n\n\n\n\n","category":"function"},{"location":"manual1_targets/#SemiclassicalSFI.Targets.SetMolRotation","page":"Targets","title":"SemiclassicalSFI.Targets.SetMolRotation","text":"SetMolRotation(mol::Molecule, α,β,γ)\n\nSets the Euler angles (ZYZ convention) specifying the molecule's orientation in format (α,β,γ).\n\n\n\n\n\nSetMolRotation(mol::Molecule, (α,β,γ))\n\nSets the Euler angles (ZYZ convention) specifying the molecule's orientation in format (α,β,γ).\n\n\n\n\n\n","category":"function"},{"location":"theory1_initial_conditions/#theory_init_cond","page":"Initial Conditions","title":"Theory: Initial Conditions","text":"","category":"section"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"This section reviews commonly-used theories used to provide initial conditions in the trajectory simulations.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"A number of theories can be adapted to provide initial conditions of the classical electrons in the trajectory simulation scheme. The initial condition usually consists of three properties:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Initial position bmr_0 (i.e., the tunneling exit position);\nInitial momentum bmp_0, we note that in the trajectory simulation schemes, initial momenta are usually denoted using bmk_0;\nThe corresponding ionization probability W carried by each electron sample, depending on the time-dependent laser field and the properties of the target atoms/molecules.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"In the following we will give a brief review on the available theories we implemented in SemiclassicalSFI.jl. Atomic units (a.u.) are used throughout unless stated otherwise.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Pages = [\"theory1_initial_conditions.md\"]","category":"page"},{"location":"theory1_initial_conditions/#SFA","page":"Initial Conditions","title":"Strong-Field Approximation (SFA)","text":"","category":"section"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The Strong-Field Approximation (SFA) [Popruzhenko_2014] is originated from the Keldysh theory of strong-field ionization. Compared with the pertubative methods and adiabatic tunneling theories, the SFA is able to predict both the multi-photon and the tunneling process during the laser-atom interaction, as well as high-order non-pertubative phenomenona such as the above-threshold ionization (ATI) because it fully includes the non-adiabatic effect of the laser-atom interaction. The broad scope of SFA has contributed to its widespread application in theoretical investigations of strong-field ionization.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Considering the electron evolving under a combined field of the Coulomb field V(bmr) and the laser field bmF(t)=-partial_t bmA(t), under the length gauge (LG), its Hamiltonian reads","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"H = frac12 bmp^2 + V(bmr) + bmF(t)cdotbmr","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Denoting ketPsi_0 = ketpsi_0 mathrme^mathrmiI_mathrmpt as the unperturbed initial state with ionization potential of I_mathrmp, ketPsi_bmp as the continuum state of momentum bmp, and","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"U(t_mathrmft_0) = exp left -mathrmi int_t_0^t_mathrmf H(tau) mathrmdtau right","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"the time-evolution operator, the transition amplitude between the initial state (at t_0) and the final state of momentum bmp (at t_mathrmf) is written as","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"M_bmp = braket Psi_bmp  U(t_mathrmft_0)  Psi_0 ","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Here lies the key idea of SFA: when the influence of the Coulomb field to the ionized electrons is weak compared with that of the external laser field, we may neglect the influence of the Coulomb field in the expression of M_bmp by replacing the time-evolution operator with a Coulomb-free one U_mathrmf, and meanwhile replacing the continuum state with the Volkov state ketPsi^mathrmV_bmp which represents a free electron evolving under the same laser field:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"M_bmp = braket Psi^mathrmV_bmp  U_mathrmf(t_mathrmft_mathrm0)  Psi_0 ","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where the Volkov state under the LG is the product of a plane wave and a phase factor:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"ket Psi^mathrmV_bmp  = ket bmp+bmA(t)  mathrme^mathrmiS_bmp(t)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"and the phase has the expression:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"S_bmp(t) = - int^t frac12 bmp+bmA(tau)^2 mathrmdtau","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"In this way the M_bmp is expressed as","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"M_bmp = -mathrmi int_t_mathrm0^t_mathrmf braket bmp+bmA(tau)  bmF(tau)cdotbmr  psi_0  mathrme^-mathrmitildeS_bmp(tau) mathrmdtau","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"and we note that here we have extracted the phase factor of ketPsi_0 and combined it with the former mathrme^-mathrmiS_bmp(t), giving","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"tildeS_bmp(t) = - int^t left frac12 bmp+bmA(tau)^2 + I_mathrmp right mathrmdtau","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"An additional saddle-point approximation facilitates preparation of initial conditions of the electron trajectories. The variation of tildeS_bmp(t) is much more sensitive than that of braket bmp+bmA(t)  bmF(t)cdotbmr  psi_0  as t varies, which leads to a fact that the whole integrand in our latest expression of M_bmp oscillates in its complex phase and its values cancel out each other in most cases, except when the variation of the phase tildeS_bmp(t) becomes stable, i.e., at the saddle points of tildeS_bmp(t). The saddle points t_mathrms=t_mathrmr+mathrmit_mathrmi are the zeroes of the derivative of the complex function tildeS_bmp(t), which satisfy","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"-partial_t tildeS_bmp(t) _t=t_mathrms = frac12 bmp+bmA(t_mathrms)^2 + I_mathrmp = 0","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The integral can be approximated by a summation over the saddle points:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"M_bmp approx sum_t_mathrms P_bmp(t_mathrms) mathrme^-mathrmitildeS_bmp(t_mathrms)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where P_bmp(t_mathrms) denotes the prefactor. Here we use a modified version of SFA which takes account of the Coulomb tail [Kjeldsen_2006] [Milosevic_2006], which gives the prefactor","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"P_bmp(t_mathrms) =  bmp+bmA(t_mathrms) cdot bmF(t_mathrms) ^-alpha2","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where alpha = 1+Zsqrt2I_mathrmp, and Z is the asymptotic charge of the nucleus. The phase tildeS_bmp(t_mathrms) is obtained by solving the integral","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"beginaligned\n    tildeS_bmp(t_mathrms)\n    = int_t_mathrms^infty left frac12 bmp+bmA(tau)^2 + I_mathrmp right mathrmdtau \n    = left( int_t_mathrms^t_mathrmr + int_t_mathrmr^infty right) left frac12 bmp+bmA(tau)^2 + I_mathrmp right mathrmdtau \n    = Phi_mathrmtun + Phi_mathrmtraj\nendaligned","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where Phi_mathrmtun represents the complex phase accumulation during the tunneling process, whose real part denotes the quantum phase, while its imaginary part, is related to the ionization probability; the Phi_mathrmtraj, is the phase accumulation during the electron trajectory motion in the continuum.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The SFA provides the final momentum distribution, while the trajectory simulation requires initial conditions of the eletrons. To utilize the SFA to give initial conditions, we suppose that the classical electron is ejected at time t_mathrmr at tunneling exit bmr_0 with momentum bmk_0. The initial momentum bmk_0, neglecting the Coulomb potential, is related to the final momentum bmp through","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"bmp = bmk_0 - int_t_mathrmr^infty bmF(tau) mathrmdtau = bmk_0 - bmA(t_mathrmr)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The initial position bmr_0, i.e., the tunneling exit, is found by constructing a quantum tunneling trajectory. The beginning of the trajectory, i.e., the tunneling entrance, has a real part of zero; the electron tunnels through the barrier during the time interval t_mathrms to t_mathrmr and emerges as a classical electron at the tunneling exit with real position and momentum. In this way we obtain the expression of the initial position:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"bmr_0 = mathrmRe int_t_mathrms^t_mathrmr bmA(tau) mathrmdtau = mathrmIm int_0^t_mathrmi bmA(t_mathrmr+mathrmitau) mathrmdtau","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The probablity density (in the final momentum space) carried by the electron sample is","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"mathrmdWmathrmdbmp = lvert P_bmp(t_mathrms) rvert^2 exp(2 mathrmIm Phi_mathrmtun)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"We note that the ionization probability is expressed in the coordinate of final momentum (p_xp_yp_z). However, in the trajectory simulation, the initial electrons are sampled in the coordinate (t_mathrmrk_dk_z), where k_d denotes the initial momentum's component in the xy plane (which is perpendicular to the electric field). Thus, adding a Jacobian in the prefix of the ionization probability is required if we sample the initial electrons within such coordinate, the transformed expression reads","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"mathrmdWmathrmdbmk_perp mathrmdt_mathrmr = bmJ(k_dt_mathrmr) lvert P_bmp(t_mathrms) rvert^2 exp(2 mathrmIm Phi_mathrmtun)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where the Jacobian is","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"bmJ(k_dt_mathrmr) = fracpartial(p_xp_y)partial(k_dt_mathrmr) =\nbeginvmatrix\n    partial p_xpartial k_d  partial p_xpartial t_mathrmr \n    partial p_ypartial k_d  partial p_ypartial t_mathrmr\nendvmatrix\n","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"[Popruzhenko_2014]: S. V. Popruzhenko, Keldysh Theory of Strong Field Ionization: History, Applications, Difficulties and Perspectives. J. Phys. B: At. Mol. Opt. Phys. 47, 204001 (2014). DOI:10.1088/0953-4075/47/20/204001","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"[Kjeldsen_2006]: T. K. Kjeldsen et al., Strong-Field Ionization of Atoms and Molecules: The Two-Term Saddle-Point Method. Phys. Rev. A 74, 023407 (2006). DOI:10.1103/PhysRevA.74.023407","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"[Milosevic_2006]: D. B. Milošević et al., Above-Threshold Ionization by Few-Cycle Pulses. J. Phys. B: At. Mol. Opt. Phys. 39, R203–R262 (2006). DOI: 10.1088/0953-4075/39/14/R01","category":"page"},{"location":"theory1_initial_conditions/#SFAAE","page":"Initial Conditions","title":"SFA with Adiabatic Expansion (SFA-AE)","text":"","category":"section"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"For small Keldysh parameter gamma, the non-adiabatic effect is not significant, thus an adiabatic expansion scheme can be carried out to develop a modified theory based on the SFA, which is named after the SFA with adiabatic expansion (SFA-AE) [Ni_2018]. It includes the non-adiabatic effect to a large extent and is capable of giving similar results compared with that given by the SFA under small Keldysh parameters.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The SFA-AE is applicable when the Keldysh parameter is small or the non-adiabatic effect is insignificant, and we recall that in the SFA there is a corresponding quantity t_mathrmi which quantifies the non-adiabacity of tunneling. For small t_mathrmi, we expand the vector potential bmA(t_mathrmr + mathrmit_mathrmi) at t_mathrmr, up to the second order of t_mathrmi:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"bmA(t_mathrmr + mathrmit_mathrmi) = bmA(t_mathrmr) - mathrmit_mathrmibmF(t_mathrmr) + frac12 t_mathrmi^2 bmF(t_mathrmr) + o(t_mathrmi^2)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Inserting the above expression into the saddle-point equation in the SFA gives","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"bmk(t_mathrmr) cdot bmF(t_mathrmr) = 0","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"and","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"t_mathrmi = sqrtfrack^2(t_mathrmr)+2I_mathrmpF^2(t_mathrmr)-bmk(t_mathrmr) cdot bmF(t_mathrmr)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The mathrmIm Phi_mathrmtun related to the ionization rate, in the SFA-AE, is","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"mathrmIm Phi_mathrmtun approx -frac13 frack^2(t_mathrmr)+2I_mathrmp^32sqrtF^2(t_mathrmr)-bmk(t_mathrmr) cdot bmF(t_mathrmr)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"and we obtain","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"beginaligned\n    mathrmdWmathrmdbmp\n    = lvert P_bmp(t_mathrms) rvert^2 exp(2 mathrmIm Phi_mathrmtun) \n    = lvert P_bmp(t_mathrms) rvert^2 exp left -frac23 frac(k_perp^2+2I_mathrmp)^32sqrtF^2-bmk_perp cdot bmF right\nendaligned","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where the bmk_perp denotes the transverse momentum at the tunneling exit, which is actually equivalent to bmk(t_mathrmr) in the SFA-AE because the above saddle-point equation requires bmk(t_mathrmr) cdot bmF(t_mathrmr) = 0. We note that the initial momentum, bmk_0, is exactly bmk_perp. The prefactor P_bmp(t_mathrms) which included the Coulomb tail correction, in the SFA-AE, has the expression [Frolov_2017]:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"P_bmp(t_mathrms) = left (k_perp^2+2I_mathrmp)(F^2-bmk_perp cdot bmF) right^-alpha4","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The initial position has the expression","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"bmr_0 = mathrmIm int_0^t_mathrmi bmA(t_mathrmr+mathrmitau) mathrmdtau = -fracbmF2 frack_perp^2+2I_mathrmpF^2-bmk_perp cdot bmF","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"[Ni_2018]: H. Ni et al., Tunneling Criteria and a Nonadiabatic Term for Strong-Field Ionization. Phys. Rev. A 98, 013411 (2018). DOI:10.1103/PhysRevA.98.013411","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"[Frolov_2017]: Frolov et al., Adiabatic-Limit Coulomb Factors for Photoelectron and High-Order-Harmonic Spectra. Phys. Rev. A 96, 023406 (2017). DOI:10.1103/PhysRevA.96.023406","category":"page"},{"location":"theory1_initial_conditions/#ADK","page":"Initial Conditions","title":"Ammosov-Delone-Krainov (ADK)","text":"","category":"section"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The Ammosov-Delone-Krainov (ADK) theory [Ammosov_1986] [Delone_1998] is used to study the adiabatic tunneling in the strong-field ionization, and is, in a sense, the adiabatic limit of the SFA.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"In the adiabatic limit, the laser field can be treated as static, thus we have bmF(t)=bm0 (higher order derivatives of bmF(t) remains zero as well). Substuting it into the expressions of SFA-AE yields the ADK rate","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"mathrmdWmathrmdbmp = lvert P_bmp(t_mathrms) rvert^2 exp left -frac23 frack_perp^2+2I_mathrmp^32F right","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where the prefactor reads","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"lvert P_bmp(t_mathrms) rvert^2 = left (k_perp^2+2I_mathrmp)F^2right^-alpha2","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The tunneling exit position can be obtained in the same approach:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"bmr_0 = mathrmIm int_0^t_mathrmi bmA(t_mathrmr+mathrmitau) mathrmdtau = -fracbmF2 frack_perp^2+2I_mathrmpF^2","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"[Ammosov_1986]: M. V. Ammosov et al., Tunnel Ionization of Complex Atoms and of Atomic Ions in an Alternating Electromagnetic Field. Sov. Phys. JETP 64, 1191 (1986).","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"[Delone_1998]: N. B. Delone et al., Tunneling and Barrier-Suppression Ionization of Atoms and Ions in a Laser Radiation Field. Phys.-Usp. 41, 469–485. DOI: 10.1070/PU1998v041n05ABEH000393","category":"page"},{"location":"theory1_initial_conditions/#tun_exit_atomic_adk","page":"Initial Conditions","title":"Tunneling Exit Methods for Atomic ADK","text":"","category":"section"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The tunneling exit, i.e., the initial position bmr_0 of the classical trajectories, remains a controversial problem. Below we briefly review three methods for determination of the tunneling exit, which apply for the ADK method.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"(1) The I_mathrmpF model.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The I_mathrmpF model is initially derived from the SFA theory and is the adiabatic limit of it. In this model the distance r_0 between the tunneling exit and the nucleus is simply expressed as the quotient of the ionization potential I_mathrmp and the electric field strength F. Taking account of the initial kinetic energy k_perp^22, r_0 reads","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"r_0 = fracI_mathrmp+k_perp^22F","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"However, the shortcoming of the I_mathrmpF model is obvious: derived from the SFA which assumes a short-range potential (i.e., a delta potential), this model neglects the complexity of the Coulomb characteristics of the potential and thus the conclusion lacks persuasiveness.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"(2) The field-direction model (FDM).","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The field-direction model (FDM) determines the tunneling exit by treating the problem as a one-dimensional tunneling problem: the tunneling exit is found in the one-dimensional cut of the combined potential of the laser and nucleus along the field direction. We assume that the field points towards the -z direction, and the tunneling exit r_0 is found from","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"V(r_0 bme_z) - F r_0 = - I_mathrmp","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"For sufficiently large r_0, the potential V(r) behaves as -Zr, and the tunneling exit is expressed as","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"r_0 = fracI_mathrmp+sqrtI_mathrmp^2-4FZ2F","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The FDM approach takes the Coulomb field into account, however, not in such a scientific way because this problem is actually not independent of the transverse dimensions.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"(3) The parabolic-coordinate model.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"For a static electric field towards the -z direction, the parabolic-coordinate model introduces the parabolic coordinate xi = r+z, eta = r-z, phi = tan^-1yx, in which the Schrödinger equation becomes separable in the three dimensions. The parabolic-coordinate approach gives expression of the tunneling exit:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"r_0 = fracI_mathrmp+sqrtI_mathrmp^2-4F left Z-(1+m)sqrtI_mathrmp2 right 2F","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where m is the magnetic quantum number along the z axis (due to the isotropic angular distribution of the atomic wavefunction, we set m=0).","category":"page"},{"location":"theory1_initial_conditions/#MOADK","page":"Initial Conditions","title":"Molecular ADK (MO-ADK)","text":"","category":"section"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The molecular ADK (MO-ADK) theory generalizes the original ADK theory by extending the application scope from atomic to simple linear molecules [Tong_2002].","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"In the MO-ADK theory, the wavefunction of a linear molecule's ionizing orbital behaves asymptotically as","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"psi_0^(m)(bmr) sim sum_l F_l(r) Y_lm(thetaphi)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"in the molecular frame (MF) when rrightarrowinfty, where m denotes the magnetic quantum number along the molecular axis (m=012 denotes sigmapi and delta symmetries respectively). Assigning kappa=sqrt2I_mathrmp, the F_l(r) has the following asymptotic behavior when rrightarrowinfty:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"F_l(r) sim C_l r^Zkappa-1 mathrme^-kappa r","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"In numerical implementation we obtain the parameters C_l by fitting the above expression [Zhang_2015], and the F_l(r) is found by the spherical-harmonic expansion of the wavefunction:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"F_l(r) = int mathrmdbmOmega Y_lm^*(bmOmega) psi_0^(m)(bmr)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"[Zhang_2015]: Zhang, B. et al., SLIMP: Strong Laser Interaction Model Package for Atoms and Molecules. Comp. Phys. Comm. 192, 330–341 (2015). DOI: 10.1016/j.cpc.2015.02.031","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"We assume the electric field is pointing towards the z axis in the laboratory frame (LF). The angle-dependent tunneling ionization rate in the MO-ADK theory reads","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Gamma(betagamma) = mathrmdWmathrmdt = sum_m fracB_m(betagamma)^22^mm kappa^-m left(frac2kappa^2Fright)^2Zkappa-m-1 mathrme^-2kappa^33F","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where the molecule's orientation is described using a set of Euler angles hatbmR = (alphabetagamma) (z-y-z convention), which represents the rotational transformation from the MF to the LF; B_m(betagamma) are the structural parameters which depend on the molecule's orbital wavefunction (here we omitted the alpha dependence because the structural parameters are independent of alpha). The structural parameters B_m(betagamma) have the following expression:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"B_m(betagamma) = C_l d_m m^l(beta) mathrme^-mathrmimgamma Q_l m","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"with d_m m^l(beta) being the Wigner-d rotation matrix, and","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Q_l m = (-1)^m sqrtfrac(2l+1)(l+m)2(l-m)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"To ultilize the MO-ADK theory to provide the initial conditions in the trajectory simulation, we simply adopt the result of the atomic ADK theory:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"bmr_0 = -fracbmF2 frack_perp^2+2I_mathrmpF^2","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"As for the ionization probability, we include the influence of the initial kinetic energy k_perp^22 by replacing the kappa=sqrt2I_mathrmp with kappa(k_perp)=sqrt2I_mathrmp+k_perp^2 in the exponential term of the ionization probability in the MO-ADK theory, giving","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"mathrmdWmathrmdbmk_perp mathrmdt = sum_m fracB_m(betagamma)^22^mm kappa^-m left(frac2kappa^2Fright)^2Zkappa-m-1 mathrme^-2kappa^3(k_perp)3F","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"[Tong_2002]: X. M. Tong et al., Theory of Molecular Tunneling Ionization. Phys. Rev. A 66, 033402 (2002). DOI: 10.1103/PhysRevA.66.033402","category":"page"},{"location":"theory1_initial_conditions/#WFAT","page":"Initial Conditions","title":"Weak-Field Asymptotic Theory (WFAT)","text":"","category":"section"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The weak-field asymptotic theory (WFAT) generalizes the tunneling ionization from isotropic atomic potentials to arbitrary molecular potentials [Tolstikhin_2011]. Compared with the MO-ADK theory, the WFAT accounts for the influence of the molecules' permanent dipole moment, and is applicable for complex molecules other than simple linear molecules.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The formulation of the WFAT is based on the expansion in the parabolic coordinates. The total ionization rate Gamma(betagamma) = mathrmdWmathrmdt, is split into different parabolic channels:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Gamma(betagamma) = sum_nu Gamma_nu(betagamma)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where Gamma_nu(betagamma) are partial rates of parabolic quantum number indices nu=(n_xim), and n_xi=012cdots, m=0pm 1pm 2cdots. In the leading-order approximation of the WFAT, the partial rates can be separated into two factors, namely the structural part G_nu(betagamma)^2 and the field part W_nu(F):","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Gamma_nu(betagamma) = G_nu(betagamma)^2 W_nu(F)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The field factor is expressed as","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"W_nu(F) = frackappa2 left(frac4kappa^2Fright)^2Zkappa-2n_xi-m-1 mathrme^-2kappa^33F","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The structure factor, in the integral representation of the WFAT [Dnestryan_2018], is given as an integral:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"G_nu (betagamma) = mathrme^-kappamu_z int Omega_nu^* left(hatbmR^-1 bmrright) hatV_mathrmc(bmr) psi_0(bmr) mathrmd bmr","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where psi_0 is the wavefunction of the ionizing orbital,","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"bmmu = int psi_0^*(bmr) bmr psi_0(bmr) mathrmd bmr","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"denotes the orbital dipole moment in the LF, with mu_z being its component along the field direction;","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Omega_nu(bmr) = sum_l=m^infty Omega^nu_lm(bmr) = sum_l=m^infty R_l^nu(r) Y_lm(theta phi)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"is a reference function which can be expanded into spherical harmonics, its radial part is expressed as","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"R_l^nu(r)=omega_l^nu  (kappa r)^l  mathrme^-kappa r  mathrmM(l+1-Zkappa 2l+2 2 kappa r)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"with mathrmM(abx) being the confluent hyper-geometric function and","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"beginaligned\n    omega_l^nu =        (-1)^l+(m-m)2+1 2^l+32 kappa^Zkappa-(m+1)2-n_xi \n                    times sqrt(2l+1)(l+m)(l-m)(m+n_xi)n_xi fracl(2l+1) \n                    times  sum_k=0^min(n_xil-m)  fracGamma(l+1-Zkappa+n_xi-k)k(l-k)(m+k)(l-m-k)(n_xi-k)\nendaligned","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"the normalization coefficient; hatV_mathrmc(bmr)=hatV(bmr)+Zr is the core potential with the Coulomb tail removed, where Z is the asymptotic charge of the residual ion.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"The effective potential hatV(bmr) describes the interaction between the ionizing electron and the residual parent ion. Under the framework of the Hartree-Fock method, the effective potential consists of three parts, namely the nuclear Coulomb potential (V_mathrmnuc), the direct (V_mathrmd) and exchange (V_mathrmex) parts of inter-electron interactions:","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"hatV(bmr) = V_mathrmnuc(bmr) + V_mathrmd(bmr) + hatV_mathrmex(bmr)","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"and","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"beginaligned\n    V_mathrmnuc(bmr) = -sum_A=1^N_mathrmatm fracZ_Aleftbmr-bmR_Aright \n    V_mathrmd(bmr) = sum_i=1^N int fracpsi_i^*(bmr) psi_i(bmr)bmr-bmr mathrmd bmr \n    hatV_mathrmex(bmr) psi_0(bmr) = -sum_i=1^N psi_i(bmr) int fracpsi_i^*(bmr) psi_0(bmr)bmr-bmr braketsigma_i  sigma_0 mathrmd bmr\nendaligned","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"where N is the number of electrons, N_mathrmatm is the number of nuclei, psi_i(bmr) and sigma_i denote the molecular orbital and the spin state of the electron of index i (braketsigma_isigma_j=1 if electrons of index i and j have the same spin, and braketsigma_isigma_j=0 otherwise), Z_A and bmR_A are the nuclear charge and position of atom of index A.","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"As the WFAT provides only the ionization rate Gamma = mathrmdWmathrmdt as the MO-ADK does, we adopt the same procedure as we did in the MO-ADK theory to provide the initial conditions for the trajectory simulation. The initial position bmr_0 is the same as that in the MO-ADK theory, and the ionization rate reads","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"mathrmdWmathrmdbmk_perp mathrmdt = sum_nu G_nu(betagamma)^2 cdot frackappa2 left(frac4kappa^2Fright)^2Zkappa-2n_xi-m-1 mathrme^-2kappa^3(k_perp)3F","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"[Tolstikhin_2011]: O. I. Tolstikhin et al., Theory of Tunneling Ionization of Molecules: Weak-Field Asymptotics Including Dipole Effects. Phys. Rev. A 84, 053423 (2011). DOI: 10.1103/PhysRevA.84.053423","category":"page"},{"location":"theory1_initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"[Dnestryan_2018]: A. I. Dnestryan et al., Structure Factors for Tunneling Ionization Rates of Molecules: General Grid-Based Methodology and Convergence Studies. J. Chem. Phys. 149, 164107. DOI: 10.1063/1.5046902","category":"page"},{"location":"#SemiclassicalSFI.jl","page":"Home","title":"🎆SemiclassicalSFI.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Implementation of classical/semiclassical methods in strong-field ionization of atoms and molecules.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]","category":"page"},{"location":"#Background","page":"Home","title":"Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The interaction between laser and matter has attracted widespread interest since the invention of laser technology decades ago. To study the interaction between an ultrafast and intense laser pulse and atoms/molecules, where the electrons are ionized from the targets through multi-photon or tunneling/over-barrier processes, a time-dependent Schrödinger equation (TDSE) simulation is usually required to be carried out. However, its high demand in computational resources and limited application scope (atoms and simple molecules) prevents it from its extensive application.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To overcome the shortcomings of TDSE, Corkum et al. [Corkum_1989] proposed a scheme, where the electron is first ionized from the target through the tunneling mechanism, and then acts as a classical electron in the laser field. This scheme was further developed by Hu et al. [Hu_1997], in which the initial conditions of the classical electrons and the Coulomb potential of the parent ion are more appropriatedly taken account. This scheme is named after the Classical Trajectory Monte-Carlo (CTMC) method, which has been widely adopted for research in interaction between high-intensity ultra-fast laser pulses and atoms/molecules. Compared with TDSE, trajectory simulation schemes including CTMC and its variants, are less demanding in computational resources, which, in addition, provides a clear physical picture of strong-field ionization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The essence of the trajectory simulation scheme lies in two aspects: (1) The initial conditions of the classical electron samples at the beginning of the classical trajectories, which consists of initial position bmr_0 (i.e., the tunneling exit position), initial momenta bmp_0, and the corresponding ionization probability W carried by the electron sample. (2) The quantum phase property of classical trajectories, while the full classical trajectory (i.e., the CTMC) is widely adopted, there are schemes (e.g., QTMC and SCTS, which would be discussed further in the documentation) which introduce quantum phases in the electron trajectories and develop a semiclassical method for trajectory simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"After decades of accumulation of research and development, the trajectory simulation has grown to a complete solution of research on strong-field ionization of atoms and molecules. Developing a library with implementation of existing methods, efficiency of calculation, extensibility for future development and ease of maintenance would provide great convenience for theoretical research on strong-field ionization. With such aim, here we present SemiclassicalSFI.jl, a program package written in julia language, which provides a general, efficient and out-of-box solution of performing trajectory simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Corkum_1989]: P. B. Corkum et al., Above-Threshold Ionization in the Long-Wavelength Limit. Phys. Rev. Lett. 62(11), 1259–1262 (1989). DOI: 10.1103/PhysRevLett.62.1259","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Hu_1997]: B. Hu et al., Plateau in Above-Threshold-Ionization Spectra and Chaotic Behavior in Rescattering Processes. Phys. Lett. A 236, 533–542 (1997). DOI: 10.1016/S0375-9601(97)00811-6","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Versatile :     SemiclassicalSFI.jl supports a wide range of functions. As for initial conditions (rate method), the library supports (for atoms) ADK, SFA and SFA-AE, (for molecules) MOADK and WFAT. As for the trajectory phase method, the library supports CTMC, QTMC and SCTS. Non-dipole effects can also be included during the trajectory simulation.\nOut-of-box :    The usage of SemiclassicalSFI.jl is simple and straightforward.\nExtensible :    SemiclassicalSFI.jl has a well-defined structure, which makes it easy to include new features.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#Prerequisites","page":"Home","title":"Prerequisites","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Minimum prerequisites : Julia ≥1.7\nGPU acceleration of traj. simulation : a supported graphic card (NVIDIA)\nMOADK and WFAT features : Linux or macOS platform, Python 3 with the PySCF python package installed and the PyCall.jl package successfully built.","category":"page"},{"location":"#Installing-the-package","page":"Home","title":"Installing the package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is currently not in julia's general registry, but can be added through the repository URL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/TheStarAlight/SemiclassicalSFI.jl.git\")\n# In pkg mode of REPL:\n# (@v1.8) pkg> add https://github.com/TheStarAlight/SemiclassicalSFI.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is suggested to test the package to check if the functions check if some special features (e.g., GPU acceleration and molecular calculation) work on your platform:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.test(\"SemiclassicalSFI\")\n# In pkg mode of REPL:\n# (@v1.8) pkg> test SemiclassicalSFI","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Possible solution to precompilation failure\nSometimes the precompilation of the package and its dependencies fails, which usually happens on SciML's packages. Under such circumstances, try to delete the compiled julia code (usually stored in ~/.julia/compiled/<julia_version>) and precompile again. If the problem still exists after precompiling from scratch, you may try switching the dependencies' versions in the julia, which is done by specifying the version when adding the packages:using Pkg\nPkg.add(name=\"package_name\", version=\"1.0\")\n# In pkg mode of REPL:\n# (@v1.8) pkg> add package_name@1.0It is shown that OrdinaryDiffEq@6.53.3 and DiffEqGPU@2.4.1 runs well on Windows 10 (10.0.19044), WSL Ubuntu (22.04.1 LTS) and Manjaro Linux (Uranos 23.0.0).","category":"page"},{"location":"#Configuring-Python-and-PySCF","page":"Home","title":"Configuring Python and PySCF","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently the MO-ADK and WFAT features related to molecules rely on the PySCF python package. SemiclassicalSFI.jl calls the PySCF using the PyCall.jl package. There are two ways to set up the Python environment used by PyCall, here we suggest using your local Python environment for convenience.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To correctly set up the configuration of PyCall, first, set the PYTHON environment variable to your Python executable, and build the PyCall package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ENV[\"PYTHON\"] = \"path/to/python_exec\"\nusing Pkg\nPkg.build(\"PyCall\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"And don't forget to install PySCF in your Python via pip:","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ pip3 install pyscf","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Note\nSince the PySCF does not support the Windows, the molecular calculation must be performed on a Linux or macOS platform. However, for Windows users, they may install the WSL (Windows Subsystem for Linux), which supports the PySCF.","category":"page"},{"location":"#Contributors","page":"Home","title":"Contributors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Mingyu Zhu @ ECNU\nHongcheng Ni @ ECNU","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is licensed under the Apache 2.0 license, and is copyrighted by Mingyu Zhu, Hongcheng Ni and the other contributors.","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/#theory_traj_phase","page":"Trajectory Simulation and Phase Methods","title":"Theory: Trajectory Simulation and Phase Methods","text":"","category":"section"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"This section reviews the trajectory simulation procedure and the phase methods within.","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Given the initial conditions, the tunneled electrons evolve classically in the combined field of Coulomb and laser, following a classical trajectory, the scheme is named after the Classical Trajectory Monte Carlo (CTMC). Apart from the position and momentum, phase methods like the Quantum Trajectory Monte Carlo (QTMC) and Semiclassical Two-Step (SCTS) Model give an additional quantum phase property to the classical trajectories, which are capable of reproducing more details in the final momentum spectrum than the full-classical CTMC.","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"In the following we review the scheme of trajectory simulation and introduce the quantum phase methods available at present. Note that atomic units (a.u.) is used throughout.","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Pages = [\"theory2_trajectory_simulation_phase_methods.md\"]\nDepth = 3","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/#CTMC","page":"Trajectory Simulation and Phase Methods","title":"Classical Trajectory Monte Carlo (CTMC)","text":"","category":"section"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"In the CTMC, each sample electron carries a probability W, following a classical trajectory, and finally ends up with a final momentum bmp_infty = bmp_t=infty, which is our interested physical quantity.","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"The tunneled electrons, each having different tunneling time, initial positions and momenta, evolve under the Hamiltonian equation:","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"dotbmr = bmnabla_bmpH quad dotbmp = -bmnabla_bmrH","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"The Hamiltonian reads","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"H = frac12 left bmp+bmA(t) right^2 + V(bmr)","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"where V(bmr) denotes the potential of the parent ion.","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"After the laser ends, the electron interacts only with the residual parent ion. At a distance from the parent ion, the electron interacts with the potential's Coulomb tail, and its Runge-Lenz vector bma = bmptimesbmL - Zbmrr can be viewed as approximately conserved. Taking advantage of this conserved quantity, combining with the conservation of angular momentum and energy, we obtain the expression of the final momentum [ShvetsovShilovski_2012]:","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginaligned\n    bmp_infty = p_infty fracp_infty(bmLtimesbma)-bma1+p_infty^2 L^2 \n    p_infty^22 = p^22 - Zr \n    bmL = bmrtimesbmp \n    bma = bmptimesbmL - Zbmrr \nendaligned","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"where bmrbmp are quantities of the electron at any time after the laser ends. This scheme applies for electrons with positive energy, which are able to finally escape the parent ion and reach the detector. For electrons with negative energy, we assume that they finally become Rydberg states.","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Finally, electrons with similar final momenta (i.e., in the same small box of the final momentum grid) would be collected by summing up the probabilities they carry: W_bmp = sum_iW_i, and the final momentum spectrum is given by W_bmp.","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"[ShvetsovShilovski_2012]: N. I. Shvetsov-Shilovski et al., Ionization in elliptically polarized pulses: Multielectron polarization effects and asymmetry of photoelectron momentum distributions, Phys. Rev. A 85, 023428 (2012). DOI: 10.1103/PhysRevA.85.023428","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/#traj_nondipole","page":"Trajectory Simulation and Phase Methods","title":"Non-dipole Effects on the Trajectory Motion","text":"","category":"section"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Dipole approximation is usually applied in the study of laser-matter interaction by neglecting the spatial dependence of the laser field, i.e., we let bmA(bmrt) = bmA(t). However, for lasers with high intensity or frequency, the spatial dependence of the laser becomes noticeable, the dipole approximation breaks down, and we have to take non-dipole effects into account.","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"To include the first-order non-dipole effects in trajectory simulation, we first refer to the spatial dependent vector potential bmA(bmrt), giving its first-order expansion in space coordinates:","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"bmA(bmrt) = bmA(t) mathrme^mathrmibmkcdotbmr approx bmA(t) + fraczc bmF(t)","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"where we assume that the laser propagates in z direction. In this way we obtained the Hamiltonian which includes the first-order non-dipole effects:","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"H = frac12 left bmp+bmA(t)+fraczcbmF(t) right^2 + V(bmr)","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/#QTMC","page":"Trajectory Simulation and Phase Methods","title":"Quantum Trajectory Monte Carlo (QTMC)","text":"","category":"section"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Compared with the CTMC, the QTMC scheme endows each electron trajectory with a quantum phase Phi based on the Feynman path-integral approach [Li_2014]. The phase gets acculmulated during the electron's excursion and is expressed as","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Phi = - int_t_0^infty left frack^22 + V(bmr) + I_mathrmp right mathrmdt","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"where t_0 is the time when the electron tunneled, and bmk=dotbmr denotes the momentum. It's worth noting that in the velocity gauge, we distinguish the actual momentum/velocity bmk from bmp=bmk-bmA which denotes the canonical momentum when the laser is present, and use bmp for the momentum after the laser ends (the vector potential bmA vanishes and we have bmp=bmk). Finally the momentum spectrum is given by coherently summing up the probability amplitude, and taking the square modulus of the summation result:","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"W_bmp = left sum_i sqrtW_i mathrme^mathrmiPhi_i right^2","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"It's also worthwhile noting that in practical implementation, the upper limit of the integral of the quantum phase Phi doesn't have to be infinity. Since electrons which arrived at the same final momentum share the same energy after the laser ends (at t_mathrmf), the integral","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"int_t_mathrmf^infty left frack^22 + V(bmr) + I_mathrmp right mathrmdt","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"is same for electrons with the same final momentum. Therefore, in numerical implementation, the upper limit of the phase integral can be simply set as the end of the laser, i.e., the t_mathrmf.","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"[Li_2014]: M. Li et al., Classical-quantum correspondence for above-threshold ionization, Phys. Rev. Lett. 112, 113002 (2014). DOI: 10.1103/PhysRevLett.112.113002","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/#SCTS","page":"Trajectory Simulation and Phase Methods","title":"Semiclassical Two-Step (SCTS) Model","text":"","category":"section"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"The SCTS model [ShvetsovShilovski_2016] improves the quantum phase in the QTMC scheme, giving","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Phi = - bmk_0cdotbmr_0 - int_t_0^infty left frack^22 + V(bmr) - bmrcdotbmnablaV(bmr) + I_mathrmp right mathrmdt","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"The difference between the SCTS phase and the QTMC lies in two aspects: The first is the initial phase bmk_0cdotbmr_0, which is non-zero for non-zero initial longitudinal momentum k_parallel w.r.t. the non-adiabatic tunneling process. The second is the bmrcdotbmnablaV(bmr) term in the integrand which is omitted in the QTMC scheme.","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"For the SCTS model, the phase integral in the interval t_mathrmfinfty) cannot be simply neglected due to the presence of the bmrcdotbmnablaV(bmr) term in the integrand. However, the integral of this term can be reduced to an analytical expression in case of Coulomb potential (V(r)=Zr):","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginaligned\n    Phi_mathrmf^mathrmC(t_mathrmf)\n    = int_t_mathrmf^infty bmrcdotbmnablaV(bmr) mathrmdt \n    = Z int_t_mathrmf^infty fracmathrmdtr \n    = - fracZkappa left lng + sinh^-1 left( frackappagbmr_mathrmfcdotbmp_mathrmf right) right\nendaligned","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"where bmr_mathrmf=bmr(t_mathrmf), bmp_mathrmf=bmp(t_mathrmf) and g = sqrt1+2kappa^2 L^2 = sqrt1+2kappa^2 (bmr_mathrmftimesbmp_mathrmf)^2. In this way we obtain the expression of the SCTS phase that is suitable for numerical implementation:","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Phi = - bmk_0cdotbmr_0 + I_mathrmpt_0 - int_t_0^t_mathrmf left frack^22 + V(bmr) - bmrcdotbmnablaV(bmr) right mathrmdt + Phi_mathrmf^mathrmC(t_mathrmf)","category":"page"},{"location":"theory2_trajectory_simulation_phase_methods/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"[ShvetsovShilovski_2016]: N. I. Shvetsov-Shilovski et al., Semiclassical two-step model for strong-field ionization, Phys. Rev. A 94, 013415 (2016). DOI: 10.1103/PhysRevA.94.013415","category":"page"},{"location":"manual2_lasers/#lasers_doc","page":"Lasers","title":"Lasers","text":"","category":"section"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"This section provides information of available lasers in the library.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"In this section we list available lasers implemented in the Lasers module of the library.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"Lasers","category":"page"},{"location":"manual2_lasers/#SemiclassicalSFI.Lasers","page":"Lasers","title":"SemiclassicalSFI.Lasers","text":"The Lasers module provides information about laser fields.\n\n\n\n\n\n","category":"module"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"Pages = [\"manual2_lasers.md\"]\nDepth = 3","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"CurrentModule = SemiclassicalSFI.Lasers","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"using SemiclassicalSFI\nusing SemiclassicalSFI.Lasers","category":"page"},{"location":"manual2_lasers/#Basic-Properties-of-Monochromatic-Lasers","page":"Lasers","title":"Basic Properties of Monochromatic Lasers","text":"","category":"section"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"A monochromatic laser is composed of the carrier wave cos(omega t+phi) and the envelope f_mathrmenv(t). Given the amplitude of the vector potential A_0, the time-dependent vector potential of the laser, which we assume to propagate in z direction and have x axis as the principle axis of polarization, reads","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"bmA(t) =  A_0 f_mathrmenv(t) left cos(omega t+phi) bme_x + varepsilon sin(omega t+phi) bme_y right","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"where varepsilon is the ellipticity.","category":"page"},{"location":"manual2_lasers/#List-of-Available-Properties","page":"Lasers","title":"List of Available Properties","text":"","category":"section"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"Currently the monochromatic lasers implemented in the library include Cos4Laser, Cos2Laser, GaussianLaser and TrapezoidalLaser.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"The available properties of the laser fields are listed below. To obtain a property of the laser field, invoke the property as a method and pass the laser object as an argument. The following shows an example.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"l = Cos4Laser(peak_int=1e14, wave_len=800.0, cyc_num=10, ellip=0)\nLaserA0(l)\nAx = LaserAx(l)\nAx(0.0)","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":" Cos4Laser Cos2Laser GaussianLaser TrapezoidalLaser\nPeakInt ✔ ✔ ✔ ✔\nWaveLen ✔ ✔ ✔ ✔\nCycNum ✔ ✔  \nSpreadCycNum   ✔ \nSpreadDuration   ✔ \nFWHM_Duration   ✔ \nCycNumTotal    ✔\nCycNumTurnOn    ✔\nCycNumTurnOff    ✔\nCycNumConst    ✔\nEllipticity ✔ ✔ ✔ ✔\nAzimuth ✔ ✔ ✔ ✔\nAngFreq ✔ ✔ ✔ ✔\nPeriod ✔ ✔ ✔ ✔\nCEP ✔ ✔ ✔ ✔\nTimeShift ✔ ✔ ✔ ✔\nLaserF0 ✔ ✔ ✔ ✔\nLaserA0 ✔ ✔ ✔ ✔\nLaserFx ✔ ✔ ✔ ✔\nLaserFy ✔ ✔ ✔ ✔\nLaserAx ✔ ✔ ✔ ✔\nLaserAy ✔ ✔ ✔ ✔","category":"page"},{"location":"manual2_lasers/#Ellipticity","page":"Lasers","title":"Ellipticity","text":"","category":"section"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"The ellipticity varepsilon defines the polarization type of the laser field. For special cases, 0 indicates linear polarization and ±1 indicates circular polarization. The electric field rotates clockwise for positive ellipticities and counter-clockwise for negative ones.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"(Image: manual2_lasers_ellip.svg)","category":"page"},{"location":"manual2_lasers/#Azimuth-of-Principle-Axis","page":"Lasers","title":"Azimuth of Principle Axis","text":"","category":"section"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"The azimuth angle varphi of the principle axis defines a clockwise rotation of the laser field in the polarization plane.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"(Image: manual2_lasers_azimuth.svg)","category":"page"},{"location":"manual2_lasers/#Carrier-Envelope-Phase-(CEP)","page":"Lasers","title":"Carrier-Envelope-Phase (CEP)","text":"","category":"section"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"The carrier-envelope-phase (CEP) phi is the difference between the optical phase of the carrier wave and the envelope position. For few-cycle laser pulses, the influence of the CEP to the laser-matter interaction becomes significant.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"(Image: manual2_lasers_cep.svg)","category":"page"},{"location":"manual2_lasers/#Cos-envelope-Laser","page":"Lasers","title":"Cos⁴-envelope Laser","text":"","category":"section"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"A Cos4Laser has a cos⁴-shaped-envelope:","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"f_mathrmenv(t) =\n    begincases\n    cos^4left omega (t-t_0)2N right    -NT2 leq t-t_0 leq NT2 \n    0                                           mathrmotherwise \n    endcases","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"where omega is the angular frequency of the laser field, N is the cycle number, T the period, and t_0 denotes the peak time (corresponding to the time_shift in the constructor method).","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"For the detailed usage, cf. the documentation of Cos4Laser.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"Lasers.Cos4Laser","category":"page"},{"location":"manual2_lasers/#SemiclassicalSFI.Lasers.Cos4Laser","page":"Lasers","title":"SemiclassicalSFI.Lasers.Cos4Laser","text":"struct Cos4Laser <: MonochromaticLaser\n\nRepresents a monochromatic elliptically polarized laser field with Cos4-shape envelope propagating in z direction.\n\nAn instance of Cos4Laser can be initialized via the constructor method:\n\nCos4Laser(peak_int, wave_len|ang_freq, cyc_num|duration, ellip, azi=0.0, cep=0.0, t_shift=0.0)\n\nParameters\n\npeak_int    : Peak intensity of the laser field (in W/cm²).\nwave_len    : Wave length of the laser field (in nm). Must specify either wave_len or ang_freq.\nang_freq    : Angular frequency of the laser field (in a.u.). Must specify either wave_len or ang_freq.\ncyc_num     : Number of cycles of the laser field. Must specify either cyc_num or duration.\nduration    : Duration of the laser field (in a.u.). Must specify either cyc_num or duration.\nellip       : Ellipticity of the laser field [-1≤ε≤1, 0 indicates linear polarization and ±1 indicates circular polarization].\nazi         : Azimuth angle of the laser's polarization's principle axis relative to x axis (in radians) (optional, default 0).\ncep         : Carrier-Envelope-Phase of the laser field (optional, default 0).\nt_shift     : Time shift of the laser (in a.u.) relative to the peak (optional, default 0).\n\n\n\n\n\n","category":"type"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"The following shows an example of Cos4Laser and its envelope shape.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"Cos4Laser(peak_int=1e14, wave_len=800.0, cyc_num=10, ellip=0)","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"(Image: manual2_lasers_env_cos4.svg)","category":"page"},{"location":"manual2_lasers/#Cos-envelope-Laser-2","page":"Lasers","title":"Cos²-envelope Laser","text":"","category":"section"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"A Cos2Laser has a cos²-shaped-envelope, similiar with the Cos4Laser:","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"f_mathrmenv(t) =\n    begincases\n    cos^2left omega (t-t_0)2N right    -NT2 leq t-t_0 leq NT2 \n    0                                           mathrmotherwise \n    endcases","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"For the detailed usage, cf. the documentation of Cos2Laser.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"Lasers.Cos2Laser","category":"page"},{"location":"manual2_lasers/#SemiclassicalSFI.Lasers.Cos2Laser","page":"Lasers","title":"SemiclassicalSFI.Lasers.Cos2Laser","text":"struct Cos2Laser <: MonochromaticLaser\n\nRepresents a monochromatic elliptically polarized laser field with Cos2-shape envelope propagating in z direction.\n\nAn instance of Cos2Laser can be initialized via the constructor method:\n\nCos2Laser(peak_int, wave_len|ang_freq, cyc_num|duration, ellip, azi=0.0, cep=0.0, t_shift=0.0)\n\nParameters\n\npeak_int    : Peak intensity of the laser field (in W/cm²).\nwave_len    : Wave length of the laser field (in nm). Must specify either wave_len or ang_freq.\nang_freq    : Angular frequency of the laser field (in a.u.). Must specify either wave_len or ang_freq.\ncyc_num     : Number of cycles of the laser field. Must specify either cyc_num or duration.\nduration    : Duration of the laser field (in a.u.). Must specify either cyc_num or duration.\nellip       : Ellipticity of the laser field [-1≤ε≤1, 0 indicates linear polarization and ±1 indicates circular polarization].\nazi         : Azimuth angle of the laser's polarization's principle axis relative to x axis (in radians) (optional, default 0).\ncep         : Carrier-Envelope-Phase of the laser field (optional, default 0).\nt_shift     : Time shift of the laser (in a.u.) relative to the peak (optional, default 0).\n\n\n\n\n\n","category":"type"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"The following shows an example of Cos2Laser and its envelope shape.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"Cos2Laser(peak_int=1e14, wave_len=800.0, cyc_num=10, ellip=0)","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"(Image: manual2_lasers_env_cos2.svg)","category":"page"},{"location":"manual2_lasers/#Gaussian-envelope-Laser","page":"Lasers","title":"Gaussian-envelope Laser","text":"","category":"section"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"A GaussianLaser has a Gaussian-shaped-envelope:","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"f_mathrmenv(t) = expleft -(t-t_0)^2sigma^2 right = expleft -8ln2(t-t_0)^2tau_mathrmFWHM^2 right","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"where sigma is the temporal width of the laser (relating to the spread_duration in the constructor method) and tau_mathrmFWHM=2sqrt2ln2sigma denotes the laser's temporal FWHM (Full-Width at Half Maximum).","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"For the detailed usage, cf. the documentation of GaussianLaser.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"Lasers.GaussianLaser","category":"page"},{"location":"manual2_lasers/#SemiclassicalSFI.Lasers.GaussianLaser","page":"Lasers","title":"SemiclassicalSFI.Lasers.GaussianLaser","text":"struct GaussianLaser <: MonochromaticLaser\n\nRepresents a monochromatic elliptically polarized laser field with Gaussian-shape envelope propagating in z direction.\n\nAn instance of GaussianLaser can be initialized via the constructor method:\n\nGaussianLaser(peak_int, wave_len|ang_freq, spread_cyc_num|spread_duration|FWHM_duration, ellip, azi=0., cep=0., t_shift=0.)\n\nParameters\n\npeak_int        : Peak intensity of the laser field (in W/cm²).\nwave_len        : Wave length of the laser field (in nm). Must specify either wave_len or ang_freq.\nang_freq        : Angular frequency of the laser field (in a.u.). Must specify either wave_len or ang_freq.\nspread_cyc_num  : Temporal width (converting to cycle numbers) of the laser field (in a.u.), namely σ. Must specify one in spread_cyc_num, spread_duration and FWHM_duration.\nspread_duration : Temporal width of the laser field (in a.u.). Must specify one in spread_cyc_num, spread_duration and FWHM_duration.\nFWHM_duration   : Temporal FWHM (Full Width at Half Maximum) of the laser field (in a.u.). Must specify one in spread_cyc_num, spread_duration and FWHM_duration.\nellip           : Ellipticity of the laser field [-1≤ε≤1, 0 indicates linear polarization and ±1 indicates circular polarization].\nazi             : Azimuth angle of the laser's polarization's principle axis relative to x axis (in radians) (optional, default 0).\ncep             : Carrier-Envelope-Phase of the laser field (optional, default 0).\nt_shift         : Time shift of the laser (in a.u.) relative to the peak (optional, default 0).\n\n\n\n\n\n","category":"type"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"An example of GaussianLaser and its envelope shape are shown as follows.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"GaussianLaser(peak_int=1e14, wave_len=800.0, FWHM_duration=1103.2, ellip=0)","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"(Image: manual2_lasers_env_gaussian.svg)","category":"page"},{"location":"manual2_lasers/#Trapezoidal-envelope-Laser","page":"Lasers","title":"Trapezoidal-envelope Laser","text":"","category":"section"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"A TrapezoidalLaser has a trapezoidal-shaped-envelope:","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"f_mathrmenv(t) =\n    begincases\n        (t-t_0)  N_mathrmonT\n                 0  t-t_0 leq N_mathrmonT \n        1\n                 N_mathrmonT  t-t_0 leq (N_mathrmon+N_mathrmconst)T \n        1-t-t_0-(N_mathrmon+N_mathrmconst)T  N_mathrmoffT\n                 (N_mathrmon+N_mathrmconst)T  t-t_0 leq (N_mathrmon+N_mathrmconst+N_mathrmoff)T \n        0\n                 mathrmotherwise\n    endcases","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"where N_mathrmon N_mathrmconst N_mathrmoff are cycle numbers during the turn-on, constant, and turn-off stages. Note that for the TrapezoidalLaser, the t_0 denotes the time of rise instead of time of peak, in contrast to the previous lasers.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"For the detailed usage, cf. the documentation of TrapezoidalLaser.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"Lasers.TrapezoidalLaser","category":"page"},{"location":"manual2_lasers/#SemiclassicalSFI.Lasers.TrapezoidalLaser","page":"Lasers","title":"SemiclassicalSFI.Lasers.TrapezoidalLaser","text":"struct TrapezoidalLaser <: MonochromaticLaser\n\nRepresents a monochromatic elliptically polarized laser field with Trapezoidal-shape envelope propagating in z direction.\n\nAn instance of TrapezoidalLaser can be initialized via the constructor method:\n\nTrapezoidalLaser(peak_int, wave_len|ang_freq, cyc_num_turn_on, cyc_num_turn_off, cyc_num_const, ellip, azi=0.0, cep=0.0, t_shift=0.0)\n\nParameters\n\npeak_int        : Peak intensity of the laser field (in W/cm²).\nwave_len        : Wavelength of the laser field (in nm). Must specify either wave_len or ang_freq.\nang_freq        : Angular frequency of the laser field (in a.u.). Must specify either wave_len or ang_freq.\ncyc_num_turn_on : Number of cycles of the laser field in the turn-on stage.\ncyc_num_turn_off: Number of cycles of the laser field in the turn-off stage.\ncyc_num_const   : Number of cycles of the laser field in the constant-intensity stage.\nellip           : Ellipticity of the laser field [-1≤ε≤1, 0 indicates linear polarization and ±1 indicates circular polarization].\nazi             : Azimuth angle of the laser's polarization's principle axis relative to x axis (in radians) (optional, default 0).\nt_shift         : Time shift of the laser (in a.u.) relative to the beginning of TURN-ON (optional, default 0).\n\n\n\n\n\n","category":"type"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"In the following is an example of TrapezoidalLaser and its envelope shape.","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"l = TrapezoidalLaser(\n        peak_int=1e14, wave_len=800.0,\n        cyc_num_turn_on=3, cyc_num_turn_off=3, cyc_num_const=4,\n        ellip=0, t_shift=-551.6)","category":"page"},{"location":"manual2_lasers/","page":"Lasers","title":"Lasers","text":"(Image: manual2_lasers_env_trapezoidal.svg)","category":"page"}]
}
