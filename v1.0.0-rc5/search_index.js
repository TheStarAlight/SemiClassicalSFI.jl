var documenterSearchIndex = {"docs":
[{"location":"theory2_traj_simu_quant_phase/#theory_traj_phase","page":"Trajectory Simulation and Phase Methods","title":"Theory: Trajectory Simulation and Quantum Phase","text":"","category":"section"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Given the initial conditions, the electrons released from the tunnel exit subsequently evolve classically in the combination of Coulomb and laser fields, following a classical trajectory, and the scheme is named the Classical Trajectory Monte Carlo (CTMC). Apart from the position and momentum, a quantum phase could be endowed to the evolving trajectory, as in the Quantum Trajectory Monte Carlo (QTMC) and Semiclassical Two-Step (SCTS) Model, which largely retain quantum effects in the final PMD compared to the purely classical CTMC.","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"In this section we review the scheme of trajectory simulation and introduce the quantum phase methods available in eTraj.","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Pages = [\"theory2_traj_simu_quant_phase.md\"]\nDepth = 2","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"","category":"page"},{"location":"theory2_traj_simu_quant_phase/#CTMC","page":"Trajectory Simulation and Phase Methods","title":"Classical Trajectory Monte Carlo (CTMC)","text":"","category":"section"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"In the CTMC, each electron carries a probability W, following a classical trajectory, and finally ends up with a final momentum pp_infty = pprvert_t=infty, which is our interested physical quantity.","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"The tunneled electrons, each having different tunneling times, initial positions and momenta, evolve under the Hamiltonian equation:","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\n    dotrr = bmnabla_pp H quad dotpp = - bmnabla_rr H\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"and we use the Hamiltonian under the LG.","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"After the laser ends, the electron interacts only with the residual parent ion. At a distance from the parent ion, the electron interacts with the potential's Coulomb tail, and its Runge-Lenz vector","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\n    aa = pp times LL - Zrrr\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"can be viewed as asymptotically conserved. Taking advantage of the conservation of aa as well as the angular momentum and energy, we obtain the expression of the final momentum [ShvetsovShilovski_2012]:","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\nbeginaligned\n    pp_infty      = p_infty fracp_infty (LLtimesaa)-aa1+p_infty^2 L^2 \n    p_infty^22    = p^22 - Zr \n    LL             = rrtimespp \n    aa             = pptimesLL - Zrrr\nendaligned\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"where rr and pp are quantities of the electron at any time after the laser ends. This scheme applies for electrons with positive energy, which are able to finally escape the parent ion and reach the detector. For electrons with negative energy, we assume that they get captured into Rydberg orbitals.","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Finally, electrons with similar final momenta (i.e., in the same box of the final momentum grid) would be collected by summing up the probability they carry: W_pp = sum_i W_i, and the final momentum spectrum is given by W_pp.","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"[ShvetsovShilovski_2012]: N. I. Shvetsov-Shilovski, D. Dimitrovski, and L. B. Madsen, Ionization in elliptically polarized pulses: Multielectron polarization effects and asymmetry of photoelectron momentum distributions, Phys. Rev. A 85, 023428 (2012). DOI: 10.1103/PhysRevA.85.023428.","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"","category":"page"},{"location":"theory2_traj_simu_quant_phase/#QTMC","page":"Trajectory Simulation and Phase Methods","title":"Quantum Trajectory Monte Carlo (QTMC)","text":"","category":"section"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"Compared with the CTMC, the QTMC scheme endows each electron trajectory with a quantum phase based on the Feynman path-integral approach [Li_2014], which is actually the S_rmtraj in Eq. (7) in SFA with additional account of the Coulomb potential. The phase gets accumulated during the electron's excursion and is expressed as","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\n    Phi^rmQTMC = S_rmtraj = - int_tr^infty left frack^22 + V(rr) + Ip right dd t\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"where tr is the time when the electron exits the tunnel, and kk=dotrr denotes the momentum. Finally, the momentum spectrum is given by coherently summing up the probability amplitude leading to the same final momentum, and taking the square modulus of the summation result:","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\n    W_pp = abssum_i sqrtW_i ee^ii tildeS_i^2\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"where tildeS_i contains the initial phase of the prefactor and the phase accumulated during the tunneling process, as well as the trajectory motion:","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\n    tildeS = arg mathcalP_pp + Re S_rmtun + S_rmtraj\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"The phase Re S_rmtun can be evaluated numerically, but can be simplified if we follow the non-adiabatic-expansion scheme in SFA-SPANE:","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\nbeginaligned\n    Re S_rmtun\n    approx Re  int_ts^tr  ddtau left frac12 left pp + AA(tr) - iitiFF(tr) + frac12 ti^2 FF(tr)right^2  + Ip right \n    = - kk(tr)cdotFF(tr) fracti^22 + o(ti^2) \n    approx -kk_0cdotrr_0\nendaligned\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"The last line of Eq. (7), i.e., -kk_0cdotrr_0, vanishes for the SFA-SPANE and ADK initial condition methods due to vanishing longitudinal initial momentum (k_parallel = 0).","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"It's also worthwhile noting that in the practical implementation, the upper limit of the integral in Eq. (4) doesn't have to be infinity. Since electrons arrive at the same final momentum share the same energy after the laser ends (at tf), the integral","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\n    int_tf^infty left frack^22 + V(rr) + Ip right dd t\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"is same for electrons with the same final momentum. Therefore, in numerical implementation, the upper limit of the phase integral in Eq. (4) can be simply set as the end of the laser, i.e., the tf, giving","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\n    S^rmQTMC_rmtraj = - int_tr^tf left frack^22 + V(rr) + Ip right dd t\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"[Li_2014]: M. Li, J.-W. Geng, H. Liu, Y. Deng, C. Wu, L.-Y. Peng, Q. Gong, and Y. Liu, Classical-quantum correspondence for above-threshold ionization, Phys. Rev. Lett. 112, 113002 (2014). DOI: 10.1103/PhysRevLett.112.113002","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"","category":"page"},{"location":"theory2_traj_simu_quant_phase/#SCTS","page":"Trajectory Simulation and Phase Methods","title":"Semiclassical Two-Step (SCTS) Model","text":"","category":"section"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"The SCTS model [ShvetsovShilovski_2016] improves the quantum phase in the QTMC scheme, giving","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\n    Phi^rmSCTS = Re S_rmtun + S_rmtraj\n    = underbrace-kk_0cdotrr_0_Re S_rmtun underbrace- int_t_0^infty left frack^22 + V(rr) - rrcdotbmnablaV(rr) + Ip right dd t_S_rmtraj\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"The difference between the SCTS phase [Phi^rmSCTS in Eq. (10)] and the QTMC phase [Phi^rmQTMC in Eq. (4)] lies in two aspects: The first is the initial phase -kk_0cdotrr_0 obtained in the tunneling process, which is non-zero for k_parallelneq 0 for non-adiabatic tunneling. The second is the rrcdotbmnablaV(rr) term in the integrand, which is omitted in the QTMC scheme. The difference arises from formulation schemes of the two methods, as the QTMC obtained the phase under the first-order perturbation theory, while the SCTS's formulation went beyond the perturbation theory. We note that we would only adopt the trajectory phase of the SCTS model, i.e., the S_rmtraj in Eq. (10), because the tunneling phase Re S_rmtun is supposed to be included in the stage of initial condition preparation.","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"For the SCTS model, the phase integral in Eq. (10) in the interval tf infty) cannot be simply neglected due to the presence of the rrcdotbmnablaV(rr) term. However, the integral of this term can be reduced to an analytical expression in case of Coulomb potential, called the post-pulse Coulomb phase:","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\nbeginaligned\n    S_rmtrajf^rmC(tf)\n    = int_tf^infty rrcdotbmnablaV(rr) dd t\n    = Z int_tf^infty fracdd tr\n    = - n^* left lng + sinh^-1left( frackappagrr_rmfcdotpp_rmf right) right\nendaligned\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"where rr_rmf=rr(tf), pp_rmf=pp(tf) and g=sqrt1+2kappa^2 L^2=sqrt1+2kappa^2 (rr_rmftimespp_rmf)^2.","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"In this way we obtain the expression of the SCTS trajectory phase that is suitable for numerical implementation:","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"beginequation\nbeginaligned\n    S^rmSCTS_rmtraj\n    = Ip tr - int_tr^tf left frack^22 + V(rr) - rrcdotbmnablaV(rr) right dd t + S_rmtrajf^rmC(tf)\nendaligned\nendequation","category":"page"},{"location":"theory2_traj_simu_quant_phase/","page":"Trajectory Simulation and Phase Methods","title":"Trajectory Simulation and Phase Methods","text":"[ShvetsovShilovski_2016]: N. I. Shvetsov-Shilovski, M. Lein, L. B. Madsen, E. Räsänen, C. Lemell, J. Burgdörfer, D. G. Arbó, and K. Tőkési, Semiclassical two-step model for strong-field ionization, Phys. Rev. A 94, 013415 (2016). DOI: 10.1103/PhysRevA.94.013415","category":"page"},{"location":"stepbystep_tutorial/#Step-by-step-Tutorial-of-Installation","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial of Installation","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"– For beginners in julia","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"This section provides a step-by-step tutorial on how to install and use eTraj.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"Pages = [\"stepbystep_tutorial.md\"]\nDepth = 4","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"","category":"page"},{"location":"stepbystep_tutorial/#Installing-Julia","page":"Step-by-step Tutorial","title":"Installing Julia","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"The manual for installation of Julia is available at the official website.","category":"page"},{"location":"stepbystep_tutorial/#Windows","page":"Step-by-step Tutorial","title":"Windows","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"For Windows users, install using the following command:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"> winget install julia -s msstore","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"This would also install juliaup which helps in managing multiple versions of Julia.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"The jill is an alternative to juliaup which can be used for installing and managing multiple versions of Julia. It would automatically search for the fastest mirror and download the installer and is useful for users with slow internet connections.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"For offline installation, an installer is available at here. Please follow the instructions and make sure that julia is added to the PATH environment variable.","category":"page"},{"location":"stepbystep_tutorial/#Linux-and-macOS","page":"Step-by-step Tutorial","title":"Linux & macOS","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"For Linux & macOS users, use the following command:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"$ curl -fsSL https://install.julialang.org | sh","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"which would install juliaup for multiple version management.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"The jill is an alternative to juliaup which can be used for installing and managing multiple versions of Julia. It would automatically search for the fastest mirror and download the installer and is useful for users with slow internet connections.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"For offline installation, the binaries are available at here. Please follow the instructions for Linux and macOS and make sure that julia is added to the PATH environment variable.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"warning: Note\nIt is not recommended to install julia using Linux package managers or macOS homebrew. See this notice.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"","category":"page"},{"location":"stepbystep_tutorial/#Package-Management","page":"Step-by-step Tutorial","title":"Package Management","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"Configuration files and packages are stored in ~/.julia/ directory.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"The package manager is accessible through the REPL[1] by typing ]. This will open a new prompt (starting by (@v1.x) pkg>) where you can install (add), update (up), or remove (rm) packages. To install/update/remove a package, simply type add/up/rm in the package mode, following the package name, and press Enter. For example:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"julia> ]\n(@v1.9) pkg> add Example\n   Resolving package versions...\n   Installed Example ─ v0.5.3\n    Updating `~/.julia/environments/v1.9/Project.toml`\n  [7876af07] + Example v0.5.3\n    Updating `~/.julia/environments/v1.9/Manifest.toml`\n  [7876af07] + Example v0.5.3","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"To view the list of installed packages, type status or st in package mode and press Enter.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"See the documentation for more details on using the package manager.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"[1]: REPL (Read–eval–print loop) is an interactive programming environment that reads user input, evaluates it, and prints the result. The Julia REPL is opened by running julia in your terminal.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"To install eTraj, use the following command in package mode:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"(@v1.9) pkg> add https://github.com/TheStarAlight/eTraj.jl.git","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"For offline installation, use git to clone the repository:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"$ git clone https://github.com/TheStarAlight/eTraj.jl.git","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"and then install it in Julia by specifying the directory:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"(@v1.9) pkg> add /path/to/eTraj","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"","category":"page"},{"location":"stepbystep_tutorial/#Configuring-Python-and-PySCF-(*Optional*)","page":"Step-by-step Tutorial","title":"Configuring Python and PySCF (Optional)","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"Currently, the calculation of molecules' asymptotic coefficients (for MO-ADK/MO-SFA) and WFAT coefficients rely on the PySCF python package. eTraj calls the PySCF using the PyCall.jl package.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"There are two ways to set up the Python environment used by PyCall:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"using your local Python environment by specifying the path of your Python executable in ENV[\"PYTHON\"] and build the PyCall package.\nusing a private Python environment managed by the Conda.jl, which is implicitly installed by the PyCall package by default;","category":"page"},{"location":"stepbystep_tutorial/#Using-the-local-Python-environment","page":"Step-by-step Tutorial","title":"Using the local Python environment","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"To correctly set up the configuration of PyCall, first, set the PYTHON environment variable to the path your Python executable, and build the PyCall package:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"ENV[\"PYTHON\"] = \"path/to/python_exec\"\nusing Pkg\nPkg.build(\"PyCall\")\n# In pkg mode of REPL:\n# (@v1.9) pkg> build PyCall","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"And don't forget to install PySCF via pip in your system shell:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"$ pip install pyscf==2.3.0","category":"page"},{"location":"stepbystep_tutorial/#Using-Conda.jl","page":"Step-by-step Tutorial","title":"Using Conda.jl","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"Before installing eTraj, install Conda first:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"using Pkg\nPkg.add(\"Conda\")","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"Then call pip within Conda to install PySCF:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"using Conda\nConda.pip_interop(true)\nConda.pip(\"install\", \"pyscf==2.3.0\")","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"warning: Note\nSince the PySCF does not support the Windows platform, the molecular calculation must be performed on a Linux or macOS platform. However, for Windows users, they may install the WSL (Windows Subsystem for Linux), which supports the PySCF.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"","category":"page"},{"location":"stepbystep_tutorial/#running-scripts","page":"Step-by-step Tutorial","title":"Running Scripts","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"To run a julia script, use the following command in your terminal:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"$ julia /path/to/script.jl","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"To enable multithreading, use the -t option followed by the number of threads you want to use. For example, the following command runs a script with 4 threads:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"$ julia -t 4 /path/to/script.jl","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"If you want to run a script interactively, you can start Julia in REPL mode and then load your script using the include function. For example:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"julia> include(\"/path/to/script.jl\")","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"","category":"page"},{"location":"stepbystep_tutorial/#Using-eTraj","page":"Step-by-step Tutorial","title":"Using eTraj","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"It is suggested to write the simulation task in a julia script, and then run it using julia.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"note: Tips\nIt is recommended to use vscode with julia extension installed for GUI or the vim editor with julia-vim installed for TUI in order for a better coding experience. The julia extensions provide the feature of typing special Unicode characters in a LaTeX-like syntax, e.g., if you want to type the Greek letter α, you can type \\alpha, and press Tab(⇥). This feature is also available in Julia REPL.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"","category":"page"},{"location":"stepbystep_tutorial/#Defining-Lasers","page":"Step-by-step Tutorial","title":"Defining Lasers","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"The following example initializes a 4-cycle linearly polarized 800-nm laser with its peak intensity at 0.1 PW/cm² (1.0×10¹⁴ W/cm²) (See also Cos2Laser & Cos4Laser):","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"using eTraj.Lasers, eTraj.Units\nl = Cos2Laser(                # Cos²-shape in field strength's temporal profile\n    peak_int = 1e14W/cm^2,    # Peak intensity (`0.1PW/cm^2` also works)\n    wave_len = 800.0nm,       # wavelength at 800 nm (`0.8μm` also works)\n    cyc_num  = 4,             # 10 cycles in duration (possible substitution: `duration = 10.6fs`)\n    cep      = 0.0,           # carrier-envelope phase\n    ellip    = 0.0            # linear polarization\n)","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"Another example for Gaussian-shaped laser (See also GaussianLaser):","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"using eTraj.Lasers, eTraj.Units\nl = GaussianLaser(\n    peak_int        = 1.0PW/cm^2,\n    ang_freq        = 40.0eV,\n    FWHM_duration   = 10.0fs,\n    ellip           = 1.0\n)","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"It is also possible to combine two monochromatic lasers to form a BichromaticLaser:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"using eTraj.Lasers, eTraj.Units\nl1 = Cos4Laser(peak_int=1.0PW/cm^2, wave_len=800nm, cyc_num=10, ellip=1)\nl2 = Cos4Laser(peak_int=1.0PW/cm^2, wave_len=400nm, cyc_num=20, ellip=-1)\nl = BichromaticLaser(l1=l1, l2=l2, delay=0.5fs)","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"","category":"page"},{"location":"stepbystep_tutorial/#Defining-Targets","page":"Step-by-step Tutorial","title":"Defining Targets","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"eTraj provides flexible interfaces for defining targets.","category":"page"},{"location":"stepbystep_tutorial/#Atoms","page":"Step-by-step Tutorial","title":"Atoms","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"For atom targets, you can use either predefined atoms or create custom ones.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"A HydrogenLikeAtom's potential is a soft-core Coulomb potential. An SAEAtom's potential is defined according to Tong's model [JPB 38, 2593 (2005)]. An example of initialization:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"using eTraj.Targets, eTraj.Units\nt1 = HydrogenLikeAtom(\n    Ip = 0.5,           # ionization potential in atomic units (or `13.6eV`)\n    Z  = 1,             # nuclear charge\n    soft_core = 1e-10,  # soft-core parameter to avoid singularity\n    name = \"Custom H\"   # optional name\n)\nt2 = SAEAtom(\n    Ip = 12.13eV,\n    Z  = 1,\n    l  = 1,         # angular momentum quantum number\n    a1 = 51.35554,  # model parameters for effective potential\n    b1 = 2.111554,\n    a2 = -99.92747,\n    b2 = 3.737221,\n    a3 = 1.644457,\n    b3 = 0.4306465,\n    asymp_coeff = 1.3,  # asymptotic coefficient of wavefunction\n    name = \"Custom Xe\"  # optional name\n)","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"To define a target using predefined atoms, use the get_atom method:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"julia> using eTraj.Targets, eTraj.Units\n\njulia> t1 = get_atom(\"H\")      # Hydrogen atom\n[HydrogenLikeAtom] Atom H, Ip=0.5000 (13.61 eV), Z=1\n\njulia> t2 = get_atom(\"He1p\")   # He⁺ ion\n[HydrogenLikeAtom] Atom He⁺, Ip=1.0000 (27.21 eV), Z=2\n\njulia> t3 = get_atom(\"Xe\"; m=1, quan_ax_θ=π/2, quan_ax_ϕ=0.0) # Xenon atom with magnetic quantum number m=1 (quantization axis is x-axis)\n[SAEAtom] Atom Xe (p orbital, m=1), Ip=0.4458 (12.13 eV), Z=1, θϕ=(90.0°,0.0°)","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"You can view available predefined atoms using the get_available_atoms method:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"julia> using eTraj.Targets\n\njulia> get_available_atoms() |> print\n[\"H\", \"He1p\", \"Li2p\", \"He\", \"Ne\", \"Ne1p\", \"Ne2p\", \"Ar\", \"Ar1p\", \"Ar2p\", \"V\", \"Ni\", \"Kr\", \"Kr1p\", \"Rb\", \"Nb\", \"Pd\", \"Xe\", \"Xe1p\", \"Ta\"]","category":"page"},{"location":"stepbystep_tutorial/#Molecules","page":"Step-by-step Tutorial","title":"Molecules","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"Some commonly used molecules are predefined and can be accessed using the get_mol method:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"julia> using eTraj.Targets, eTraj.Units\n\n# H₂ molecule with z-axis as the molecular axis\njulia> m1 = get_mol(\"Hydrogen\")\n[GenericMolecule] Hydrogen (H₂)\nAsymp coeff of HOMO available\nWFAT data of HOMO available\n#          E (Ha)  occp\n⋮    ⋮       ⋮      ⋮⋮\n3  LUMO+1   0.232  ----\n2  LUMO     0.148  ----\n1  HOMO    -0.594  -↿⇂-\n\n# O₂ molecule with a non-zero total spin\njulia> m2 = get_mol(\"Oxygen\")\n[GenericMolecule] Oxygen (O₂)\nAsymp coeff of α-HOMO-1 & α-HOMO available\nWFAT data of α-HOMO-1 & α-HOMO available\n#          Eα(Ha)  occp  Eβ(Ha)\n⋮    ⋮        ⋮     ⋮⋮      ⋮     ⋮\n11 LUMO+1   0.681  ----   0.741 LUMO+3\n10 LUMO     0.377  ----   0.431 LUMO+2\n9  HOMO    -0.554  -↿--   0.110 LUMO+1\n8  HOMO-1  -0.554  -↿--   0.110 LUMO\n7  HOMO-2  -0.763  -↿⇂-  -0.575 HOMO\n6  HOMO-3  -0.841  -↿⇂-  -0.575 HOMO-1\n5  HOMO-4  -0.841  -↿⇂-  -0.702 HOMO-2\n4  HOMO-5  -1.204  -↿⇂-  -0.993 HOMO-3\n⋮    ⋮        ⋮     ⋮⋮      ⋮     ⋮\n\n# CO molecule rotated 90° around y axis\njulia> m3 = get_mol(\"Carbon Monoxide\", rot_β=90°)\n[GenericMolecule] Carbon Monoxide (CO), αβγ=(0.0°,90.0°,0.0°)\nAsymp coeff of HOMO-2 & HOMO-1 & HOMO available\nWFAT data of HOMO-2 & HOMO-1 & HOMO available\n#          E (Ha)  occp\n⋮    ⋮       ⋮      ⋮⋮\n9  LUMO+1   0.139  ----\n8  LUMO     0.139  ----\n7  HOMO    -0.554  -↿⇂-\n6  HOMO-1  -0.639  -↿⇂-\n5  HOMO-2  -0.639  -↿⇂-\n4  HOMO-3  -0.804  -↿⇂-\n⋮    ⋮       ⋮      ⋮⋮","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"You can view available predefined atoms and molecules using the get_available_mols method:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"julia> using eTraj.Targets\n\njulia> get_available_mols() |> print\n[\"Hydrogen\", \"Nitrogen\", \"Oxygen\", \"Carbon Monoxide\", \"Nitric Oxide\", \"Hydrochloric Acid\", \"Carbon Dioxide\", \"Sulfur Dioxide\", \"Water\", \"Ammonia\", \"Acetylene\", \"Methane\", \"Benzene\"]","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"To create a custom molecule, use the GenericMolecule constructor. The following example creates a carbon dioxide molecule, and runs quantum chemistry calculations to obtain the asymptotic coefficients (for MO-SFA-based initial condition methods) and WFAT coefficients:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"using eTraj.Targets, eTraj.Units\n\n# Creating a custom molecule\nm = GenericMolecule(\n    atoms = [\"O\", \"C\", \"O\"],    # atom types\n    atom_coords = [             # atomic coordinates\n        0 0 -1.1600;\n        0 0  0.0000;\n        0 0  1.1600\n    ] * Å,\n    charge = 0,                 # total charge\n    name = \"Carbon Dioxide\"     # optional name\n)\n\n# Calculating asymptotic coefficients and WFAT data\nMolInitCalculator!(m, basis=\"cc-pVDZ\")  # initializes the calculator backend with specified basis set\nMolCalcAsympCoeff!(m, 0)   # calculates asymptotic coefficients for HOMO (index 0)\nMolCalcWFATData!(m, 0)     # calculate WFAT data for HOMO (index 0)\n\n# Saving calculated data for future use\nMolSaveDataAs!(m, \"CO2_molecule.jld2\")\n\n# Loading previously saved molecule data\nm_ = LoadMolecule(\"CO2_molecule.jld2\")\ndisplay(m_)\n# [GenericMolecule] Carbon Dioxide\n# Asymp coeff of HOMO available\n# WFAT data of HOMO available\n# #          E (Ha)  occp\n# ⋮    ⋮       ⋮      ⋮⋮\n# 13 LUMO+1   0.217  ----\n# 12 LUMO     0.217  ----\n# 11 HOMO    -0.536  -↿⇂-\n# 10 HOMO-1  -0.536  -↿⇂-\n# 9  HOMO-2  -0.709  -↿⇂-\n# 8  HOMO-3  -0.709  -↿⇂-\n# ⋮    ⋮       ⋮      ⋮⋮","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"For advanced usages (setting customized grids for quantum chemistry calculations, dealing with non-HOMO orbitals and open-shell molecules, etc.), we suggest reading the documentation of the Targets module.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"","category":"page"},{"location":"stepbystep_tutorial/#Trajectory-Simulation-Parameters","page":"Step-by-step Tutorial","title":"Trajectory Simulation Parameters","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"The trajectory simulation requires configuring several key parameters. Below we would guide you to make appropriate choices of the simulation's configuration. For a comprehensive understanding on the parameters, please refer to the documentation.","category":"page"},{"location":"stepbystep_tutorial/#Initial-Condition-and-Phase-Methods","page":"Step-by-step Tutorial","title":"Initial Condition and Phase Methods","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"First of all, the core methods of the trajectory simulation should be selected carefully:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"init_cond_method: Which theory to use for generating initial electrons?\ntraj_phase_method: How quantum effects are handled?","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"For init_cond_method, candidates include:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"SPA-based methods:\nADK   - Best for small Keldysh parameters (γ≪1) when non-adiabatic effects are negligible;\nSPANE - Recommended for most cases, which efficiently includes non-adiabatic effects;\nSPA   - For stronger non-adiabatic scenarios which require full treatment, but much more computational-intensive than SPANE.\nWFAT - Specialized for molecular targets (GenericMolecule) which accounts for the influence of permanent dipoles. However, quantum effects are not available in this method, i.e., only CTMC is supported for the phase method.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"For traj_phase_method:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"CTMC - Pure classical trajectories, suitable for scenarios where no inter-cycle interference is involved.\nQTMC - Includes basic quantum effects through first-order perturbation.\nSCTS - Includes quantum effects beyond perturbation, more accurate than QTMC.","category":"page"},{"location":"stepbystep_tutorial/#Detector-Configuration","page":"Step-by-step Tutorial","title":"Detector Configuration","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"The simulation space and the final momentum grid (i.e., the electron detectors) are controlled by:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"dimension: Dimension of the simulation (2 or 3). 2D simulations would be carried out in the xy plane. For most cases, 2D simulation is sufficient as the electron dynamics is mainly confined in the polarization plane.\nfinal_p_max: Maximum momentum range in each direction. For 2D simulation, specify as a tuple of 2 values (px_max, py_max). For 3D simulation, use a tuple of 3 values (px_max, py_max, pz_max). Values are in atomic units. The momentum ranges from -p_max to p_max.\nfinal_p_num: Grid resolution in each direction. For 2D, specify as (nx, ny) where nx, ny are number of grid points. For 3D, specify as (nx, ny, nz). Higher resolution provides better details but requires more memory.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"Example usage for common scenarios:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"# a 2D example\nperform_traj_simulation(\n    # ...\n    dimension = 2,\n    final_p_max = (2.0, 2.0),     # ±2 a.u. in x,y\n    final_p_num = (500, 500),     # 500×500 grid\n    # ...\n)\n\n# a 3D example\nperform_traj_simulation(\n    # ...\n    dimension = 3,\n    final_p_max = (2.5, 2.5, 1.0),  # ±2.5 a.u. in x,y, ±1 a.u. in z\n    final_p_num = (250, 250, 100),  # 250×250×100 grid\n    # ...\n)\n\n# The following example performs an effective 2D simulation in x-z plane:\nperform_traj_simulation(\n    # ...\n    dimension = 3,\n    final_p_max = (2.5, 0.0, 2.5),\n    final_p_num = (400, 1, 400),\n    # ...\n)","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"tip: Tips\nA test run with reduced number of trajectories can help determine the optimal final_p_max.","category":"page"},{"location":"stepbystep_tutorial/#Sampling-Parameters","page":"Step-by-step Tutorial","title":"Sampling Parameters","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"Time domain:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"perform_traj_simulation(\n    sample_t_intv = (-10.0fs, 10.0fs),  # sampling interval (default in a.u.)\n    sample_t_num = 2000,                # number of samples in time domain\n    # ...\n)","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"Enabling Monte Carlo sampling (sample_monte_carlo=true) would generate random samples in the time domain.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"Momentum (kkt=(k_perpk_z)) domain:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"# Step sampling:\nperform_traj_simulation(\n    # ...\n    sample_monte_carlo = false,\n    ss_kd_max = 2.0,    # transverse momentum range\n    ss_kd_num = 200,    # number of kd points\n    ss_kz_max = 2.0,    # longitudinal momentum range (3D only)\n    ss_kz_num = 200,    # number of kz points (3D only)\n    # ...\n)\n\n# Monte Carlo sampling:\nperform_traj_simulation(\n    # ...\n    sample_monte_carlo = true,\n    mc_kt_num = 100,    # k_t samples per time point\n    mc_kd_max = 2.0,    # transverse momentum range\n    mc_kz_max = 2.0,    # longitudinal range (3D only)\n    # ...\n)","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"","category":"page"},{"location":"stepbystep_tutorial/#Viewing-and-Analyzing-the-Results","page":"Step-by-step Tutorial","title":"Viewing and Analyzing the Results","text":"","category":"section"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"After running the trajectory simulation, the output file will be generated in the Julia Data Format (JLD2) or HDF5 format. This file contains the photoelectron momentum distribution (PMD) and other necessary information.","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"To view and analyze the result, you can use the JLD2.jl package in Julia. Here is an example of how to open and inspect the output file:","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"julia> using JLD2\n\njulia> file = jldopen(\"ADK-CTMC_4e14_800nm_cos4_2cyc_CP.jld2\")\nJLDFile .../ADK-CTMC_4e14_800nm_cos4_2cyc_CP.jld2 (read-only)\n    ├─🔢 info\n    ├─🔢 params_text              # parameters stored in YAML format\n    ├─🔢 params                   # parameters stored in a Julia `Dict`\n    ├─🔢 px                       # coordinates of the `momentum_spec` on x-axis\n    ├─🔢 py                       # coordinates of the `momentum_spec` on y-axis\n    ├─🔢 momentum_spec            # PMD data stored in a Julia `Array`\n    ├─🔢 ion_prob                 # total ionization probability\n    ├─🔢 ion_prob_uncollected     # ionization probability of discarded electrons\n    └─🔢 num_effective_traj       # total number of effective trajectories\n\njulia> file[\"num_effective_traj\"]\n54240616\n\njulia> file[\"params_text\"] |> print  # equivalent to print(file[\"params_text\"])\ninit_cond_method: ADK\nlaser:\n  type: Cos4Laser\n  peak_int: 4.0e14\n  wave_len: 800.0\n  cyc_num: 2\n  ellip: 1.0\n  azi: 0.0\n  cep: 0.0\n  t_shift: 0.0\ntarget:\n  type: HydrogenLikeAtom\n  Ip: 0.5\n  nucl_charge: 1\n  l: 0\n  m: 0\n  asymp_coeff: 1.0\n  soft_core: 1.0e-10\n  name: \"H\"\nsample_t_intv: (-100, 100)\nsample_t_num: 20000\nsample_monte_carlo: false\nsample_cutoff_limit: 1.0e-16\ntraj_phase_method: CTMC\ntraj_rtol: 1.0e-6\ntraj_t_final: 120\noutput_fmt: jld2\noutput_path: \"ADK-CTMC_4e14_800nm_cos4_2cyc_CP.jld2\"\nfinal_p_max: (2.5, 2.5)\nfinal_p_num: (500, 500)\nss_kd_max: 2.0\nss_kd_num: 10000\nrate_prefix: Full","category":"page"},{"location":"stepbystep_tutorial/","page":"Step-by-step Tutorial","title":"Step-by-step Tutorial","text":"To make plots of the PMD in Julia, you can use the Plots.jl package. We included plot scripts in the example/ directory for reference. Note that running these scripts also requires additional dependencies such as CodecZlib.jl and PyPlot.jl. After installing these packages, you can run the plot scripts either in a Julia REPL or directly from the command line, see the \"Running Scripts\" section. If you encounter any issues with plotting, please open an issue in our GitHub repository.","category":"page"},{"location":"example4_WFAT-CTMC/#Example:-WFAT-CTMC-for-Molecules","page":"WFAT-CTMC for Molecules","title":"Example: WFAT-CTMC for Molecules","text":"","category":"section"},{"location":"example4_WFAT-CTMC/","page":"WFAT-CTMC for Molecules","title":"WFAT-CTMC for Molecules","text":"The WFAT provides a precise means of calculating the probability of tunneling ionization of molecules, especially for complex molecular targets. In this section we present an example of using the WFAT-CTMC simulation scheme for molecular targets.","category":"page"},{"location":"example4_WFAT-CTMC/","page":"WFAT-CTMC for Molecules","title":"WFAT-CTMC for Molecules","text":"# examples/test_Molecules.jl\n\nusing eTraj\nusing eTraj.Targets, eTraj.Lasers, eTraj.Units\n\nl = Cos2Laser(peak_int=4e14W/cm^2, wave_len=800.0nm, cyc_num=6, ellip=1.0)\nt = [get_mol(\"Hydrogen\"; rot_β=90°),\n     get_mol(\"Carbon Monoxide\"; rot_β=90°),\n     get_mol(\"Oxygen\"; rot_β=90°),\n     get_mol(\"Oxygen\"; rot_β=90°),\n     get_mol(\"Benzene\"; rot_β=90°),\n     get_mol(\"Benzene\"; rot_β=90°)]\norbit_ridx = [0, 0, (1,0), (1,-1), 0, -1]\npath = [\n    \"WFAT-CTMC_Hydrogen_HOMO_4e14_800nm_6cyc_CP.jld2\",\n    \"WFAT-CTMC_CarbonMonoxide_HOMO_4e14_800nm_6cyc_CP.jld2\",\n    \"WFAT-CTMC_Oxygen_α-HOMO_4e14_800nm_6cyc_CP.jld2\",\n    \"WFAT-CTMC_Oxygen_α-HOMO-1_4e14_800nm_6cyc_CP.jld2\",\n    \"WFAT-CTMC_Benzene_HOMO_4e14_800nm_6cyc_CP.jld2\",\n    \"WFAT-CTMC_Benzene_HOMO-1_4e14_800nm_6cyc_CP.jld2\"\n]\nfor i in eachindex(t)\n    perform_traj_simulation(\n        init_cond_method    = :WFAT,\n        traj_phase_method   = :CTMC,    # WFAT supports CTMC only\n        laser               = l,\n        target              = t[i],\n        mol_orbit_ridx      = orbit_ridx[i],\n        dimension           = 2,\n        sample_t_intv       = (-300,300),\n        sample_t_num        = 10000,\n        traj_t_final        = 350,\n        final_p_max         = (2.0,2.0),\n        final_p_num         = (500,500),\n        ss_kd_max           = 2.0,\n        ss_kd_num           = 5000,\n        output_path         = path[i]\n    )\nend","category":"page"},{"location":"example4_WFAT-CTMC/","page":"WFAT-CTMC for Molecules","title":"WFAT-CTMC for Molecules","text":"In this code, we set the molecules' orientation such that the z-axis in the MF is parallel to the x-axis in the LF, which can be realized by setting rot_β=90° (equivalent to a 90° counterclockwise rotation of the molecule around the y-axis). The laser is a circularly polarized 800-nm laser pulse, whose duration is set to 6 cycles to ensure the symmetry of the PMD for an isotropic atom, which facilitates the imaging of the molecules' orbitals through the PMD: a node or a dark curve would show up in the PMD if the laser's electric field vector crosses or scans inside a nodal plane of the orbital's wavefunction.","category":"page"},{"location":"example4_WFAT-CTMC/","page":"WFAT-CTMC for Molecules","title":"WFAT-CTMC for Molecules","text":"The PMDs obtained from different molecule's HOMO orbitals are shown below. The structures of the PMDs reflect the geometries of the orbitals, which are also mirrored in the orientation-dependent structure factors, which are also shown in the figure.","category":"page"},{"location":"example4_WFAT-CTMC/","page":"WFAT-CTMC for Molecules","title":"WFAT-CTMC for Molecules","text":"PMD Fig. (a) shows the PMD of the hydrogen molecule's HOMO orbital 1ssigma_rmg, which is mainly contributed by the in-phase combination of two 1s orbitals from the two hydrogen atoms. The overall shape of the orbital is similar to a sphere, which is consistent with the lowest order [nu=(n_xim)=(00)] squared structure factor absG_00^2 shown in the structure factor Fig. (a), and finally leads to the evenly-distributed ring-like shape of the PMD.","category":"page"},{"location":"example4_WFAT-CTMC/","page":"WFAT-CTMC for Molecules","title":"WFAT-CTMC for Molecules","text":"The carbon monoxide (CO) molecule is a heteronuclear diatomic molecule, whose HOMO orbital is named after 3sigma_rmg. The 3sigma_rmg orbital of CO molecule is different from a conventional sigma_rmg orbital of a homonuclear molecule in that the electron density is concentrated more on the carbon atom [see the structure factor Fig. (b)], which results in a dramatic increase in the squared structure factor and ionization probability when the negative electric field points towards the carbon atom. Such a localized peak in the ring structure is observed in the PMD of CO molecule in PMD Fig. (b).","category":"page"},{"location":"example4_WFAT-CTMC/","page":"WFAT-CTMC for Molecules","title":"WFAT-CTMC for Molecules","text":"The HOMOs of the oxygen (rmO_2) and benzene (rmC_6H_6) molecules (in MF) are shown in the structure factor Figs. (c) and (d), which are degenerate orbitals of pi symmetry. The oxygen's \"α-HOMO\" (one of 2ppi_rmu) and the benzene's \"HOMO\" (2ppi_3), after the given rotation (rot_β=90°), have x-z and y-z as their nodal planes, hence the rotating electric field in the x-y plane \"sees\" a four-lobe structure, which is revealed in the PMDs in Figs. (c1) and (d1). Whereas the oxygen's \"α-HOMO-1\" (another one of 2ppi_rmu) and the benzene's \"HOMO-1\" (2ppi_2), each have a nodal plane on the x-y plane, which indicates that in the zeroth order (m=0), the outgoing electron waves that are contributed by the \"+\" parts and the \"-\" parts of the orbital cancel out each other, leading to a net-zero ionization probability. For non-zero-m channels we have mathcalW_nu(Fkt=0)equiv 0 [see Eq. (57) in WFAT], hence a nodal ring which corresponds to zero initial momenta kt=0 would appear in the PMDs of Figs. (c2) and (d2). Under such circumstance, the ionization gets suppressed, and the first-order channels (m=pm 1) would take dominance in the contribution of ionization probability.","category":"page"},{"location":"example4_WFAT-CTMC/","page":"WFAT-CTMC for Molecules","title":"WFAT-CTMC for Molecules","text":"(Image: fig:example_Molecules) (Image: fig:example_Molecules_G)","category":"page"},{"location":"manual2_targets/#targets_doc","page":"The Targets Module","title":"Manual: The Targets Module","text":"","category":"section"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"The Targets module implements the abstraction of targets and provides parameters of some commonly-used targets.","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"Targets\nTarget","category":"page"},{"location":"manual2_targets/#eTraj.Targets","page":"The Targets Module","title":"eTraj.Targets","text":"module Targets\n\nThe Targets module contains abstraction of the targets and provides some pre-defined atoms or molecules.\n\n\n\n\n\n","category":"module"},{"location":"manual2_targets/#eTraj.Targets.Target","page":"The Targets Module","title":"eTraj.Targets.Target","text":"abstract type Target\n\nRepresents an abstract target, supertype of all targets.\n\n\n\n\n\n","category":"type"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"Pages = [\"manual2_targets.md\"]\nDepth = 3","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"","category":"page"},{"location":"manual2_targets/#Atoms-under-SAE-approximation","page":"The Targets Module","title":"Atoms under SAE approximation","text":"","category":"section"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"The HydrogenLikeAtom and SAEAtom are both subtypes of the SAEAtomBase base type, which represents an atom under the SAE approximation. A key ingredient of atomic objects lies in the potential function of the residual ion after the electron gets ionized, which is the only difference between the two types.","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"The HydrogenLikeAtom's potential function is of the form:","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"beginequation\n    V(r) = -fracZsqrtr^2+a\nendequation","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"with a the soft-core parameter which avoids singularity of the potential during numerical simulation.","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"The SAEAtom's potential function is adopted from Tong's model [Tong_2005]:","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"beginequation\n    V(r) = -fracZ+a_1ee^-b_1 r+a_2 ree^-b_2 r+a_3ee^-b_3 rsqrtr^2+a\nendequation","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"where a_i and b_i are tunable parameters to fit the effective potential felt by the electron.","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"[Tong_2005]: X. M. Tong and C. D. Lin, Empirical formula for static field ionization rates of atoms and molecules by lasers in the barrier-suppression regime, J. Phys. B: At. Mol. Opt. Phys. 38, 2593 (2005). DOI: 10.1088/0953-4075/38/15/001","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"SAEAtomBase\nHydrogenLikeAtom\nHydrogenLikeAtom()\nSAEAtom\nSAEAtom()","category":"page"},{"location":"manual2_targets/#eTraj.Targets.SAEAtomBase","page":"The Targets Module","title":"eTraj.Targets.SAEAtomBase","text":"abstract type SAEAtomBase <: Target\n\nRepresents an abstract atom under single-active-electron approximation.\n\n\n\n\n\n","category":"type"},{"location":"manual2_targets/#eTraj.Targets.HydrogenLikeAtom","page":"The Targets Module","title":"eTraj.Targets.HydrogenLikeAtom","text":"struct HydrogenLikeAtom <: SAEAtomBase <: Target\n\nRepresents a Hydrogen-like atom.\n\n\n\n\n\n","category":"type"},{"location":"manual2_targets/#eTraj.Targets.HydrogenLikeAtom-Tuple{}","page":"The Targets Module","title":"eTraj.Targets.HydrogenLikeAtom","text":"HydrogenLikeAtom(Ip, Z [,l=0] [,m=0] [,asymp_coeff=:hartree|<coeff>] [,quan_ax_θ=0.0] [,quan_ax_ϕ=0.0] [,soft_core=1e-10] [,name]) <: SAEAtomBase\n\nInitializes a new HydrogenLikeAtom.\n\nParameters\n\nIp  : Ionization potential of the atom (numerically in a.u. or a Unitful.Quantity).\nZ   : Nuclear charge number.\nl=0 : Angular quantum number (optional, default 0).\nm=0 : Magnetic quantum number (optional, default 0).\nasymp_coeff=:hartree : Asymptotic coefficient related to the wavefunction's behavior when r→∞ (:hartree or a positive number). Passing :hartree (by default) indicates automatic calculation using the Hartree formula.\nquan_ax_θ=0.0   : Orientation angle θ of the quantization axis relative to the lab frame (numerically in radian or a Unitful.Quantity) (optional, default 0.0).\nquan_ax_ϕ=0.0   : Orientation angle ϕ of the quantization axis relative to the lab frame (numerically in radian or a Unitful.Quantity) (optional, default 0.0).\nsoft_core=1e-10 : Soft core parameter of the Coulomb potential (optional, default 1e-10).\nname::String    : Name of the atom.\n\nExamples\n\njulia> t = HydrogenLikeAtom(Ip=0.5, Z=1, name=\"H\")\n[HydrogenLikeAtom] Atom H, Ip=0.5000 (13.61 eV), Z=1\n\njulia> using eTraj.Units\n\njulia> t = HydrogenLikeAtom(Ip=3.4eV, Z=1, l=1, name=\"H\")\n[HydrogenLikeAtom] Atom H (p orbital, m=0), Ip=0.1249 (3.40 eV), Z=1\n\nSee Also\n\nThe get_atom method provides some atom presets for use.\n\n\n\n\n\n","category":"method"},{"location":"manual2_targets/#eTraj.Targets.SAEAtom","page":"The Targets Module","title":"eTraj.Targets.SAEAtom","text":"struct SAEAtom <: SAEAtomBase <: Targets\n\nRepresents an atom under single-active-electron (SAE) approximation.\n\n\n\n\n\n","category":"type"},{"location":"manual2_targets/#eTraj.Targets.SAEAtom-Tuple{}","page":"The Targets Module","title":"eTraj.Targets.SAEAtom","text":"SAEAtom(Ip, Z [,l=0] [,m=0] [,asymp_coeff=:hartree|<coeff>] [,quan_ax_θ=0.0] [,quan_ax_ϕ=0.0] [,a1,b1,a2,b2,a3,b3] [,soft_core=1e-10] [,name]) <: SAEAtomBase\n\nInitializes a new SAEAtom.\n\nParameters\n\nIp  : Ionization potential of the atom (numerically in a.u. or a Unitful.Quantity).\nZ   : Nuclear charge number.\nl=0 : Angular quantum number (optional, default 0).\nm=0 : Magnetic quantum number (optional, default 0).\nasymp_coeff=:hartree: Asymptotic coefficient related to the wavefunction's behavior when r→∞ (:hartree or a positive number). Passing :hartree (by default) indicates automatic calculation using the Hartree formula.\nquan_ax_θ=0.0       : Orientation angle θ of the quantization axis relative to the lab frame (numerically in radian or a Unitful.Quantity) (optional, default 0.0).\nquan_ax_ϕ=0.0       : Orientation angle ϕ of the quantization axis relative to the lab frame (numerically in radian or a Unitful.Quantity) (optional, default 0.0).\na1,b1,a2,b2,a3,b3   : Parameters used to fit the atomic potential. See [J. Phys. B 38, 2593 (2005)]\nsoft_core=1e-10     : Soft core parameter to avoid singularity in the potential (optional, default 1e-10).\nname::String        : Name of the atom.\n\nExamples\n\njulia> t = SAEAtom(Ip=0.9035, Z=1, asymp_coeff=:hartree, a1=1.230723, b1=0.6620055, a2=-1.325040, b2=1.236224, a3=-0.2307230, b3=0.4804286, name=\"He\")\n[SAEAtom] Atom He, Ip=0.9035 (24.59 eV), Z=1\n\njulia> using eTraj.Units\n\njulia> t = SAEAtom(Ip=12.13eV, Z=1, l=1, a1=51.35554, b1=2.111554, a2=-99.92747, b2=3.737221, a3=1.644457, b3=0.4306465, asymp_coeff=1.3, name=\"Xe\")\n[SAEAtom] Atom Xe (p orbital, m=0), Ip=0.4458 (12.13 eV), Z=1\n\nSee Also\n\nThe get_atom method provides some atom presets for use.\n\n\n\n\n\n","category":"method"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"For the convenience of the user, there are some presets of commonly-used atoms, which can be accessed through the get_atom method. Available keys are accessed by invoking get_available_atoms.","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"HydrogenLikeAtom : H, He⁺, Li²⁺\nSAEAtom :          He, Ne, Ne⁺, Ne²⁺, Ar, Ar⁺, Ar²⁺, V, Ni, Kr, Kr⁺, Rb, Nb, Pd, Xe, Xe⁺, Ta","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"get_atom\nget_available_atoms","category":"page"},{"location":"manual2_targets/#eTraj.Targets.get_atom","page":"The Targets Module","title":"eTraj.Targets.get_atom","text":"get_atom(name::String, charge::Integer=0; kwargs...)\n\nConstructs a HydrogenLikeAtom or SAEAtom in the database based on the name and charge given, other initialization parameters can be passed via kwargs. For HydrogenLikeAtom, the init params include Ip,Z and name; for SAEAtom, the init params include Ip,Z,a1,b1,a2,b2,a3,b3,l and name. The available keys can be found by invoking get_available_atoms.\n\nExamples\n\njulia> get_atom(\"H\")\n[HydrogenLikeAtom] Atom H, Ip=0.5000 (13.61 eV), Z=1\n\njulia> get_atom(\"He\")\n[SAEAtom] Atom He, Ip=0.9036 (24.59 eV), Z=1\n\njulia> get_atom(\"Ar\"; m=1, asymp_coeff=0.950) # asymp_coeff from [Phys.-Uspekhi 47, 855 (2004)] (l=0 case)\n[SAEAtom] Atom Ar (p orbital, m=1), Ip=0.5792 (15.76 eV), Z=1\n\njulia> get_atom(\"Xe\", 1)\n[SAEAtom] Atom Xe⁺ (p orbital, m=0), Ip=0.7708 (20.97 eV), Z=2\n\njulia> get_atom(\"Xe\", 2)\nERROR: [get_atom] Atom name key `Xe2p` not found in database.\n[...]\n\n\nSee also get_available_atoms, HydrogenLikeAtom and SAEAtom.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.get_available_atoms","page":"The Targets Module","title":"eTraj.Targets.get_available_atoms","text":"Gets the available atom keys in the atom database, which are used to access atom objects using get_atom.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"","category":"page"},{"location":"manual2_targets/#Molecules","page":"The Targets Module","title":"Molecules","text":"","category":"section"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"For molecule targets, the GenericMolecule type is implemented based on the MoleculeBase supertype, whose structure is more complicated. A GenericMolecule stores information about the atoms that make up the molecule, together with their coordinates, as well as the asymptotic coefficients [C_lm in Eq. (38) in Molecular SFA] and WFAT's integral coefficients [Eq. (56) in WFAT], which are obtained using other quantum chemistry packages.","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"There are two ways to initialize a GenericMolecule: build from zero (GenericMolecule()) or from an existing file (LoadMolecule).","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"MoleculeBase\nGenericMolecule\nGenericMolecule()\nLoadMolecule","category":"page"},{"location":"manual2_targets/#eTraj.Targets.MoleculeBase","page":"The Targets Module","title":"eTraj.Targets.MoleculeBase","text":"abstract type MoleculeBase <: Target\n\nRepresents an abstract molecule.\n\n\n\n\n\n","category":"type"},{"location":"manual2_targets/#eTraj.Targets.GenericMolecule","page":"The Targets Module","title":"eTraj.Targets.GenericMolecule","text":"struct GenericMolecule <: MoleculeBase <: Target\n\nRepresents a generic molecule.\n\n\n\n\n\n","category":"type"},{"location":"manual2_targets/#eTraj.Targets.GenericMolecule-Tuple{}","page":"The Targets Module","title":"eTraj.Targets.GenericMolecule","text":"GenericMolecule(atoms, atom_coords [,charge=0] [,spin=0] [,name] [,rot_α=0.0] [,rot_β=0.0] [,rot_γ=0.0])\n\nInitializes a new GenericMolecule with given parameters.\n\nParameters\n\natoms       : Atoms in the molecule, stored as a Vector of String.\natom_coords : Atoms' coordinates in the molecule (numerically in Å or a Unitful.Quantity), stored as a N×3 Matrix.\ncharge      : Total charge of the molecule (ion) (optional, default 0).\nspin        : Total spin of the molecule (optional, default 0). Note that each unpaired electron contributes 1/2.\nname        : Name of the molecule (optional).\nrot_α,rot_β,rot_γ   : Euler angles (z-y'-z'' convention) specifying the molecule's orientation (numerically in radian or a Unitful.Quantity) (optional, default 0).\n\nExample\n\njulia> m = GenericMolecule(atoms=[\"H\",\"H\"], atom_coords=[0.0 0.0 -0.375; 0.0 0.0 0.375], name=\"Hydrogen\")\n[GenericMolecule] Hydrogen\n\njulia> using eTraj.Units\n\njulia> m = GenericMolecule(atoms=[\"H\",\"H\"], atom_coords=[0.0 0.0 -0.375; 0.0 0.0 0.375]*Å, name=\"Hydrogen\", rot_β=90°)\n[GenericMolecule] Hydrogen, αβγ=(0.0°,90.0°,0.0°)\n\n\n\n\n\n","category":"method"},{"location":"manual2_targets/#eTraj.Targets.LoadMolecule","page":"The Targets Module","title":"eTraj.Targets.LoadMolecule","text":"LoadMolecule(ext_data_path; [rot_α=0.0] [,rot_β=0.0] [,rot_γ=0.0])\n\nInitializes a new GenericMolecule with the data stored in ext_data_path.\n\nParameters\n\next_data_path           : Path to the molecule's data stored externally.\nrot_α,rot_β,rot_γ   : Euler angles (z-y'-z'' convention) specifying the molecule's orientation (numerically in radian or a Unitful.Quantity) (optional, default 0).\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"We also provide some pre-defined molecules, which can be accessed through the get_mol method.","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"get_mol\nget_available_mols","category":"page"},{"location":"manual2_targets/#eTraj.Targets.get_mol","page":"The Targets Module","title":"eTraj.Targets.get_mol","text":"get_mol(name::String; [rot_α=0.0] [,rot_β=0.0] [,rot_γ=0.0])\n\nConstructs a GenericMolecule in the database based on the name given. Euler angles which describe the molecule's rotation can be applied via the keyword arguments rot_α, rot_β and rot_γ. The available molecule names can be found by invoking get_available_mols.\n\nExamples\n\n\njulia> get_mol(\"Hydrogen\")\n[GenericMolecule] Hydrogen (H₂)\nAsymp coeff of HOMO available\nWFAT data of HOMO available\n#          E (Ha)  occp\n⋮  ⋮         ⋮      ⋮⋮\n3  LUMO+1   0.232  ----\n2  LUMO     0.148  ----\n1  HOMO    -0.594  -↿⇂-\n\njulia> get_mol(\"Oxygen\"; rot_β=π)\n[GenericMolecule] Oxygen (O₂), αβγ=(0.0°,180.0°,0.0°)\nAsymp coeff of α-HOMO-1 & α-HOMO available\nWFAT data of α-HOMO-1 & α-HOMO available\n#          Eα(Ha)  occp  Eβ(Ha)\n⋮    ⋮        ⋮     ⋮⋮      ⋮     ⋮\n11 LUMO+1   0.681  ----   0.741 LUMO+3\n10 LUMO     0.377  ----   0.431 LUMO+2\n9  HOMO    -0.554  -↿--   0.110 LUMO+1\n8  HOMO-1  -0.554  -↿--   0.110 LUMO\n7  HOMO-2  -0.763  -↿⇂-  -0.575 HOMO\n6  HOMO-3  -0.841  -↿⇂-  -0.575 HOMO-1\n5  HOMO-4  -0.841  -↿⇂-  -0.702 HOMO-2\n4  HOMO-5  -1.204  -↿⇂-  -0.993 HOMO-3\n⋮    ⋮        ⋮     ⋮⋮      ⋮     ⋮\n\nSee also get_available_mols and GenericMolecule.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.get_available_mols","page":"The Targets Module","title":"eTraj.Targets.get_available_mols","text":"Gets the available molecule keys in the molecule database, which are used to access molecule objects using get_mol.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#Molecule's-Orientation","page":"The Targets Module","title":"Molecule's Orientation","text":"","category":"section"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"The molecule's orientation is described by a set of Euler angles (z-y-z convention), which defines a rotational transformation from the molecular frame (MF) to the lab frame (LF). This property is NOT included in the saved file and thus needs to be specified each time upon initialization of the GenericMolecule object from external files.","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"note: Note\nHere the three Euler angles (α,β,γ) that describe the GenericMolecule's orientation are completely different from that of the Euler angles (θ,χ) in the WFAT and MO-SFA theory. These theories' \"lab frame\" is chosen for convenience of theoretical formulation, where the electric field is assumed to be static, pointing towards the +z direction, and has no relation with the lab frame mentioned above.","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"The orientation of the molecule can be obtained and set via the MolRotation and SetMolRotation! methods.","category":"page"},{"location":"manual2_targets/#Quantum-Chemistry-Calculation","page":"The Targets Module","title":"Quantum Chemistry Calculation","text":"","category":"section"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"As for the quantum chemistry calculation, we implemented the scheme in PySCFMolecularCalculator using the PySCF, which works on Linux and macOS platforms (as a remedy, Windows users can use the Windows Subsystem of Linux (WSL)). The calculation scheme of WFAT structure factor is adopted from PyStructureFactor. Future extension is possible by implementing the supertype MolecularCalculatorBase. Since there are some presets of molecules available via get_mol, we are not going to detail on the manual of running the calculation in the text.","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"The example of initializing and calculating the essential data of GenericMolecule in REPL is presented as follows:","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"julia> using eTraj.Targets, eTraj.Units\n\njulia> mol = GenericMolecule(atoms=[\"O\",\"C\",\"O\"], atom_coords=[0 0 -1.1600; 0 0 0; 0 0 1.1600]*Å, charge=0, name=\"Carbon Dioxide (CO₂)\")\n[GenericMolecule] Carbon Dioxide (CO₂)\n\njulia> MolInitCalculator!(mol, basis=\"cc-pVTZ\")\n[ Info: [PySCFMolecularCalculator] Running molecular calculation...\n\njulia> MolCalcAsympCoeff!(mol, 0); MolCalcAsympCoeff!(mol, -1)\n[ Info: [PySCFMolecularCalculator] Running calculation of asymptotic coefficients... (ionizing orbital HOMO)\n[ Info: [PySCFMolecularCalculator] Running calculation of asymptotic coefficients... (ionizing orbital HOMO-1)\n\njulia> MolCalcWFATData!(mol, 0); MolCalcWFATData!(mol, -1)\n[ Info: [PySCFMolecularCalculator] Running calculation of WFAT structure factor data... (ionizing orbital HOMO)\n[ Info: [PySCFMolecularCalculator] Running calculation of WFAT structure factor data... (ionizing orbital HOMO-1)\n\njulia> MolSaveDataAs!(mol, \"Molecule_CO2.jld2\")\n[ Info: [GenericMolecule] Data saved for molecule Carbon Dioxide (CO₂) at `Molecule_CO2.jld2`.\n\njulia> mol_ = LoadMolecule(\"Molecule_CO2.jld2\")  # load from saved file\n[GenericMolecule] Carbon Dioxide (CO₂)\nAsymp coeff of HOMO-1 & HOMO available\nWFAT data of HOMO-1 & HOMO available\n#          E (Ha)  occp\n⋮    ⋮       ⋮      ⋮⋮\n13 LUMO+1   0.207  ----\n12 LUMO     0.175  ----\n11 HOMO    -0.542  -↿⇂-\n10 HOMO-1  -0.542  -↿⇂-\n9  HOMO-2  -0.714  -↿⇂-\n8  HOMO-3  -0.714  -↿⇂-\n⋮    ⋮       ⋮      ⋮⋮","category":"page"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"","category":"page"},{"location":"manual2_targets/#List-of-Available-Properties-and-Methods","page":"The Targets Module","title":"List of Available Properties & Methods","text":"","category":"section"},{"location":"manual2_targets/#Generic-Target","page":"The Targets Module","title":"Generic Target","text":"","category":"section"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"IonPotential\nAsympNuclCharge\nTargetName\nTargetPotential\nTargetForce\nTrajectoryFunction","category":"page"},{"location":"manual2_targets/#eTraj.Targets.IonPotential","page":"The Targets Module","title":"eTraj.Targets.IonPotential","text":"IonPotential(t::SAEAtomBase)\n\nGets the ionization potential of the atom.\n\nIonPotential(mol::GenericMolecule)\n\nGets the ionization potential of the molecule's HOMO.\n\nIonPotential(mol::GenericMolecule, orbit_ridx)\n\nGets the ionization potential of the specified MO of molecule.\n\norbit_ridx: Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1).               For open-shell molecules, according to α/β spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.AsympNuclCharge","page":"The Targets Module","title":"eTraj.Targets.AsympNuclCharge","text":"AsympNuclCharge(t::Target)\n\nGets the asymptotic nuclear charge of the target (after an electron got ionized).\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.TargetName","page":"The Targets Module","title":"eTraj.Targets.TargetName","text":"TargetName(t::Target)\n\nGets the name of the target.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.TargetPotential","page":"The Targets Module","title":"eTraj.Targets.TargetPotential","text":"TargetPotential(t::SAEAtomBase) -> V(x,y,z)\n\nGets the potential function of the atom.\n\nTargetPotential(mol::GenericMolecule) -> V(x,y,z)\n\nGets the asymptotic Coulomb potential function of the molecule.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.TargetForce","page":"The Targets Module","title":"eTraj.Targets.TargetForce","text":"TargetForce(t::SAEAtomBase) -> F(x,y,z) -> (Fx,Fy,Fz)\n\nGets the Coulomb force exerted on the electron from the atom.\n\nTargetForce(mol::GenericMolecule) -> F(x,y,z) -> (Fx,Fy,Fz)\n\nGets the asymptotic Coulomb force exerted on the electron from the molecular ion.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.TrajectoryFunction","page":"The Targets Module","title":"eTraj.Targets.TrajectoryFunction","text":"TrajectoryFunction(t::Target, dimension = 2|3, laserFx::Function, laserFy::Function, phase_method = :CTMC|:QTMC|:SCTS)\n\nGets the trajectory function of the electron according to given parameter.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"","category":"page"},{"location":"manual2_targets/#SAEAtomBase","page":"The Targets Module","title":"SAEAtomBase","text":"","category":"section"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"AngularQuantumNumber\nMagneticQuantumNumber\nAsympCoeff\nSoftCore\nQuantizationAxisOrientaion","category":"page"},{"location":"manual2_targets/#eTraj.Targets.AngularQuantumNumber","page":"The Targets Module","title":"eTraj.Targets.AngularQuantumNumber","text":"AngularQuantumNumber(t::SAEAtomBase)\n\nGets the angular quantum number (l) of the atom.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MagneticQuantumNumber","page":"The Targets Module","title":"eTraj.Targets.MagneticQuantumNumber","text":"MagneticQuantumNumber(t::SAEAtomBase)\n\nGets the magnetic quantum number (m) of the atom.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.AsympCoeff","page":"The Targets Module","title":"eTraj.Targets.AsympCoeff","text":"AsympCoeff(t::SAEAtomBase)\n\nGets the asymptotic coefficient (C_κl) of the atom.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.SoftCore","page":"The Targets Module","title":"eTraj.Targets.SoftCore","text":"SoftCore(t::SAEAtomBase)\n\nGets the soft core parameter of the atom.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.QuantizationAxisOrientaion","page":"The Targets Module","title":"eTraj.Targets.QuantizationAxisOrientaion","text":"QuantizationAxisOrientaion(t::SAEAtomBase)\n\nGets the orientation of the quantization axis of the atom in spherical coordinates (θ,ϕ).\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"","category":"page"},{"location":"manual2_targets/#GenericMolecule","page":"The Targets Module","title":"GenericMolecule","text":"","category":"section"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"MolAtoms\nMolAtomCoords\nMolCharge\nMolSpin\nMolEnergyDataAvailable\nMolEnergyLevels\nMolEnergyLevel\nMolOrbitalOccupation\nMolHOMOEnergy\nMolWFATAvailableIndices\nMolWFATData\nMolWFATStructureFactor_G\nMolWFATMaxChannels\nMolAsympCoeffAvailableIndices\nMolAsympCoeff\nMolAsympCoeff_lMax\nMolRotation\nSetMolRotation!\nMolExportAtomInfo\nMolInitCalculator!\nMolCalcWFATData!\nMolCalcAsympCoeff!\nMolSaveDataAs!","category":"page"},{"location":"manual2_targets/#eTraj.Targets.MolAtoms","page":"The Targets Module","title":"eTraj.Targets.MolAtoms","text":"MolAtoms(mol::GenericMolecule) -> [\"atom1\",\"atom2\",...]\n\nGets the atoms in the molecule with their coordinates.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolAtomCoords","page":"The Targets Module","title":"eTraj.Targets.MolAtomCoords","text":"MolAtomCoords(mol::GenericMolecule) -> [x1 y1 z1; x2 y2 z2; ...]\n\nGets the atoms' coordinates in the molecule.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolCharge","page":"The Targets Module","title":"eTraj.Targets.MolCharge","text":"MolCharge(mol::GenericMolecule)\n\nGets the total charge of the molecule.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolSpin","page":"The Targets Module","title":"eTraj.Targets.MolSpin","text":"MolSpin(mol::GenericMolecule)\n\nGets the total spin of the molecule. Each unpaired electron contributes 1/2.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolEnergyDataAvailable","page":"The Targets Module","title":"eTraj.Targets.MolEnergyDataAvailable","text":"MolEnergyDataAvailable(mol::GenericMolecule)\n\nGets the availability of the energy data of the molecule.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolEnergyLevels","page":"The Targets Module","title":"eTraj.Targets.MolEnergyLevels","text":"MolEnergyLevels(mol::GenericMolecule [,spin=1|2])\n\nGets the energy levels of the molecule's MOs.\n\nspin: For closed-shell molecules, the spin param should be neglected.         For open-shell molecules (with non-zero spins), spin=1 indicates α orbitals and spin=2 indicates β orbitals, neglecting spin would return both two sets of orbitals.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolEnergyLevel","page":"The Targets Module","title":"eTraj.Targets.MolEnergyLevel","text":"MolEnergyLevel(mol::GenericMolecule, orbit_ridx)\n\nGets the energy level of the molecule's selected MO.\n\norbit_ridx: Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1).               For open-shell molecules, according to α/β spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolOrbitalOccupation","page":"The Targets Module","title":"eTraj.Targets.MolOrbitalOccupation","text":"MolOrbitalOccupation(mol::GenericMolecule [,spin=1|2])\n\nGets the occupation of the molecule's MOs.\n\nspin: For closed-shell molecules, the spin param should be neglected.         For open-shell molecules (with non-zero spins), spin=1 indicates α orbitals and spin=2 indicates β orbitals, neglecting spin would return both two sets of orbitals.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolHOMOEnergy","page":"The Targets Module","title":"eTraj.Targets.MolHOMOEnergy","text":"MolHOMOEnergy(mol::GenericMolecule [,spin=1|2])\n\nGets the energy of the molecule's HOMO.\n\nspin: For closed-shell molecules, the spin param should be neglected.         For open-shell molecules (with non-zero spins), spin=1 indicates α orbitals and spin=2 indicates β orbitals, neglecting spin would give both.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolWFATAvailableIndices","page":"The Targets Module","title":"eTraj.Targets.MolWFATAvailableIndices","text":"MolWFATAvailableIndices(mol::GenericMolecule)\n\nGets the available orbital indices (relative to HOMO) of the molecule's WFAT data.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolWFATData","page":"The Targets Module","title":"eTraj.Targets.MolWFATData","text":"MolWFATData(mol::GenericMolecule, orbit_ridx)\n\nGets the WFAT data in format (μ, int_data).\n\norbit_ridx: Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1).               For open-shell molecules, according to α/β spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolWFATStructureFactor_G","page":"The Targets Module","title":"eTraj.Targets.MolWFATStructureFactor_G","text":"MolWFATStructureFactor_G(mol::GenericMolecule, orbit_ridx, nξ, m, θ, χ)\n\nGets the WFAT structure factor G_n_ξ m according to the given Euler angles θ and χ (z-y'-z'' convention). Note: the rotational Euler angles of the molecule would not be applied.\n\nParameters\n\norbit_ridx: Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1).               For open-shell molecules, according to α/θ spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\nnξ  : Parabolic quantum number nξ=0,1,2,⋯ (nξ up to 5 is calculated by default).\nm   : Parabolic quantum number m=⋯,-1,0,1,⋯ (|m| up to 5 is calculated by default).\nθ   : Euler angle θ, passed as a Real value or an AbstractVector of Real.\nχ   : Euler angle χ, passed as a Real value or an AbstractVector of Real.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolWFATMaxChannels","page":"The Targets Module","title":"eTraj.Targets.MolWFATMaxChannels","text":"MolWFATMaxChannels(mol::GenericMolecule, orbit_ridx)\n\nGets the maximum value of nξ and |m| calculated in the WFAT integral data.\n\norbit_ridx: Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1).               For open-shell molecules, according to α/β spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolAsympCoeffAvailableIndices","page":"The Targets Module","title":"eTraj.Targets.MolAsympCoeffAvailableIndices","text":"MolAsympCoeffAvailableIndices(mol::GenericMolecule)\n\nGets the available orbital indices (relative to HOMO) of the molecule's asymptotic coefficients.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolAsympCoeff","page":"The Targets Module","title":"eTraj.Targets.MolAsympCoeff","text":"MolAsympCoeff(mol::GenericMolecule, orbit_ridx)\n\nGets the asymptotic coefficients of the molecule.\n\norbit_ridx: Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1).               For open-shell molecules, according to α/β spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolAsympCoeff_lMax","page":"The Targets Module","title":"eTraj.Targets.MolAsympCoeff_lMax","text":"MolAsympCoeff_lMax(mol::GenericMolecule, orbit_ridx)\n\nGets the maximum value of l calculated in the asymptotic coefficients.\n\norbit_ridx: Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1).               For open-shell molecules, according to α/β spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolRotation","page":"The Targets Module","title":"eTraj.Targets.MolRotation","text":"MolRotation(mol::GenericMolecule) -> (α,β,γ)\n\nGets the Euler angles (z-y'-z'' convention) specifying the molecule's orientation in format (α,β,γ) (in radian).\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.SetMolRotation!","page":"The Targets Module","title":"eTraj.Targets.SetMolRotation!","text":"SetMolRotation!(mol::GenericMolecule, α,β,γ)\nSetMolRotation!(mol::GenericMolecule, (α,β,γ))\n\nSets the Euler angles (z-y'-z'' convention) specifying the molecule's orientation in format (α,β,γ) (numerically in radian or a Unitful.Quantity).\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolExportAtomInfo","page":"The Targets Module","title":"eTraj.Targets.MolExportAtomInfo","text":"MolExportAtomInfo(mol::GenericMolecule)\n\nExports the given molecule's atom information to string as MolecularCalculator's input.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolInitCalculator!","page":"The Targets Module","title":"eTraj.Targets.MolInitCalculator!","text":"MolInitCalculator!(mol::GenericMolecule, MCType::Type=PySCFMolecularCalculator [;kwargs...])\n\nInitializes the MolecularCalculator of mol with given parameters.\n\nMCType      : Type of MolecularCalculator if it is not initialized (default is PySCFMolecularCalculator).\nkwargs...   : Keyword arguments to pass to the initializer of MolecularCalculator of MCType, e.g., basis, ...\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolCalcWFATData!","page":"The Targets Module","title":"eTraj.Targets.MolCalcWFATData!","text":"MolCalcWFATData!(mol::GenericMolecule, orbit_ridx [;kwargs...])\n\nCalculates the WFAT data of the molecule.\n\norbit_ridx : Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1).                For open-shell molecules, according to α/β spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\nkwargs... : Keyword arguments to pass to the calc_WFAT_data method, e.g. grid_rNum, grid_rMax, sf_lMax, ⋯\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolCalcAsympCoeff!","page":"The Targets Module","title":"eTraj.Targets.MolCalcAsympCoeff!","text":"MolCalcAsympCoeff!(mol::GenericMolecule, orbit_ridx [;kwargs...])\n\nCalculates the asymptotic coefficients of the molecule.\n\norbit_ridx : Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1).                For open-shell molecules, according to α/β spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\nkwargs... : Keyword arguments to pass to the calc_asymp_coeff, e.g. grid_rNum, l_max.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.MolSaveDataAs!","page":"The Targets Module","title":"eTraj.Targets.MolSaveDataAs!","text":"MolSaveDataAs!(mol::GenericMolecule, data_path [,overwrite=false])\n\nSaves the data of the GenericMolecule to the data_path. To overwrite the existing file, set overwrite=true.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"","category":"page"},{"location":"manual2_targets/#MolecularCalculators","page":"The Targets Module","title":"MolecularCalculators","text":"","category":"section"},{"location":"manual2_targets/","page":"The Targets Module","title":"The Targets Module","text":"MolecularCalculatorBase\nPySCFMolecularCalculator\nPySCFMolecularCalculator()\nTargets.calc_WFAT_data\nTargets.calc_asymp_coeff","category":"page"},{"location":"manual2_targets/#eTraj.Targets.MolecularCalculatorBase","page":"The Targets Module","title":"eTraj.Targets.MolecularCalculatorBase","text":"abstract type MolecularCalculatorBase\n\nSupertype of all molecular calculators.\n\n\n\n\n\n","category":"type"},{"location":"manual2_targets/#eTraj.Targets.PySCFMolecularCalculator","page":"The Targets Module","title":"eTraj.Targets.PySCFMolecularCalculator","text":"struct PySCFMolecularCalculator <: MolecularCalculatorBase\n\nAn interface of molecular calculation using PySCF.\n\n\n\n\n\n","category":"type"},{"location":"manual2_targets/#eTraj.Targets.PySCFMolecularCalculator-Tuple{}","page":"The Targets Module","title":"eTraj.Targets.PySCFMolecularCalculator","text":"PySCFMolecularCalculator(; mol::MoleculeBase, basis::String=\"cc-pVDZ\", kwargs...)\n\nInitializes an instance of PySCFMolecularCalculator with given parameter.\n\nParameters\n\nmol::MoleculeBase : The molecule to be calculated.\nbasis=\"cc-pVDZ\" : Basis set used for calculation (default \"cc-pVDZ\").\n\n\n\n\n\n","category":"method"},{"location":"manual2_targets/#eTraj.Targets.calc_WFAT_data","page":"The Targets Module","title":"eTraj.Targets.calc_WFAT_data","text":"Calculates the data used in WFAT structure factor calculation of the given molecule.\n\nReturns\n\n(μ, int_data) : Orbital dipole momentum and the array which stores the integrals.\n\nParameters\n\nmc          : The molecular calculator.\norbit_ridx  : Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1).                 For open-shell molecules, according to α/β spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\ngrid_rNum   : The number of radial grid (default 200).\ngrid_rMax   : The maximum radius of the radial grid (default 10.0).\ngrid_θNum   : The number of angular grid in the θ direction (default 60).\ngrid_ϕNum   : The number of angular grid in the ϕ direction (default 60).\nsf_nξMax    : The maximum number of nξ used in calculation (default 3).\nsf_mMax     : The maximum number of |m| used in calculation (default 3).\nsf_lMax     : The maximum angular quantum number l used in calculation (default 6).\nswap_HOMO_LUMO=false : If the HOMO & LUMO are degenerate, set swap_HOMO_LUMO=true when calculating LUMO (ridx=1). The program would swap the coefficients of HOMO and LUMO.\n\n\n\n\n\n","category":"function"},{"location":"manual2_targets/#eTraj.Targets.calc_asymp_coeff","page":"The Targets Module","title":"eTraj.Targets.calc_asymp_coeff","text":"Calculates the asymptotic coefficients (used in ADK, SFA-SPANE, SFA-SPA) of the given molecule.\n\nParameters\n\nmc          : The molecular calculator.\norbit_ridx  : Index of selected orbit relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1).                 For open-shell molecules, according to α/β spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\ngrid_rNum   : The number of radial grid (default 200).\ngrid_rReg   : The region of radial distance to fit the wavefunction to obtain the coefficients (default (3,8)).\ngrid_θNum   : The number of angular grid in the θ direction (default 60).\ngrid_ϕNum   : The number of angular grid in the ϕ direction (default 60).\nl_max       : The maximum number of l calculated (default 6).\n\n\n\n\n\n","category":"function"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"In this section, we will provide some common problems with the solutions the users encountered previously. Please open an issue in our GitHub repository if you have any other unresolved questions or issues.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Currently we haven't received any reports yet. Feel free to ask any questions! :D","category":"page"},{"location":"example2_ShortLP_phase_methods/#Example:-Short-LP-Pulses-and-Phase-Methods","page":"Short LP Pulses & Phase Methods","title":"Example: Short LP Pulses & Phase Methods","text":"","category":"section"},{"location":"example2_ShortLP_phase_methods/","page":"Short LP Pulses & Phase Methods","title":"Short LP Pulses & Phase Methods","text":"This example is adapted from [PRA 94, 013415 (2016)], which introduced the initial SCTS model.","category":"page"},{"location":"example2_ShortLP_phase_methods/","page":"Short LP Pulses & Phase Methods","title":"Short LP Pulses & Phase Methods","text":"When an atom is exposed to an intense linearly-polarized pulse, the atom might absorb photons more than it requires for the electron to ionize, leading to outer ring-like structures in the PMD, which we refer to as the well-known above-threshold ionization (ATI). The ATI is originally interpreted as excessive absorption of photons in the \"multi-photon absorption\" picture, while in the tunneling scenario, the ATI structures also have interpretable physical meanings: the intercycle interference of electron wave packets which tunneled through the potential barrier at each peak of the laser field. This allows for reproduction of the ATI structures using the semiclassical trajectory-based methods.","category":"page"},{"location":"example2_ShortLP_phase_methods/","page":"Short LP Pulses & Phase Methods","title":"Short LP Pulses & Phase Methods","text":"Apart from the ATI rings, the low-energy features of the PMD are also of broad interest, which usually exhibit a fan-like structure. This structure is contributed mainly by electrons with an angular momentum close to a specific value L_0 and are hence predictable theoretically [Arbo_2006] [Arbo_2008].","category":"page"},{"location":"example2_ShortLP_phase_methods/","page":"Short LP Pulses & Phase Methods","title":"Short LP Pulses & Phase Methods","text":"The following two pieces of code performs a trajectory simulation which employs an 8-cycle and an ultra-short single-cycle linearly-polarized NIR pulse, with the PMD showing up in the two figures below. To be faithful to the original work where the ADK initial condition was used with no prefactor included (mathcalP=1), we used the ADK-QTMC and ADK-SCTS schemes and set rate_prefix = :Exp. Comparison between the PMD obtained with the QTMC and SCTS phase methods reveals underestimation of the Coulomb interaction's influence on the phase by the QTMC method, which is observed in the number of nodal lines in the low-energy structures.","category":"page"},{"location":"example2_ShortLP_phase_methods/","page":"Short LP Pulses & Phase Methods","title":"Short LP Pulses & Phase Methods","text":"# examples/test_8cycs_LP.jl\n\nusing eTraj\nusing eTraj.Targets, eTraj.Lasers, eTraj.Units\n\nl = Cos2Laser(peak_int=90.0TW/cm^2, wave_len=800.0nm, cyc_num=8, ellip=0.0)\nt = get_atom(\"H\")\n\nfor phase_method in [:QTMC, :SCTS]\n    perform_traj_simulation(\n        init_cond_method    = :ADK,\n        rate_prefix         = :Exp,\n        traj_phase_method   = phase_method,\n        laser               = l,\n        target              = t,\n        dimension           = 2,\n        sample_t_intv       = (-350,350),\n        sample_t_num        = 50000,\n        traj_t_final        = 500,\n        final_p_max         = (1.0,1.0),\n        final_p_num         = (500,500),\n        ss_kd_max           = 1.0,\n        ss_kd_num           = 20000,\n        output_path         = \"ADK-$(phase_method)_9e13_800nm_8cyc_LP_ExpRate.jld2\"\n    )\nend","category":"page"},{"location":"example2_ShortLP_phase_methods/","page":"Short LP Pulses & Phase Methods","title":"Short LP Pulses & Phase Methods","text":"# examples/test_1cyc_LP.jl\n\nusing eTraj\nusing eTraj.Targets, eTraj.Lasers, eTraj.Units\n\nl = Cos2Laser(peak_int=90.0TW/cm^2, wave_len=800.0nm, cyc_num=1, cep=π/2, ellip=0.0)\nt = get_atom(\"H\"; soft_core=1e-12)\n\nfor phase_method in [:QTMC, :SCTS]\n    perform_traj_simulation(\n        init_cond_method    = :ADK,\n        laser               = l,\n        target              = t,\n        dimension           = 2,\n        sample_t_intv       = (-50,50),\n        sample_t_num        = 30000,\n        traj_t_final        = 100,\n        final_p_max         = (1.0,1.0),\n        final_p_num         = (500,500),\n        ss_kd_max           = 1.5,\n        ss_kd_num           = 10000,\n        output_path         = \"ADK-$(phase_method)_9e13_800nm_1cyc_LP_ExpRate.jld2\",\n        traj_phase_method   = phase_method,\n        rate_prefix         = :Exp\n    )\nend","category":"page"},{"location":"example2_ShortLP_phase_methods/","page":"Short LP Pulses & Phase Methods","title":"Short LP Pulses & Phase Methods","text":"(Image: fig:example_8cycs_LP) (Image: fig:example_1cyc_LP)","category":"page"},{"location":"example2_ShortLP_phase_methods/","page":"Short LP Pulses & Phase Methods","title":"Short LP Pulses & Phase Methods","text":"[Arbo_2006]: D. G. Arbó, S. Yoshida, E. Persson, K. I. Dimitriou, and J. Burgdörfer, Interference Oscillations in the Angular Distribution of Laser-Ionized Electrons near Ionization Threshold, Phys. Rev. Lett. 96, 143003 (2006). DOI: 10.1103/PhysRevLett.96.143003","category":"page"},{"location":"example2_ShortLP_phase_methods/","page":"Short LP Pulses & Phase Methods","title":"Short LP Pulses & Phase Methods","text":"[Arbo_2008]: D. G. Arbó, K. I. Dimitriou, E. Persson, and J. Burgdörfer, Sub-Poissonian angular momentum distribution near threshold in atomic ionization by short laser pulses, Phys. Rev. A 78, 013406 (2008). DOI: 10.1103/PhysRevA.78.013406","category":"page"},{"location":"theory1_init_cond/#theory_init_cond","page":"Initial Conditions","title":"Theory: Initial Conditions","text":"","category":"section"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"Several theories on strong-field ionization can be utilized to provide the initial conditions of the classical electrons in the trajectory simulation scheme. The initial condition consists of three properties:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"Initial position rr_0, i.e., the tunnel exit position;\nInitial momentum kk_0 [note1];\nThe corresponding ionization probability W carried by each electron sample, which depends on the time-dependent laser field and properties of the target atom/molecule.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[note1]: Here we use kk to denote the momentum/velocity of the electron when the laser is on, to distinguish it from the canonical momentum pp=kk-AA. After the laser turned off, we have pp=kk.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"In this section we briefly revisit the available theories implemented in eTraj. Atomic units (a.u.) are used throughout unless stated otherwise.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"Pages = [\"theory1_init_cond.md\"]\nDepth = 2","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"","category":"page"},{"location":"theory1_init_cond/#SFA","page":"Initial Conditions","title":"Strong-Field Approximation with Saddle-Point Approximation (SFA-SPA)","text":"","category":"section"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The Strong-Field Approximation (SFA) is originated from the Keldysh theory of strong-field ionization [Keldysh_1965] [Faisal_1973] [Reiss_1980]. Compared with the perturbative methods and adiabatic tunneling theories, the SFA is applicable to both the multi-photon and the tunneling processes during the laser-atom interaction, because it fully includes the non-adiabatic effect of the laser-atom interaction. The broad scope of SFA has contributed to its widespread application in theoretical investigations of strong-field ionization.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Keldysh_1965]: L. V. Keldysh, Ionization in the field of a strong electromagnetic wave, Sov. Phys. JETP 20, 1307 (1965).","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Faisal_1973]: F. H. M. Faisal, Multiple absorption of laser photons by atoms, J. Phys. B: At. Mol. Phys. 6, L89 (1973). DOI: 10.1088/0022-3700/6/4/011","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Reiss_1980]: H. R. Reiss, Effect of an intense electromagnetic field on a weakly bound system, Phys. Rev. A 22, 1786 (1980). DOI: 10.1103/PhysRevA.22.1786","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"We consider an electron evolving under a combined field of the Coulomb field V(rr) of the parent ion and the laser field FF(t)=-pd_t AA(t). Under the length gauge (LG), its Hamiltonian reads","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    H^rmLG = frac12 pp^2 + V(rr) + FF(t) cdot rr\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"Denoting ketPsi_0=ketpsi_0 ee^ii Ip t as the unperturbed initial state with ionization potential of Ip, ketPsi_pp as the continuum state of momentum pp, and","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    U(tft_0) = exp left -iiint_t_0^tf H^rmLG(tau) ddtau right\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"the time-evolution operator, the transition amplitude between the initial state (at t_0) and the final state of momentum pp (at tf) is written as","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    M_pp = melPsi_ppU(tft_0)Psi_0\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"Here lies the key idea of SFA: when the influence of the Coulomb field to the ionized electrons is weak compared with that of the external laser field, we may neglect the influence of the Coulomb field in the expression of M_pp by replacing the time-evolution operator with a Coulomb-free one U_rmf, and meanwhile replacing the continuum state with the Volkov state ketPsi_pp^rmV which represents a free electron evolving under the same laser field:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    M_pp approx melPsi_pp^rmVU_rmf(tft_0)Psi_0\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where the Volkov state under the LG is the product of a plane wave and a phase factor:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    ketPsi_pp^rmV = ketpp+AA(t) exp left-ii int^t frac12 pp+AA(tau)^2 ddtau right\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"In this way the M_pp is expressed as","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    M_pp = -ii int_t_0^tf melpp+AA(tau)FF(tau)cdotrrpsi_0 ee^-iiSp(tau) ddtau\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"and we note that here we have extracted the phase factor of ketPsi_0 and combined it with that of the Volkov state ketPsi_pp^rmV, giving the phase","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    Sp(t) = -int^t left frac12 pp+AA(tau)^2 + Ip right ddtau\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"Inserting","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    fracpdpd t brapp+AA(t) = ii brapp+AA(t) FF(t)cdotrr\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"into the above expression of M_pp [Eq. (6)], after integration by parts, one obtains","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\nbeginaligned\n    M_pp\n    = -int_t_0^tf ddtau fracpdpdtaubkpp+AA(tau)psi_0 ee^-iiSp(tau) \n    = -bkpp+AA(tau)psi_0 ee^-iiSp(tau) rvert_t_0^tf + int_t_0^tf ddtau bkpp+AA(tau)psi_0 cdot (-iiSp(tau)) ee^-iiSp(tau)\nendaligned\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"An additional saddle-point approximation (SPA) facilitates preparation of initial conditions of the electron trajectories. The variation of phase factor ee^iiSp(t) is much more sensitive than that of the prefactor as t varies, which leads to the fact that the whole integrand in Eq. (9) oscillates in its complex phase and its values cancel out in most cases, except when the variation of the phase Sp(t) becomes stable, i.e., at the saddle points. The saddle points ts=tr+iiti are the zeroes of the derivative of the complex function Sp(t), which satisfy","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    -Sp(ts) = frac12 pp+AA(ts)^2 + Ip = 0\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The second term of the r.h.s. of Eq. (9), i.e., the integral, has significant contribution only in the vicinity of the two end points t_0 tf and the saddle points ts, while the contribution near the two end points cancels out the first term. Therefore, the M_pp is now approximated with the integration around the saddle points:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    M_pp approx sum_ts int_C_ts ddtau bkpp+AA(tau)psi_0 cdot (-iiSp(tau)) ee^-iiSp(tau)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"with C_ts the integration contour following the steepest-descent path related to ts.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"Further evaluation of the prefactor tildepsi_0(kk) rvert_kk=pp+AA(t) = braketpp+AA(t)psi_0 (i.e., the momentum-space wavefunction) in the vicinity of the saddle points in Eq. (11) is essential before applying the SPA. We assume the field points towards the + z axis, for an atom target at the (lm) state with ionization potential Ip, its wavefunction behaves asymptotically as [Perelomov_1966]","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    psi_0(rr) sim 2 C_kappa l kappa^32 (kappa r)^n^*-1 ee^-kappa r Y_lm(hatrr)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"for kappa r gg 1, with kappa=sqrt2Ip, n^*=Zkappa the effective principal quantum number, Z the charge of the residual ion, Y_lm the spherical harmonics, and C_kappa l the asymptotic coefficient for atoms, which can be approximated using the Hartree approximation formula [Hartree_1928]","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    C_kappa l^2 = frac2^2n^*-2n^* (n^*+l) (n^*-l-1)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"For atomic hydrogen at the ground state we have C_kappa l = 1. Moreover, for non-integer n^*, the formula can be naturally extended by replacing the factorials x with Gamma functions Gamma(x+1), i.e.,","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    C_kappa l^2 = frac2^2n^*-2n^* Gamma(n^*+l+1) Gamma(n^*-l)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"In the vicinity of the saddle points, which corresponds to the case when k^2 rightarrow -kappa^2, the expression of tildepsi_0(kk) is determined by the asymptotic behavior of the wavefunction:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    tildepsi_0(kk) = fracC_kappa lsqrtpi frac2^n^*+32kappa^2n^*+12Gamma(n^*+1)(k^2+kappa^2)^n^*+1 Y_lm(hatkk)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where Gamma is the gamma function [note2]. Substituting the above expression into Eq. (11), making use of the definition of Sp(t) [Eq. (7)], we obtain","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    M_pp = ii fracC_kappa lsqrtpi 2^12kappa^2n^*+12Gamma(n^*+1) sum_ts int_C_ts fracY_lm(hatkk(tau))Sp(tau)^n^* ee^iiSp(tau) ddtau\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where hatkk(tau) is the complex unit vector along kk(tau)=pp+AA(tau), and the evaluation method of spherical harmonics with complex arguments is based on Appendix B of Ref. [Pisanty_2017], see also note [note3]. A modified version of SPA can be carried out to handle the case when the integrand has a singularity at ts (see Appendix B of Ref. [Gribakin_1997]):","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\nbeginaligned\n    int_C_ts fracY_lm(hatkk(tau))Sp(tau)^n^* ee^iiSp(tau) ddtau\n    approx fracY_lm(hatkk(ts))Sp(ts)^n^* int_C_ts fracee^iiSp(tau)(tau-ts)^n^* ddtau \n    approx fracY_lm(hatkk(ts))Sp(ts)^n^* cdot ii^n^* fracGamma(n^*2)2Gamma(n^*) sqrtfrac2pi-iiSp(ts) -2iiSp(ts)^n^*2 ee^iiSp(ts)\nendaligned\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"In this way we find the expression of the transition amplitude:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    M_pp = c_n^* C_kappa l sum_ts fracY_lm(hatkk(ts))Sp(ts)^(n^*+1)2 ee^-iiSp(ts)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"with c_n^* = ii^(n^*-5)2 2^n^*2+1 kappa^2n^*+12 Gamma(n^*2+1) the constant coefficient.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[note2]: Here k is actually sqrtkkcdotkk and is not the conventional \"norm\" of the complex vector, which is absabskk=sqrtkk^*cdotkk. Here we normalize the complex vector kk through hatkk=kksqrtkkcdotkk, according to Ref. [Perelomov_1966].","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[note3]: The evaluation of spherical harmonic in the complex domain makes use of the fact that the solid harmonics S_lm(rr) = r^l Y_lm(hatrr) can be expressed in a polynomial of xyz, see Ref. [Caola_1978].","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Perelomov_1966]: A. Perelomov, V. Popov, and M. Terent’ev, Ionization of atoms in an alternating electric field, Sov. Phys. JETP 23, 924 (1966).","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Hartree_1928]: D. R. Hartree, The wave mechanics of an atom with a non-coulomb central field. Part I. Theory and methods, Math. Proc. Cambridge Philos. Soc. 24, 89 (1928). DOI: 10.1017/S0305004100011919","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Pisanty_2017]: E. Pisanty and Á. Jiménez-Galán, Strong-field approximation in a rotating frame: High-order harmonic emission from p states in bicircular fields, Phys. Rev. A 96, 063401 (2017). DOI: 10.1103/PhysRevA.96.063401","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Caola_1978]: M. J. Caola, Solid harmonics and their addition theorems, J. Phys. A: Math. Gen. 11, L23 (1978). DOI: 10.1088/0305-4470/11/2/001","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Gribakin_1997]: G. F. Gribakin and M. Yu. Kuchiev, Multiphoton detachment of electrons from negative ions, Phys. Rev. A 55, 3760 (1997). DOI: 10.1103/PhysRevA.55.3760","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The SFA phase Sp(ts) is obtained by solving the integral","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\nbeginaligned\n    Sp(ts)\n    = -int_ts^infty ddtau lbrack frac12 pp+AA(tau)^2 + Ip rbrack \n    = left( - int_ts^tr - int_tr^infty right) ddtau left frac12 pp+AA(tau)^2 + Ip right \n    = S_pprmtun + S_pprmtraj\nendaligned\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where the temrs S_pprmtun and S_pprmtraj represent the complex phase accumulated during the tunneling process and the trajectory motion in the continuum, respectively. The phase S_pprmtun is accumulated during an imaginary period of time (from time ts to tr), in which the electron passes through the potential barrier with an \"imaginary\" momentum, its real part denotes the quantum phase, while its imaginary part is related to the ionization probability.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"To utilize the SFA to prepare initial conditions of the photoelectrons, we suppose that the electron is released at time tr at the tunnel exit rr_0 with momentum kk_0=kk(tr). The initial momentum kk_0, neglecting the Coulomb interaction with the nucleus, is related to the final momentum pp through","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    pp = kk_0 - int_tr^infty FF(tau) ddtau = kk_0 - AA(tr)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The initial position rr_0, i.e., the tunnel exit, is found by constructing a quantum tunneling trajectory. The beginning of the trajectory, i.e., the tunnel entrance, has a vanishing real part; the electron tunnels through the barrier during the time interval ts to tr and emerges as a classical electron at the tunneling exit rr_0 with a real position and momentum. In this way we obtain the expression of the initial position:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    rr_0^rmSFA-SPA = Re int_ts^tr pp+AA(tau) ddtau = Im int_0^ti AA(tr+iitau) ddtau\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where Re and Im are the real and imaginary part notation, respectively.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The probability density (in the final momentum space pp) carried by the electron sample is","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    dd W^rmSFA-SPAdd pp = sum_ts absmathcalP^rmSFA-SPA_pp(ts)^2 exp(-2Im S_pprmtun(ts))\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where we have gathered the coefficients to the prefactor","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\nbeginaligned\n    mathcalP^rmSFA-SPA_pp(ts)\n    = c_n^* fracC_kappa l Y_lm(hatkk(ts))Sp(ts)^(n^*+1)2\n    = c_n^* fracC_kappa l Y_lm(hatkk(ts))leftpp+AA(ts)cdotFF(ts)right^(n^*+1)2\nendaligned\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"We note that the ionization probability in Eq. (22) is expressed in the coordinate of the final momentum pp=(p_xp_yp_z), however, in the trajectory simulation, the initial electrons are sampled in the (trkkt) coordinate, with kkt the initial transversal momentum. Thus, adding a Jacobian in the prefix of the ionization probability is required if we sample the initial electrons within such a coordinate. Suppose the laser propagates in the z axis and polarizes in the xy plane, the transformed expression reads","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    dd W^rmSFA-SPAddtrddkkt = sum_ts J(kptr) absmathcalP_pp(ts)^2 exp(-2Im S_pprmtun(ts))\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where kp is the projection of kkt on the polarization plane (i.e., the xy plane), and the Jacobian is","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    J(trkp) = absfracpd(p_xp_y)pd(trkp) =\n    beginvmatrix\n        pd p_xpdtr  pd p_xpdkp \n        pd p_ypdtr  pd p_ypdkp \n    endvmatrix\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"","category":"page"},{"location":"theory1_init_cond/#SFAAE","page":"Initial Conditions","title":"SFA-SPA with Non-adiabatic Expansion (SFA-SPANE)","text":"","category":"section"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"For a small Keldysh parameter gamma=omegakappaF_0 (omega is the laser angular frequency and F_0 is the peak field strength), the non-adiabatic effect is not significant, thus a non-adiabatic expansion scheme can be carried out to develop an approximate theory based on the SFA-SPA, which is named after the SFA-SPA with Non-adiabatic Expansion (SFA-SPANE) [Ni_2018] [Mao_2022] [Ma_2021] [Ma_2024]. It includes the non-adiabatic effect to a large extent and is capable of giving similar results compared with that given by the SFA-SPA under relatively small Keldysh parameters. SFA-SPANE comes with a closed analytical form, avoiding the necessity to solve the saddle-point equation, thereby speeding up the calculation.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Ni_2018]: H. Ni, N. Eicke, C. Ruiz, J. Cai, F. Oppermann, N. I. Shvetsov-Shilovski, and L.-W. Pi, Tunneling criteria and a nonadiabatic term for strong-field ionization, Phys. Rev. A 98, 013411 (2018). DOI: 10.1103/PhysRevA.98.013411","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Mao_2022]: X. Mao, H. Ni, X. Gong, J. Burgdörfer, and J. Wu, Subcycle-resolved strong-field tunneling ionization: Identification of magnetic dipole and electric quadrupole effects, Phys. Rev. A 106, 063105 (2022). DOI: 10.1103/PhysRevA.106.063105","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Ma_2021]: Y. Ma, J. Zhou, P. Lu, H. Ni, and J. Wu, Influence of nonadiabatic, nondipole and quantum effects on the attoclock signal, J. Phys. B: At. Mol. Opt. Phys. 54, 144001 (2021). DOI: 10.1088/1361-6455/ac0d3e","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Ma_2024]: Y. Ma, H. Ni, and J. Wu, Attosecond ionization time delays in strong-field physics, Chin. Phys. B 33, 13201 (2024). DOI: 10.1088/1674-1056/ad0e5d","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The SFA-SPANE method is applicable when the Keldysh parameter is small, and the non-adiabatic effect is insignificant, which corresponds to the small-ti case. We expand the vector potential AA(ts)=AA(tr+iiti) in the SFA-SPA around ti=0, up to the second order of ti:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    AA(tr+iiti) = AA(tr) - iitiFF(tr) + frac12 ti^2 FF(tr) + o(ti^2)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"Inserting Eq. (26) into the saddle-point equation in the SFA-SPA [Eq. (10)] leads to","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    kk(tr)cdotFF(tr) approx 0\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"and","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    ti approx sqrtfrack^2(tr)+kappa^2F^2(tr)-kk(tr)cdotFF(tr)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"which allow for the derivation of analytical expressions of the ionization probability and other quantities.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The initial position rr_0 in SFA-SPANE, is given by","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    rr_0^rmSFA-SPANE = Im int_0^ti AA(tr+iitau) ddtau = - fracFF2 frackt^2+kappa^2F^2-kk_0cdotFF\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The Im S_pprmtun term, which is related to the ionization probability, in the SFA-SPANE, is","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\nbeginaligned\n    Im S_pprmtun\n    approx Im  int_tr^ts  ddtau left frac12 left pp + AA(tr) - iitiFF(tr) + frac12 ti^2 FF(tr) right^2  + Ip right \n    approx left Ip+frac12 k^2(tr) rightti - F^2(tr)-kk(tr)cdotFF(tr)fracti^36 \n    = frac13 frac(k^2+kappa^2)^32sqrtF^2-kk_0cdotFF\nendaligned\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"Then follows the ionization probability","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    dd W^rmSFA-SPANEddpp = absmathcalP^rmSFA-SPANE_pp(ts)^2 exp left -frac23 frac(kt^2+kappa^2)^32sqrtF^2-kk_0cdotFF right\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where kkt is actually equivalent to kk(tr) in the SFA-SPANE because of the vanishing initial longitudinal initial momentum condition in Eq. (27), which is derived from the saddle-point equation under adiabatic expansion. The prefactor reads","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    mathcalP^rmSFA-SPANE_pp(ts) = c_n^* fracC_kappa l Y_lm(hatkk(ts))left (kt^2+kappa^2)(F^2-kk_0cdotFF) right^(n^*+1)4\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"","category":"page"},{"location":"theory1_init_cond/#ADK","page":"Initial Conditions","title":"Ammosov-Delone-Krainov (ADK)","text":"","category":"section"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The Ammosov-Delone-Krainov (ADK) theory [Ammosov_1986] [Delone_1998] is used to study the scenario of adiabatic tunneling in strong-field ionization, and is, in a sense, the adiabatic limit of the SFA.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Ammosov_1986]: M. Ammosov, N. Delone, and V. Krainov, Tunnel ionization of complex atoms and of atomic ions in an alternating electromagnetic field, Sov. Phys. JETP 64, 1191 (1986).","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Delone_1998]: N. B. Delone and V. P. Krainov, Tunneling and barrier-suppression ionization of atoms and ions in a laser radiation field, Phys. Usp. 41, 469 (1998). DOI: 10.1070/PU1998v041n05ABEH000393","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"In the adiabatic limit, the laser field can be treated as static, thus we have FF(t)=0 (higher order derivatives of FF(t) remains zero as well). Substituting it into the ionization probability of SFA-SPANE [Eq. (31)] gives","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    dd W^rmADKddpp = absmathcalP^rmADK_pp(ts)^2 exp left -frac23 frac(kt^2+kappa^2)^32F right\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where the prefactor reads","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    mathcalP^rmADK_pp(ts) = c_n^* fracC_kappa l Y_lm(hatkk(ts))left (kt^2+kappa^2)F^2 right^(n^*+1)4\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"with ti=sqrtkt^2+kappa^2F. If we expand Eq. (33) under the small-kt limit, we obtain","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    dd W^rmADKddpp propto exp left( -frac2kappa^33F right) exp left( -frackappakt^2F right)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"which is actually the exponential term of the well-known ADK rate. However, we note that the result of our approach, i.e., applying the adiabatic limit of the SFA-SPA, is slightly different from the actual ADK rate in the prefactor. This is because the SFA framework neglects Coulomb potential in the final state, which has been shown to result in a lower ionization rate. As a remedy, introducing an additional Coulomb-correction (CC) factor to Eq. (33) bridges the gap:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    C^rmCC = left(frac2kappa^3Fright)^n^*  left(1+2gammaeright)^-2n^* leftGammaleft(fracn^*2+1right)right^-2\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"We note that this CC factor is implemented in all initial-condition methods that are derived from the SFA.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The tunnel exit is found with the same approach:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    rr_0^rmADK = Im int_0^ti AA(tr+iitau) ddtau = - fracFF2 frackt^2+kappa^2F^2\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"which we refer to as the \"IpF\" model, but with a slight difference in that we have replaced the ionization potential Ip=kappa^22 with the effective one tildeIp=(kappa^2+kt^2)2 to account for the initial kinetic energy, which ensures adiabatic tunneling better.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"","category":"page"},{"location":"theory1_init_cond/#MOSFA","page":"Initial Conditions","title":"Molecular SFA-SPA/SFA-SPANE/ADK","text":"","category":"section"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The atomic SFA theory and its adiabatic versions mentioned in the previous sections can be generalized naturally to molecular cases [Muth_2000] [Tong_2002] [Kjeldsen_2004] [Kjeldsen_2005]. Under the Born-Oppenheimer and the single-active-electron (SAE) approximation, the strong-field ionization of the molecules can be modeled as the interaction of the laser field and the ionizing orbital [often the highest occupied molecular orbital (HOMO)]  psi_0(rr) within the effective potential of the parent ion.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Muth_2000]: J. Muth-Böhm, A. Becker, and F. H. M. Faisal, Suppressed molecular ionization for a class of diatomics in intense femtosecond laser fields, Phys. Rev. Lett. 85, 2280 (2000). DOI: 10.1103/PhysRevLett.85.2280","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Tong_2002]: X. M. Tong, Z. X. Zhao, and C. D. Lin, Theory of molecular tunneling ionization, Phys. Rev. A 66, 33402 (2002).DOI: 10.1103/PhysRevA.66.033402","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Kjeldsen_2004]: T. K. Kjeldsen and L. B. Madsen, Strong-field ionization of N₂ : Length and velocity gauge strong-field approximation and tunnelling theory, J. Phys. B: At. Mol. Opt. Phys. 37, 2033 (2004). DOI: 10.1088/0953-4075/37/10/003","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[Kjeldsen_2005]: T. K. Kjeldsen, C. Z. Bisgaard, L. B. Madsen, and H. Stapelfeldt, Influence of molecular symmetry on strong-field ionization: Studies on ethylene, benzene, fluorobenzene, and chlorofluorobenzene, Phys. Rev. A 71, 13418 (2005). DOI: 10.1103/PhysRevA.71.042508","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"To generalize the atomic SFA to the molecular SFA (MO-SFA), we start from the transition amplitude in Eq. (11). In the molecular frame (MF), the asymptotic wavefunction can be expanded into spherical harmonics:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    psi_0^rmMF(rr) sim sum_lm 2 C_lm kappa^32 (kappa r)^n^*-1 ee^-kappa r Y_lm(hatrr)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where the C_lm are asymptotic coefficients, and we continue to adopt the n^*=Zkappa notation for simplicity, although it does not represent the effective principal quantum number anymore. We assume that in the field frame (FF) the field FF points towards the z axis, and the rotation RRh from the FF to the MF can be defined via a set of Euler angles (phithetachi) within the z-y-z convention, which satisfies","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    psi_0^rmMF(RRhrr) = psi_0^rmFF(rr)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"Utilizing the Wigner-D matrix, the rotated spherical harmonic function can be expressed as a linear combination of spherical harmonics of the same order l:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    RRh(phithetachi) Y_lm = sum_m D_mm^l(phithetachi) Y_lm\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"and the asymptotic behavior of the wavefunction in the FF is found by inserting Eq. (40) into Eq. (38), which gives","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n     psi_0^rmFF(rr) sim sum_lmm 2 C_lm D_mm^l(phithetachi) kappa^32 (kappa r)^n^*-1 ee^-kappa r Y_lm(hatrr)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"It is obvious that the molecular version of the theory differs from the atomic one only in the expression of prefactor mathcalP_pp(ts), while the expression of the tunneling exit position and the initial momentum are identical. Following the same procedure in the previous sections, we obtain the prefactor mathcalP_pp that is applicable for molecules:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    mathcalP^rmSFA-SPA_pp(ts) = c_n^* fracsum_lmm C_lm D_mm^l(phithetachi) Y_lm(hatkk(ts))leftpp+AA(ts)cdotFF(ts)right^(n^*+1)2\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    mathcalP^rmSFA-SPANE_pp(ts) = c_n^* fracsum_lmm C_lm D_mm^l(phithetachi) Y_lm(hatkk(ts))left (kt^2+kappa^2)(F^2-kk_0cdotFF) right^(n^*+1)4\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    mathcalP^rmADK_pp(ts) = c_n^* fracsum_lmm C_lm D_mm^l(phithetachi) Y_lm(hatkk(ts))left (kt^2+kappa^2)F^2 right^(n^*+1)4\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"We also note that after applying an additional Coulomb-correction factor [Eq. (36)], the ionization rate aligns with the original MO-ADK theory [Tong_2002] in the adiabatic and small-kt limit.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"","category":"page"},{"location":"theory1_init_cond/#WFAT","page":"Initial Conditions","title":"Weak-Field Asymptotic Theory (WFAT)","text":"","category":"section"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The Weak-Field Asymptotic Theory (WFAT) generalizes the tunneling ionization from isotropic atomic potentials to arbitrary molecular potentials [tolstikhin_2011] [madsen_2013] [madsen_2017] [dnestryan_2018]. Compared with the MO-ADK theory, the WFAT naturally accounts for the influence of the permanent dipole moment of the molecule, and could, in its integral representation, calculate the structure factors (a similar concept to the asymptotic coefficients C_lm in Eq. (38)) based on the wavefunction close to the core, rather than using the wavefunction in the asymptotic region, allowing for enhanced accuracy in numerical simulations.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[tolstikhin_2011]: O. I. Tolstikhin, T. Morishita, and L. B. Madsen, Theory of tunneling ionization of molecules: Weak-field asymptotics including dipole effects, Phys. Rev. A 84, 053423 (2011). DOI: 10.1103/PhysRevA.84.053423","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[madsen_2013]: L. B. Madsen, F. Jensen, O. I. Tolstikhin, and T. Morishita, Structure factors for tunneling ionization rates of molecules, Phys. Rev. A 87, 013406 (2013). DOI: 10.1103/PhysRevA.87.014062","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[madsen_2017]: L. B. Madsen, F. Jensen, A. I. Dnestryan, and O. I. Tolstikhin, Structure factors for tunneling ionization rates of molecules: General hartree-fock-based integral representation, Phys. Rev. A 96, 013423 (2017). DOI: 10.1103/PhysRevA.96.013423","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"[dnestryan_2018]: A. I. Dnestryan, O. I. Tolstikhin, L. B. Madsen, and F. Jensen, Structure factors for tunneling ionization rates of molecules: General grid-based methodology and convergence studies, J. Chem. Phys. 149, 164107 (2018). DOI: 10.1063/1.5046902","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The formulation of the WFAT is based on the expansion in the parabolic coordinates. The total ionization rate w, is split into different parabolic channels:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    w^rmWFAT = sum_nu w_nu\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where w_nu are partial rates of parabolic quantum number indices nu=(n_xim) with n_xi=012cdots and m=0pm 1pm 2cdots. In the leading-order approximation of the WFAT, the partial rates can be separated into two factors, namely the structural part absG_nu(thetachi)^2 and the field part mathcalW_nu(F):","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    w_nu = absG_nu(thetachi)^2 mathcalW_nu (F)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The field factor is expressed as","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    mathcalW_nu (F) = frackappa2 left(frac4kappa^2Fright)^2n^*-2n_xi-absm-1 ee^-2kappa^33F\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The structure factor G_nu(thetachi) is found by an integral related to the ionizing orbital and a reference function, which has significant contribution only in the vicinity of the nuclei and is insensitive to the wavefunction's asymptotic behavior:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    G_nu(thetachi) = ee^-kappamu_F int ddrr  Omega_nu^*(RRh^-1rr) hatV_rmc(rr) psi_0(rr)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"which is evaluated in the MF, with psi_0(rr) the wavefunction of the ionizing orbital;","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    bmmu = - intddrr  psi_0^*(rr) rr psi_0(rr)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"is the orbital dipole moment in the MF, with mu_F being its component along the field direction;","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    Omega_nu(rr) = sum_l=absm^infty Omega_lm^nu(rr) = sum_l=absm^infty R_l^nu(r) Y_lm(hatrr)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"is a reference function which can be expanded into spherical harmonics, with its radial part expressed as","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    R_l^nu(r) = omega_l^nu (kappa r)^l ee^-kappa r rmM(l+1-n^*2l+22kappa r)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where rmM(abx) is the confluent hyper-geometric function and","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\nbeginaligned\n    omega_l^nu =  quad (-1)^l+(absm-m)2+1 2^l+32 kappa^n^*-(absm+1)2-n_xi\n                    times sqrt(2l+1)(l+m)(l-m)(absm+n_xi)n_xi fracl(2l+1)\n                    times  sum_k=0^min(n_xil-absm)  fracGamma(l+1-n^*+n_xi-k)k(l-k)(absm+k)(l-absm-k)(n_xi-k)\nendaligned\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"is the normalization coefficient; hatV_rmc(rr)=hatV(rr)+Zr is the core potential with the Coulomb tail removed, where Z is the asymptotic charge of the residual ion.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The effective potential hatV(rr) describes the interaction between the ionizing electron and the residual parent ion. We note that here we use the hat notation to indicate that the potential operator is not diagonal in the coordinate space. Under the framework of the Hartree-Fock method, the effective potential consists of three parts, namely the nuclear Coulomb potential (V_rmnuc), the direct (V_rmd) and exchange (V_rmex) parts of inter-electron interactions:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    hatV = V_rmnuc + V_rmd + hatV_rmex\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"with","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\nbeginaligned\n    V_rmnuc(rr) = - sum_A=1^N_rmatm fracZ_Aabsrr-bmR_A\n    V_rmd(rr) = quad sum_i=1^N int fracpsi_i^*(rr) psi_i(rr)absrr-rr dd rr \n    hatV_rmex psi_0(rr) = -sum_i=1^N psi_i(rr) int fracpsi_i^*(rr) psi_0(rr)absrr-rr braketsigma_isigma_0 dd rr\nendaligned\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where N and N_rmatm denote the number of electrons and atoms, respectively; psi_i(rr) and sigma_i denote the molecular orbital and the spin state of the electron with index i, braketsigma_isigma_j=1 for electrons i and j with the same spin state, and braketsigma_isigma_j=0 otherwise; Z_A and bmR_A are the nuclear charge and position of atom with index A.","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"Representing the rotated reference function in Eq.~\\eqref{eq:WFAT_G} with a linear combination of spherical harmonics using the Wigner-D matrix allows for efficient numerical evaluation of the structure factor using the coefficients calculated beforehand:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    G_nu(thetachi) = ee^-kappamu_F sum_l=absm^infty sum_m=-l^l I_lm^nu d_mm^l(theta) ee^-ii m chi\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where the ee^-ii m phi in the expansion of D_mm^l(phithetachi)=ee^-ii m phi d_mm^l(theta) ee^-ii m chi is omitted because it doesn't play a part in the final result, and the coefficient I_lm^nu has the following expression:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    I_lm^nu = int ddrr Omega_lm^nu*(rr) hatV_rmc psi_0(rr)\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"The original WFAT gives the instantaneous tunneling ionization rate w=dd Wdd t, however, without the dependence of kt. In order to apply WFAT to prepare initial conditions of the electron samples, we have to reform the original WFAT to include kt-dependent rate. Here we adopt the kt-dependence in MO-ADK, which gives","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    dd Wdd t dd kkt propto kt^2absm ee^-kappa kt^2F\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"under the small-kt limit. We modify the field factor mathcalW_nu(F) according to the kt-dependence above, which gives the modified field factor","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\nbeginaligned\n    mathcalW_nu(Fkt)\n    = mathcalW_nu(F) frac(kappaF)^absm+1absm kt^2absm ee^-kappa kt^2F \n    approx frac12 frackappa^absm+2F^absm+1absm left(frac4kappa^2Fright)^2n^*-2n_xi-absm-1  kt^2absm expleft -frac23 frac(kt^2+kappa^2)^32F right\nendaligned\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"where we choose the normalization coefficient so that","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    mathcalW_nu(F) = int_0^infty mathcalW_nu(Fkt) 2pikt ddkt\nendequation","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"In this way we obtain the kt-dependent rate given by the WFAT:","category":"page"},{"location":"theory1_init_cond/","page":"Initial Conditions","title":"Initial Conditions","text":"beginequation\n    fracdd W^rmWFATdd t dd kkt = sum_nu absG_nu(thetachi)^2 mathcalW_nu(Fkt)\nendequation","category":"page"},{"location":"example1_attoclock/#Example:-Attoclock-and-Initial-Condition-Methods","page":"Attoclock & Initial Condition Methods","title":"Example: Attoclock & Initial Condition Methods","text":"","category":"section"},{"location":"example1_attoclock/","page":"Attoclock & Initial Condition Methods","title":"Attoclock & Initial Condition Methods","text":"This example is adapted from [JPB 54, 144001 (2021)].","category":"page"},{"location":"example1_attoclock/","page":"Attoclock & Initial Condition Methods","title":"Attoclock & Initial Condition Methods","text":"In the present example of attoclock experiment, an ultra-short pulse of circular polarization is employed to explore the ultrafast attosecond dynamics such as the tunneling time delay. In this example we would perform simulation of an attoclock experiment using different initial condition methods, namely ADK, SFA-SPANE and SFA-SPA, which reveals the influence of non-adiabatic effects to the attoclock signal. We choose CTMC as the phase method because the quantum interference effect is not significant in this example. In our theoretical framework, the simulation schemes are named after \"ADK-CTMC\", \"SFA-SPANE-CTMC\" and \"SFA-SPA-CTMC\", respectively.","category":"page"},{"location":"example1_attoclock/","page":"Attoclock & Initial Condition Methods","title":"Attoclock & Initial Condition Methods","text":"# examples/test_2cycs_CP.jl\n\nusing eTraj\nusing eTraj.Targets, eTraj.Lasers, eTraj.Units\n\nl = Cos4Laser(peak_int=0.4PW/cm^2, wave_len=800.0nm, cyc_num=2, ellip=1.0)\nt = get_atom(\"H\")\n\nfor init_cond in [:ADK, :SPANE, :SPA]\n    perform_traj_simulation(\n        init_cond_method    = init_cond,\n        traj_phase_method   = :CTMC,\n        laser               = l,\n        target              = t,\n        dimension           = 2,            # 2D simulation, x-y plane only\n        sample_t_intv       = (-100,100),   # equivalent to `(-2.42fs, 2.42fs)`\n        sample_t_num        = 20000,        # will sample 20000 equidistant time points between -100 and 100 a.u.\n        traj_t_final        = 120,          # the traj end at 120 a.u., equivalent to `2.90fs`\n        final_p_max         = (2.5,2.5),    # the momentum spec collection grid's border (-2.5 to +2.5 a.u.)\n        final_p_num         = (500,500),    # the momentum spec collection grid's size (500x500)\n        ss_kd_max           = 2.0,\n        ss_kd_num           = 10000,        # will sample 10000 equidistant k⟂ points between -2 to +2 a.u.\n        output_path         = \"$(init_cond)-CTMC_4e14_800nm_cos4_2cyc_CP.jld2\"\n    )\nend","category":"page"},{"location":"example1_attoclock/","page":"Attoclock & Initial Condition Methods","title":"Attoclock & Initial Condition Methods","text":"The momentum spectra are shown in the figure below. Due to the exponential dependence of ionization rate on the field strength, the PMD exhibits a crescent shape near the peak of the negative vector potential -AA(t). In an adiabatic tunneling scenario, which corresponds to the ADK initial condition, the trace of -AA(t) is expected to match the median of the crescent shape. While for non-adiabatic tunneling, the distribution of the initial transverse momentum kkt at the tunnel exit centers at a nonzero value, which results in expansion of the crescent shape and the enhancement of overall ionization probability, as can be seen in the figure. Moreover, the PMD obtained with the SFA-SPANE and SFA-SPA initial conditions shows similar shape and total ionization probability, which demonstrate the SFA-SPANE's advantage of preserving the non-adiabatic effects with much less computational cost than the SFA-SPA.","category":"page"},{"location":"example1_attoclock/","page":"Attoclock & Initial Condition Methods","title":"Attoclock & Initial Condition Methods","text":"(Image: fig:example_2cycs_CP)","category":"page"},{"location":"manual1_lasers/#lasers_doc","page":"The Lasers Module","title":"Manual: The Lasers Module","text":"","category":"section"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"Lasers\nLaser","category":"page"},{"location":"manual1_lasers/#eTraj.Lasers","page":"The Lasers Module","title":"eTraj.Lasers","text":"module Lasers\n\nThe Laser module contains abstraction of laser and provides some pre-defined lasers for use.\n\n\n\n\n\n","category":"module"},{"location":"manual1_lasers/#eTraj.Lasers.Laser","page":"The Lasers Module","title":"eTraj.Lasers.Laser","text":"abstract type Laser\n\nRepresents an abstract laser, supertype of all lasers.\n\n\n\n\n\n","category":"type"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"Pages = [\"manual1_lasers.md\"]\nDepth = 3","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"","category":"page"},{"location":"manual1_lasers/#The-Monochromatic-Lasers","page":"The Lasers Module","title":"The Monochromatic Lasers","text":"","category":"section"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"MonochromaticLaser","category":"page"},{"location":"manual1_lasers/#eTraj.Lasers.MonochromaticLaser","page":"The Lasers Module","title":"eTraj.Lasers.MonochromaticLaser","text":"abstract type MonochromaticLaser <: Laser\n\nRepresents an abstract monochromatic laser.\n\n\n\n\n\n","category":"type"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"A typical monochromatic laser is composed of the carrier wave cos (omega t+phi) and the envelope function f_rmenv(t) (which is assumed to have a peak amplitude of 1). Given the amplitude of the vector potential A_0, the time-dependent vector potential of the laser, which we assume to propagate in z direction and have x axis as the principle axis of polarization, reads","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"beginequation\n    AA(t) = A_0 f_rmenv(t)  cos(omega t+phi)hatbmx + varepsilon sin(omega t+phi) hatbmy \nendequation","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"with omega the laser angular frequency, phi the carrier-envelope phase (CEP) and varepsilon the ellipticity.","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"In the Lasers module there are some available monochromatic laser objects implemented for use, namely Cos4Laser, Cos2Laser and GaussianLaser, which differ from each other in their envelope functions f_rmenv(t), and they are all subtypes of the MonochromaticLaser base type.","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"","category":"page"},{"location":"manual1_lasers/#Cos4Laser","page":"The Lasers Module","title":"Cos4Laser","text":"","category":"section"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"The Cos4Laser's vector potential has a cos^4-shaped envelope function:","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"beginequation\n    f_rmenv^rmcos4 =\n    begindcases\n         cos^4 left(fracomega(t-t_0)2Nright)  -NT2 leq t-t_0 leq NT2 \n         0  rmotherwise\n    enddcases\nendequation","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"where N is the total cycle number, T=2piomega is the period and t_0 the peak time.","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"Cos4Laser\nCos4Laser()","category":"page"},{"location":"manual1_lasers/#eTraj.Lasers.Cos4Laser","page":"The Lasers Module","title":"eTraj.Lasers.Cos4Laser","text":"struct Cos4Laser <: MonochromaticLaser <: Laser\n\nRepresents a monochromatic elliptically polarized laser field with Cos4-shape envelope propagating in z direction.\n\n\n\n\n\n","category":"type"},{"location":"manual1_lasers/#eTraj.Lasers.Cos4Laser-Tuple{}","page":"The Lasers Module","title":"eTraj.Lasers.Cos4Laser","text":"Cos4Laser(peak_int, wave_len|ang_freq, cyc_num|duration, ellip [,azi=0.0] [,cep=0.0] [,t_shift=0.0]) <: MonochromaticLaser\n\nInitializes a new monochromatic elliptically polarized laser field with Cos4-shape envelope.\n\nParameters\n\npeak_int    : Peak intensity of the laser (numerically in W/cm² or a Unitful.Quantity).\nwave_len    : Wavelength of the laser (numerically in nm or a Unitful.Quantity).\nang_freq    : Angular frequency of the laser (numerically in a.u. or a Unitful.Quantity of single-photon energy).\ncyc_num     : Number of cycles of the laser.\nduration    : Duration of the laser (numerically in a.u. or a Unitful.Quantity).\nellip       : Ellipticity of the laser [-1≤ε≤1, 0 indicates linear polarization and ±1 indicates circular polarization].\nazi         : Azimuth angle of the laser's polarization's principle axis relative to x axis (numerically in radian or a Unitful.Quantity) (optional, default 0).\ncep         : Carrier-Envelope-Phase of the laser (numerically in radian or a Unitful.Quantity) (optional, default 0).\nt_shift     : Time shift of the laser (numerically in a.u. or a Unitful.Quantity) relative to the peak (optional, default 0).\n\nExamples\n\njulia> l = Cos4Laser(peak_int=4e14, wave_len=800.0, cyc_num=2.0, ellip=1.0)\n[MonochromaticLaser] Envelope cos⁴, peak intensity 4.0e+14 W/cm², wavelen=800 nm, 2 cycle(s), ε=1 [circularly polarized]\n\njulia> using eTraj.Units\n\njulia> l = Cos4Laser(peak_int=0.4PW/cm^2, ang_freq=1.5498eV, duration=5.34fs, ellip=0.0)\n[MonochromaticLaser] Envelope cos⁴, peak intensity 4.0e+14 W/cm², wavelen=800.00 nm, 2.00 cycle(s), ε=0 [linearly polarized]\n\n\n\n\n\n","category":"method"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"(Image: Cos4Laser)","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"","category":"page"},{"location":"manual1_lasers/#Cos2Laser","page":"The Lasers Module","title":"Cos2Laser","text":"","category":"section"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"The Cos2Laser has a cos^2-shaped envelope function, similar to that of the Cos4Laser:","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"beginequation\n    f_rmenv^rmcos2 =\n    begindcases\n         cos^2 left(fracomega(t-t_0)2Nright)  -NT2 leq t-t_0 leq NT2 \n         0  rmotherwise\n    enddcases\nendequation","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"Cos2Laser\nCos2Laser()","category":"page"},{"location":"manual1_lasers/#eTraj.Lasers.Cos2Laser","page":"The Lasers Module","title":"eTraj.Lasers.Cos2Laser","text":"struct Cos2Laser <: MonochromaticLaser <: Laser\n\nRepresents a monochromatic elliptically polarized laser field with Cos2-shape envelope propagating in z direction.\n\n\n\n\n\n","category":"type"},{"location":"manual1_lasers/#eTraj.Lasers.Cos2Laser-Tuple{}","page":"The Lasers Module","title":"eTraj.Lasers.Cos2Laser","text":"Cos2Laser(peak_int, wave_len|ang_freq, cyc_num|duration, ellip [,azi=0.0] [,cep=0.0] [,t_shift=0.0]) <: MonochromaticLaser\n\nInitializes a new monochromatic elliptically polarized laser field with Cos2-shape envelope.\n\nParameters\n\npeak_int    : Peak intensity of the laser (numerically in W/cm² or a Unitful.Quantity).\nwave_len    : Wavelength of the laser (numerically in nm or a Unitful.Quantity).\nang_freq    : Angular frequency of the laser (numerically in a.u. or a Unitful.Quantity of single-photon energy).\ncyc_num     : Number of cycles of the laser.\nduration    : Duration of the laser (numerically in a.u. or a Unitful.Quantity).\nellip       : Ellipticity of the laser [-1≤ε≤1, 0 indicates linear polarization and ±1 indicates circular polarization].\nazi         : Azimuth angle of the laser's polarization's principle axis relative to x axis (numerically in radian or a Unitful.Quantity) (optional, default 0).\ncep         : Carrier-Envelope-Phase of the laser (numerically in radian or a Unitful.Quantity) (optional, default 0).\nt_shift     : Time shift of the laser (numerically in a.u. or a Unitful.Quantity) relative to the peak (optional, default 0).\n\nExamples\n\njulia> l = Cos2Laser(peak_int=4e14, wave_len=800.0, cyc_num=2.0, ellip=1.0)\n[MonochromaticLaser] Envelope cos², peak intensity 4.0e+14 W/cm², wavelen=800 nm, 2 cycle(s), ε=1 [circularly polarized]\n\njulia> using eTraj.Units\n\njulia> l = Cos2Laser(peak_int=0.4PW/cm^2, ang_freq=1.5498eV, duration=5.34fs, ellip=0.0)\n[MonochromaticLaser] Envelope cos², peak intensity 4.0e+14 W/cm², wavelen=800.00 nm, 2.00 cycle(s), ε=0 [linearly polarized]\n\n\n\n\n\n","category":"method"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"(Image: Cos2Laser)","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"","category":"page"},{"location":"manual1_lasers/#GaussianLaser","page":"The Lasers Module","title":"GaussianLaser","text":"","category":"section"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"The GaussianLaser has a Gaussian-shaped envelope function, which is the most commonly used:","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"beginequation\n    f_rmenv^rmGauss = ee^-(t-t_0)^22tau_sigma^2 = ee^- ln2cdot(t-t_0)^2tau_rmFWHM^2\nendequation","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"where tau_sigma is the half temporal width of the laser and tau_rmFWHM=2sqrtln2 tau_sigma denotes the laser's intensity profile's temporal FWHM (full-width at half maxima).","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"GaussianLaser\nGaussianLaser()","category":"page"},{"location":"manual1_lasers/#eTraj.Lasers.GaussianLaser","page":"The Lasers Module","title":"eTraj.Lasers.GaussianLaser","text":"struct GaussianLaser <: MonochromaticLaser <: Laser\n\nRepresents a monochromatic elliptically polarized laser field with Gaussian-shape envelope propagating in z direction.\n\n\n\n\n\n","category":"type"},{"location":"manual1_lasers/#eTraj.Lasers.GaussianLaser-Tuple{}","page":"The Lasers Module","title":"eTraj.Lasers.GaussianLaser","text":"GaussianLaser(peak_int, wave_len|ang_freq, spread_cyc_num|spread_duration|FWHM_duration, ellip [,azi=0.0] [,cep=0.0] [,t_shift=0.0]) <: MonochromaticLaser\n\nInitializes a new monochromatic elliptically polarized laser field with Gaussian-shape envelope.\n\nParameters\n\npeak_int        : Peak intensity of the laser (numerically in W/cm² or a Unitful.Quantity).\nwave_len        : Wavelength of the laser (numerically in nm or a Unitful.Quantity).\nang_freq        : Angular frequency of the laser (numerically in a.u. or a Unitful.Quantity of single-photon energy).\nspread_cyc_num  : Temporal width (converted to cycle numbers) of the laser, namely σ.\nspread_duration : Temporal width of the laser (numerically in a.u. or a Unitful.Quantity).\nFWHM_duration   : Temporal FWHM (Full Width at Half Maxima) of the intensity profile of the laser (numerically in a.u. or a Unitful.Quantity).\nellip           : Ellipticity of the laser [-1≤ε≤1, 0 indicates linear polarization and ±1 indicates circular polarization].\nazi             : Azimuth angle of the laser's polarization's principle axis relative to x axis (numerically in radian or a Unitful.Quantity) (optional, default 0).\ncep             : Carrier-Envelope-Phase of the laser (numerically in radian or a Unitful.Quantity) (optional, default 0).\nt_shift         : Time shift of the laser (numerically in a.u. or a Unitful.Quantity) relative to the peak (optional, default 0).\n\nExamples\n\njulia> l = GaussianLaser(peak_int=4e14, wave_len=800.0, spread_cyc_num=2.0, ellip=1.0)\n[MonochromaticLaser] Envelope Gaussian, peak intensity 4.0e+14 W/cm², wavelen=800 nm, temporal width 4 cycle(s) [FWHM 12.57 fs], ε=1 [circularly polarized]\n\njulia> using eTraj.Units\n\njulia> l = GaussianLaser(peak_int=0.4PW/cm^2, ang_freq=1.5498eV, FWHM_duration=12.57fs, ellip=0.0)\n[MonochromaticLaser] Envelope Gaussian, peak intensity 4.0e+14 W/cm², wavelen=800.00 nm, temporal width 4.00 cycle(s) [FWHM 12.57 fs], ε=0 [linearly polarized]\n\n\n\n\n\n","category":"method"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"(Image: GaussianLaser)","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"","category":"page"},{"location":"manual1_lasers/#BichromaticLaser","page":"The Lasers Module","title":"BichromaticLaser","text":"","category":"section"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"Apart from monochromatic lasers, the BichromaticLaser which combines two MonochromaticLaser is also implemented.","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"BichromaticLaser\nBichromaticLaser()","category":"page"},{"location":"manual1_lasers/#eTraj.Lasers.BichromaticLaser","page":"The Lasers Module","title":"eTraj.Lasers.BichromaticLaser","text":"struct BichromaticLaser <: Laser\n\nRepresents a bichromatic laser field which consists of two MonochromaticLasers.\n\n\n\n\n\n","category":"type"},{"location":"manual1_lasers/#eTraj.Lasers.BichromaticLaser-Tuple{}","page":"The Lasers Module","title":"eTraj.Lasers.BichromaticLaser","text":"BichromaticLaser(l1::MonochromaticLaser, l2::MonochromaticLaser [,delay=0.0]) <: Laser\n\nInitializes a new BichromaticLaser with two MonochromaticLasers.\n\nParameters\n\nl1, l2::MonochromaticLaser  : Two MonochromaticLasers.\ndelay                       : Time delay of l2 respective to l1 (numerically in a.u. or a Unitful.Quantity).\n\nExamples\n\njulia> using eTraj.Units\n\njulia> l = BichromaticLaser(l1=Cos4Laser(peak_int=1.0PW/cm^2, wave_len=800nm, cyc_num=10, ellip=1), l2=Cos4Laser(peak_int=1.0PW/cm^2, wave_len=400nm, cyc_num=20, ellip=-1), delay=0.5fs)\n[BichromaticLaser] delay Δt = 20.67 a.u. (0.50 fs)\n├ [MonochromaticLaser] Envelope cos⁴, peak intensity 1.0e+15 W/cm², wavelen=800 nm, 10 cycle(s), ε=1 [circularly polarized]\n└ [MonochromaticLaser] Envelope cos⁴, peak intensity 1.0e+15 W/cm², wavelen=400 nm, 20 cycle(s), ε=-1 [circularly polarized]\n\n\n\n\n\n","category":"method"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"","category":"page"},{"location":"manual1_lasers/#Available-Properties","page":"The Lasers Module","title":"Available Properties","text":"","category":"section"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"The available properties of the laser fields are listed below. The \"·\" sign indicates that the property is available due to inheritance from the supertype.","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"To obtain a property of the laser field, invoke the property as a method and pass the laser object as an argument. The following shows an example:","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"using eTraj.Lasers\nl = Cos4Laser(peak_int=1e14, wave_len=800.0, cyc_num=10, ellip=0)\nLaserA0(l)\nAx = LaserAx(l)\nAx(0.0)","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":" Laser MonochromaticLaser Cos4Laser Cos2Laser GaussianLaser BichromaticLaser\nLaserFx ✔ · · · · ·\nLaserFy ✔ · · · · ·\nLaserAx ✔ · · · · ·\nLaserAy ✔ · · · · ·\nPeakInt  ✔ · · · \nWaveLen  ✔ · · · \nCycNum   ✔ ✔  \nSpreadCycNum     ✔ \nSpreadDuration     ✔ \nFWHM_Duration     ✔ \nEllipticity  ✔ · · · \nAzimuth  ✔ · · · \nAngFreq  ✔ · · · \nPeriod  ✔ · · · \nCEP  ✔ · · · \nLaserF0  ✔ · · · \nLaserA0  ✔ · · · \nUnitEnvelope  ✔ · · · \nKeldyshParameter  ✔ · · · \nTimeShift   ✔ ✔ ✔ \nLaser1      ✔\nLaser2      ✔\nDelay21      ✔","category":"page"},{"location":"manual1_lasers/#Ellipticity","page":"The Lasers Module","title":"Ellipticity","text":"","category":"section"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"The ellipticity varepsilon defines the polarization type of the laser field. For special cases, 0 indicates linear polarization and ±1 indicates circular polarization. The electric field rotates clockwise for positive ellipticities and counter-clockwise for negative ones.","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"(Image: manual2_lasers_ellip.svg)","category":"page"},{"location":"manual1_lasers/#Azimuth-of-Principle-Axis","page":"The Lasers Module","title":"Azimuth of Principle Axis","text":"","category":"section"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"The azimuth angle varphi of the principle axis defines a clockwise rotation of the laser field in the polarization plane.","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"(Image: manual2_lasers_azimuth.svg)","category":"page"},{"location":"manual1_lasers/#Carrier-Envelope-Phase-(CEP)","page":"The Lasers Module","title":"Carrier-Envelope-Phase (CEP)","text":"","category":"section"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"The carrier-envelope-phase (CEP) phi is the difference between the optical phase of the carrier wave and the envelope position. For few-cycle laser pulses, the influence of the CEP to the laser-matter interaction becomes significant.","category":"page"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"(Image: manual2_lasers_cep.svg)","category":"page"},{"location":"manual1_lasers/#List-of-Property-Documentations","page":"The Lasers Module","title":"List of Property Documentations","text":"","category":"section"},{"location":"manual1_lasers/","page":"The Lasers Module","title":"The Lasers Module","text":"LaserFx\nLaserFy\nLaserAx\nLaserAy\nPeakInt\nWaveLen\nCycNum\nSpreadCycNum\nSpreadDuration\nFWHM_Duration\nEllipticity\nAzimuth\nAngFreq\nPeriod\nCEP\nLaserF0\nLaserA0\nUnitEnvelope\nKeldyshParameter\nTimeShift\nLaser1\nLaser2\nDelay21","category":"page"},{"location":"manual1_lasers/#eTraj.Lasers.LaserFx","page":"The Lasers Module","title":"eTraj.Lasers.LaserFx","text":"LaserFx(l::Laser) -> Fx(t)\n\nGets the time-dependent x component of the electric field strength under dipole approximation.\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.LaserFy","page":"The Lasers Module","title":"eTraj.Lasers.LaserFy","text":"LaserFy(l::Laser) -> Fy(t)\n\nGets the time-dependent y component of the electric field strength under dipole approximation.\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.LaserAx","page":"The Lasers Module","title":"eTraj.Lasers.LaserAx","text":"LaserAx(l::Laser) -> Ax(t)\n\nGets the time-dependent x component of the vector potential under dipole approximation.\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.LaserAy","page":"The Lasers Module","title":"eTraj.Lasers.LaserAy","text":"LaserAy(l::Laser) -> Ay(t)\n\nGets the time-dependent y component of the vector potential under dipole approximation.\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.PeakInt","page":"The Lasers Module","title":"eTraj.Lasers.PeakInt","text":"PeakInt(l::MonochromaticLaser)\n\nGets the peak intensity of the laser (in W/cm²).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.WaveLen","page":"The Lasers Module","title":"eTraj.Lasers.WaveLen","text":"WaveLen(l::MonochromaticLaser)\n\nGets the wavelength of the laser (in nm).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.CycNum","page":"The Lasers Module","title":"eTraj.Lasers.CycNum","text":"CycNum(l::{Cos2Laser, Cos4Laser})\n\nGets the cycle number of the laser.\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.SpreadCycNum","page":"The Lasers Module","title":"eTraj.Lasers.SpreadCycNum","text":"SpreadCycNum(l::GaussianLaser)\n\nGets the temporal width of the laser, namely σ (converted to cycle numbers).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.SpreadDuration","page":"The Lasers Module","title":"eTraj.Lasers.SpreadDuration","text":"SpreadDuration(l::GaussianLaser)\n\nGets the temporal width of the laser, namely σ (in a.u.).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.FWHM_Duration","page":"The Lasers Module","title":"eTraj.Lasers.FWHM_Duration","text":"FWHM_Duration(l::GaussianLaser)\n\nGets the temporal FWHM (Full Width at Half Maxima) of the intensity profile of the laser (in a.u.).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.Ellipticity","page":"The Lasers Module","title":"eTraj.Lasers.Ellipticity","text":"Ellipticity(l::MonochromaticLaser)\n\nGets the ellipticity of the laser.\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.Azimuth","page":"The Lasers Module","title":"eTraj.Lasers.Azimuth","text":"Azimuth(l::MonochromaticLaser)\n\nGets the azimuth angle of the laser's polarization's principle axis relative to x axis (in radians).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.AngFreq","page":"The Lasers Module","title":"eTraj.Lasers.AngFreq","text":"AngFreq(l::MonochromaticLaser)\n\nGets the angular frequency (ω) of the laser (in a.u.).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.Period","page":"The Lasers Module","title":"eTraj.Lasers.Period","text":"Period(l::MonochromaticLaser)\n\nGets the period of the laser (in a.u.).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.CEP","page":"The Lasers Module","title":"eTraj.Lasers.CEP","text":"CEP(l::MonochromaticLaser)\n\nGets the Carrier-Envelope Phase (CEP) of the laser.\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.LaserF0","page":"The Lasers Module","title":"eTraj.Lasers.LaserF0","text":"LaserF0(l::MonochromaticLaser)\n\nGets the peak electric field intensity of the laser (in a.u.).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.LaserA0","page":"The Lasers Module","title":"eTraj.Lasers.LaserA0","text":"LaserA0(l::MonochromaticLaser)\n\nGets the peak vector potential intensity of the laser (in a.u.).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.UnitEnvelope","page":"The Lasers Module","title":"eTraj.Lasers.UnitEnvelope","text":"UnitEnvelope(l::MonochromaticLaser) -> env(t)\n\nGets the unit envelope function (the peak value is 1) of the laser field.\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.KeldyshParameter","page":"The Lasers Module","title":"eTraj.Lasers.KeldyshParameter","text":"KeldyshParameter(l::MonochromaticLaser, Ip)\n\nGets the Keldysh parameter γ₀ of the laser, given the ionization energy Ip (in a.u.).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.TimeShift","page":"The Lasers Module","title":"eTraj.Lasers.TimeShift","text":"TimeShift(l::{Cos2Laser, Cos4Laser, GaussianLaser})\n\nGets the time shift of the laser relative to the peak (in a.u.).\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.Laser1","page":"The Lasers Module","title":"eTraj.Lasers.Laser1","text":"Laser1(l::BichromaticLaser)\n\nGets the first MonochromaticLaser component in l.\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.Laser2","page":"The Lasers Module","title":"eTraj.Lasers.Laser2","text":"Laser2(l::BichromaticLaser)\n\nGets the second MonochromaticLaser component in l.\n\n\n\n\n\n","category":"function"},{"location":"manual1_lasers/#eTraj.Lasers.Delay21","page":"The Lasers Module","title":"eTraj.Lasers.Delay21","text":"Delay21(l::BichromaticLaser)\n\nGets the delay of the second laser respective to the first in l.\n\n\n\n\n\n","category":"function"},{"location":"manual3_sampling_traj_simu/#traj_simu","page":"Sampling & Traj Simulation","title":"Manual: Electron Sampling and Trajectory Simulation","text":"","category":"section"},{"location":"manual3_sampling_traj_simu/","page":"Sampling & Traj Simulation","title":"Sampling & Traj Simulation","text":"The ElectronSamplers module provides means of generating initial electron samples using different initial condition methods. The ElectronSampler is an abstract supertype, with ADKSampler, SPANESampler, SPASampler and WFATSampler being its subtypes. When the user starts a trajectory simulation job by invoking eTraj.perform_traj_simulation, the method would further call the init_sampler method, which would assign the corresponding type of ElectronSampler in the background. These invocations execute in the background thus the ElectronSamplers module is kept internal (i.e., not exported for public invocation).","category":"page"},{"location":"manual3_sampling_traj_simu/","page":"Sampling & Traj Simulation","title":"Sampling & Traj Simulation","text":"The eTraj.perform_traj_simulation method serves as a public entrance to performing a trajectory simulation. The method would automatically detect number of available threads (specified by passing command-line arguments -t <thread_num> when starting julia) and run the trajectory simulation in parallel.","category":"page"},{"location":"manual3_sampling_traj_simu/","page":"Sampling & Traj Simulation","title":"Sampling & Traj Simulation","text":"Here we brief on the working procedure of the method eTraj.perform_traj_simulation:","category":"page"},{"location":"manual3_sampling_traj_simu/","page":"Sampling & Traj Simulation","title":"Sampling & Traj Simulation","text":"First, the eTraj.perform_traj_simulation method initializes an eTraj.TrajectorySimulationJob, which stores the essential parameters. The electron sampler is assigned according to init_cond_method.\nThen, it repeatedly invokes the eTraj.launch_and_collect! method, where in each invocation a batch of electrons which tunnel at the same time tr but have different transversal momenta kkt is launched and collected using the corresponding simulation scheme.\nThe sampling behavior is controlled by the sample_monte_carlo parameter, if sample_monte_carlo is true, the tr of the electron batches and the kkt in each batch would be randomly sampled inside the given intervals specified by sample_t_intv, mc_kd_max and mc_kz_max,\notherwise, the initial conditions of the electrons would be sampled in an equidistant manner, with the intervals controlled by sample_t_intv, ss_kd_max and ss_kz_max.\nAfter generating a batch of initial electrons, the eTraj.launch_and_collect! method simulates the electrons' classical trajectories (together with the phase), and then collects the electrons' final momenta on the grid. Trajectory simulations are carried out using the OrdinaryDiffEq.jl package in the DifferentialEquations.jl ecosystem.\nThe grid's size and spacing depends on the final_p_max and final_p_num parameters.\nFinally, the eTraj.perform_traj_simulation method generates the output file which contains the photoelectron momentum distribution (PMD) and other necessary information in a Julia Data Format (JLD2) file or an HDF5 file.","category":"page"},{"location":"manual3_sampling_traj_simu/","page":"Sampling & Traj Simulation","title":"Sampling & Traj Simulation","text":"The output file is a Julia JLD2 file, which is compatible with the HDF5 data format, and can be opened by the JLD2.jl package:","category":"page"},{"location":"manual3_sampling_traj_simu/","page":"Sampling & Traj Simulation","title":"Sampling & Traj Simulation","text":"julia> using JLD2\n\njulia> file = jldopen(\"ADK-CTMC_4e14_800nm_cos4_2cyc_CP.jld2\")\nJLDFile .../ADK-CTMC_4e14_800nm_cos4_2cyc_CP.jld2 (read-only)\n    ├─ info\n    ├─ params_text              # parameters stored in YAML format\n    ├─ params                   # parameters stored in a Julia `Dict`\n    ├─ px                       # coordinates of the `momentum_spec` on x-axis\n    ├─ py                       # coordinates of the `momentum_spec` on y-axis\n    ├─ momentum_spec            # PMD data stored in a Julia `Array`\n    ├─ ion_prob                 # total ionization probability\n    ├─ ion_prob_uncollected     # ionization probability of discarded electrons\n    └─ num_effective_traj       # total number of effective trajectories\n\njulia> file[\"params_text\"] |> print  # equivalent to print(file[\"params_text\"])\ninit_cond_method: ADK\nlaser:\n    type: Cos4Laser\n    peak_int: 4.0e14\n    wave_len: 800.0\n    ⋮\ntarget:\n    type: HydrogenLikeAtom\n    Ip: 0.5\n    nucl_charge: 1\n    ⋮\nsample_t_intv: (-100, 100)\nsample_t_num: 20000\nsample_monte_carlo: false\n⋮","category":"page"},{"location":"manual3_sampling_traj_simu/","page":"Sampling & Traj Simulation","title":"Sampling & Traj Simulation","text":"The detailed documentation of the eTraj.perform_traj_simulation is shown below:","category":"page"},{"location":"manual3_sampling_traj_simu/","page":"Sampling & Traj Simulation","title":"Sampling & Traj Simulation","text":"eTraj.perform_traj_simulation","category":"page"},{"location":"manual3_sampling_traj_simu/#eTraj.perform_traj_simulation","page":"Sampling & Traj Simulation","title":"eTraj.perform_traj_simulation","text":"Performs a semiclassical trajectory simulation with given parameters.\n\nParameters\n\nRequired parameters:\n\ninit_cond_method    : Method used to determine the initial conditions of electrons.\nCandidates: :ADK, :SPA (SFA-SPA), :SPANE (SFA-SPANE) for targets of type SAEAtomBase or MoleculeBase; :WFAT for MoleculeBase targets.\nlaser::Laser        : A Lasers.Laser object which stores parameters of the laser field. See the Lasers module for details.\ntarget::Target      : A Targets.Target object which stores parameters of the target. See the Targets module for details.\ndimension = 2|3     : Dimensionality of simulation.\n2D simulation is carried out in the xy plane.\nsample_t_intv       : Time interval for sampling initial electrons.\nFormat: (start,stop)\nUnit: pass numerically in a.u. or pass as a Unitful.Quantity.\nsample_t_num        : Number of time samples.\ntraj_t_final        : Final time of each trajectory simulation\nUnit: numerically in a.u. or pass as a Unitful.Quantity.\nfinal_p_max         : Boundaries of final momentum grid. Grid ranges from -pxMax to +pxMax in the x direction, and the same for y and z directions.\nFormat: (pxMax,pyMax[,pzMax])\nfinal_p_num         : Numbers of final momentum grid points. If a value is 1, electrons will be collected regardless of the momentum on that dimension.\nFormat: (pxNum,pyNum[,pzNum])\n\nRequired parameters for step-sampling methods:\n\nss_kd_max   : Boundary of k⟂ samples (in a.u.). k⟂ ranges from -ss_kd_max to +ss_kd_max.\nss_kd_num   : Number of k⟂ samples.\nss_kz_max   : [3D only] Boundary of kz samples (in a.u.). kz ranges from -ss_kz_max to +ss_kz_max.\nss_kz_num   : [3D only] Number of kz samples.\n\nRequired parameters for Monte-Carlo sampling methods:\n\nmc_kt_num   : Number of kt samples in a single time sample.\nmc_kd_max   : Boundary of k⟂ (in a.u.). k⟂ ranges from -mc_kd_max to +mc_kd_max.\nmc_kz_max   : [3D only] Boundary of kz (in a.u.). kz ranges from -mc_kz_max to +mc_kz_max.\n\nOptional parameters:\n\ntraj_phase_method   : Method used to determine classical trajectories' phase.\nCandidates: :CTMC (default), :QTMC, and :SCTS.\ntraj_rtol           : Relative error tolerance for solving classical trajectories (default 1e-6).\noutput_fmt          : Output file format.\nCandidates: :jld2 (JLD2, default) and :h5 (HDF5).\noutput_compress     : Determines whether output files are compressed or not (default true).\nNote: For JLD2 output format, compression requires explicit installation of the CodecZlib package.\noutput_path         : Path to output file.\nsample_cutoff_limit : Probability cutoff limit for sampled electrons (default 1e-16). Electrons with probabilities lower than the limit would be discarded.\nsample_monte_carlo  : Determines whether Monte-Carlo sampling is used when generating electron samples (default false).\n\nOptional parameter for atomic SFA-SPA, SFA-SPANE and ADK methods:\n\nrate_prefix : Prefix of the exponential term in the ionization rate (default :Full).\n:Exp indicates no prefix; :Pre and :PreCC indicates inclusion of the prefactor with/without Coulomb correction; :Jac indicates inclusion of the Jacobian factor which is related to the sampling method; :Full is equivalent to Set([:PreCC,:Jac]).   To combine :Pre and :Jac, pass Set([:Pre,:Jac]).\n\nOptional parameter for target MoleculeBase:\n\nmol_orbit_ridx  : Index of selected orbital relative to the HOMO (e.g., 0 indicates HOMO, and -1 indicates HOMO-1.)\nFor open-shell molecules, according to α/β spins, should be passed in format (spin, idx) where for α orbitals spin=1 and for β orbitals spin=2.\n\nOptional parameter for interface:\n\nshow_progress   : Whether to display progress bar (default true).\n\n\n\n\n\n","category":"function"},{"location":"example3_bichromatic_pulse/#Example:-Bichromatic-ω-2ω-Pulses","page":"Bichromatic ω-2ω Pulses","title":"Example: Bichromatic ω-2ω Pulses","text":"","category":"section"},{"location":"example3_bichromatic_pulse/","page":"Bichromatic ω-2ω Pulses","title":"Bichromatic ω-2ω Pulses","text":"A bichromatic laser which consists of a fundamental and its second harmonic frequency component, is widely used to construct a variety of specific tailored waveforms for manipulation and exploration of the ultrafast dynamics of light-matter interactions.","category":"page"},{"location":"example3_bichromatic_pulse/","page":"Bichromatic ω-2ω Pulses","title":"Bichromatic ω-2ω Pulses","text":"In this example, we use a bichromatic laser pulse which combines two counter-rotating circularly-polarized laser pulses of 800 nm and 400 nm wavelengths. By adjusting the relative intensity of the two frequency components, the waveform of the pulse can be tailored to exhibit a clover-like shape, which facilitates control of the emission direction of the ejected electrons. The PMD for different laser intensities is shown in the figure below.","category":"page"},{"location":"example3_bichromatic_pulse/","page":"Bichromatic ω-2ω Pulses","title":"Bichromatic ω-2ω Pulses","text":"# examples/test_Bichromatic_CCP.jl\n\nusing eTraj\nusing eTraj.Targets, eTraj.Lasers, eTraj.Units\n\nfor int in [1e14, 3e14, 5e14, 7e14]\n    @info \"Running I0=$(int) W/cm^2\"\n    l1 = Cos2Laser(peak_int=int*W/cm^2, wave_len=800.0nm, cyc_num=8,  ellip= 1.0)\n    l2 = Cos2Laser(peak_int=int*W/cm^2, wave_len=400.0nm, cyc_num=16, ellip=-1.0)\n    l = BichromaticLaser(l1=l1, l2=l2)\n    t = get_atom(\"H\")\n    perform_traj_simulation(\n        init_cond_method    = :ADK,\n        rate_prefix         = Set([:Pre,:Jac]),\n        traj_phase_method   = :SCTS,\n        laser               = l,\n        target              = t,\n        dimension           = 2,\n        sample_t_intv       = (-350,350),\n        sample_t_num        = 10000,\n        traj_t_final        = 450,\n        final_p_max         = (2.5,2.5),\n        final_p_num         = (500,500),\n        ss_kd_max           = 1.0,\n        ss_kd_num           = 5000,\n        output_path         = \"ADK-SCTS_Bichromatic_$(int)_800+400nm_8+16cycs_CounterCP.jld2\"\n    )\nend","category":"page"},{"location":"example3_bichromatic_pulse/","page":"Bichromatic ω-2ω Pulses","title":"Bichromatic ω-2ω Pulses","text":"(Image: fig:Bichromatic_laser)","category":"page"},{"location":"example3_bichromatic_pulse/","page":"Bichromatic ω-2ω Pulses","title":"Bichromatic ω-2ω Pulses","text":"(Image: fig:example_Bichromatic_laser)","category":"page"},{"location":"#eTraj.jl","page":"Home","title":"🎆eTraj.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Implementation of classical/semiclassical trajectory-based methods in strong-field ionization of atoms and molecules.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Background","page":"Home","title":"Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The interaction between light and matter has attracted widespread interest since the early days of quantum mechanics. With the advent of laser technology, the intensity of light and the precision of spectroscopy has dramatically increased, which allows us to explore the physics of light-matter interaction under extreme conditions with unprecedented precision and accuracy. At a high laser intensity above TW/cm², the interaction between light and atoms or molecules can no longer be described by the perturbation theory and a series of novel strong-field phenomena emerges, such as the above-threshold ionization (ATI), tunneling ionization, high-harmonic generation (HHG) and non-sequential double ionization (NSDI).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Theoretical studies of these non-perturbative phenomena have been extensively investigated in the past decades. Usually, in order to obtain a precise result, a time-dependent Schrödinger equation (TDSE) is solved numerically. However, solving the TDSE is computationally expensive and resource-demanding, which limits its application to few-dimensional problems. Moreover, the TDSE is like a black box, offering limited transparency for interpreting the underlying physics. Apart from TDSE, the strong-field approximation (SFA) is also widely applied to study these problems, which is based on the assumptions that: (1) the initial state is not affected by the laser field until ionization; (2) after ionization, the photoelectron is not influenced by the trapping potential (i.e., assuming a short-range potential). These two approximations simplify the problem, which allows one to obtain analytical results and unravel the physical pictures of these phenomena. However, such approximations are not always applicable, especially when the Coulomb potential's role becomes significant, which may lead to incorrect predictions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To address these limitations, the scheme of Classical-Trajectory Monte-Carlo (CTMC) method [Abrines_1966] [Olson_1977] can be adopted, where a microcanonical ensemble of classical electrons is prepared and evolved under the laser interaction or charged-particle impact. This scheme has been further developed to account for the initial stage of tunneling ionization by setting the initial conditions of the classical electrons at the tunnel exit [Corkum_1989] [Corkum_1993] [Hu_1997]. The final photoelectron momentum distribution (PMD) is obtained through statistical analysis of the electron trajectories. While CTMC relies on purely classical electron trajectories, quantum effects can be largely retained by incorporating a phase into the electron trajectories. Examples include  the Trajectory-based Coulomb-SFA (TC-SFA) [Yan_2010] [Yan_2012], the Quantum-Trajectory Monte Carlo (QTMC) [Li_2014] [Liu_2016], and the Semiclassical Two-Step Model (SCTS) [ShvetsovShilovski_2016] [ShvetsovShilovski_2021]. Another approach, the Coulomb Quantum-orbit SFA (CQSFA) [Lai_2015] [Maxwell_2017], addresses the inverse problem by identifying all trajectories that result in the same final momenta. These trajectory-based semiclassical methods offer notable advantages over the TDSE and direct SFA methods due to their lower demand on computational resources, as well as the clarity they provide in understanding the physical picture.","category":"page"},{"location":"","page":"Home","title":"Home","text":"After years of development, various trajectory-based classical/semiclassical methods have emerged, yet a unified theoretical framework remains to be established. Besides, developing a library that implements existing methods, which is efficient in calculations and is easy to maintain, would greatly facilitate further research on strong-field ionization. With this goal in mind, we introduce eTraj.jl, a program package written in the Julia language, which provides a general, efficient, and out-of-the-box solution for performing classical/semiclassical trajectory simulations. This library is written in a clear and concise manner, ensuring versatility, extensibility, and usability.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Abrines_1966]: R. Abrines and I. C. Percival, Classical theory of charge transfer and ionization of hydrogen atoms by protons, Proc. Phys. Soc. 88, 861 (1966). DOI: 10.1088/0370-1328/88/4/306","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Olson_1977]: R. E. Olson and A. Salop, Charge-transfer and impact-ionization cross sections for fully and partially stripped positive ions colliding with atomic hydrogen, Phys. Rev. A 16, 531 (1977). DOI: 10.1103/PhysRevA.16.531","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Corkum_1989]: P. B. Corkum, N. H. Burnett, and F. Brunel, Above-threshold ionization in the long-wavelength limit, Phys. Rev. Lett. 62, 1259 (1989). DOI: 10.1103/PhysRevLett.62.1259","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Corkum_1993]: P. B. Corkum, Plasma perspective on strong field multiphoton ionization, Phys. Rev. Lett. 71, 1994 (1993). DOI: 10.1103/PhysRevLett.71.1994","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Hu_1997]: B. Hu, J. Liu, and S.-g. Chen, Plateau in Above-Threshold-Ionization Spectra and Chaotic Behavior in Rescattering Processes. Phys. Lett. A 236, 533–542 (1997). DOI: 10.1016/S0375-9601(97)00811-6","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Yan_2010]: T.-M. Yan, S. V. Popruzhenko, M. J. J. Vrakking, and D. Bauer, Low-energy structures in strong field ionization revealed by quantum orbits, Phys. Rev. Lett. 105, 253002 (2010). DOI: 10.1103/PhysRevLett.105.253002","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Yan_2012]: T.-M. Yan and D. Bauer, Sub-barrier coulomb effects on the interference pattern in tunneling-ionization photoelectron spectra, Phys. Rev. A 86, 53403 (2012). DOI: 10.1103/PhysRevA.86.053403","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Li_2014]: M. Li, J.-W. Geng, H. Liu, Y. Deng, C. Wu, L.-Y. Peng, Q. Gong, and Y. Liu, Classical-quantum correspondence for above-threshold ionization, Phys. Rev. Lett. 112, 113002 (2014). DOI: 10.1103/PhysRevLett.112.113002","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Liu_2016]: M.-M. Liu, M. Li, C. Wu, Q. Gong, A. Staudte, and Y. Liu, Phase structure of strong-field tunneling wave packets from molecules, Phys. Rev. Lett. 116, 163004 (2016). DOI: 10.1103/PhysRevLett.116.163004","category":"page"},{"location":"","page":"Home","title":"Home","text":"[ShvetsovShilovski_2016]: N. I. Shvetsov-Shilovski, M. Lein, L. B. Madsen, E. Räsänen, C. Lemell, J. Burgdörfer, D. G. Arbó, and K. Tőkési, Semiclassical two-step model for strong-field ionization, Phys. Rev. A 94, 013415 (2016). DOI: 10.1103/PhysRevA.94.013415","category":"page"},{"location":"","page":"Home","title":"Home","text":"[ShvetsovShilovski_2021]: N. I. Shvetsov-Shilovski, Semiclassical two-step model for ionization by a strong laser pulse: Further developments and applications, Eur. Phys. J. D 75, 130 (2021). DOI: 10.1140/epjd/s10053-021-00095-8","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Lai_2015]: X.-Y. Lai, C. Poli, H. Schomerus, and C. F. D. M. Faria, Influence of the coulomb potential on above-threshold ionization: A quantum-orbit analysis beyond the strong-field approximation, Phys. Rev. A 92, 043407 (2015). DOI: 10.1103/PhysRevA.92.043407","category":"page"},{"location":"","page":"Home","title":"Home","text":"[Maxwell_2017]: A. S. Maxwell, A. Al-Jawahiry, T. Das, and C. F. D. M. Faria, Coulomb-corrected quantum interference in above-threshold ionization: Working towards multitrajectory electron holography, Phys. Rev. A 96, 023420 (2017). DOI: 10.1103/PhysRevA.96.023420","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#Prerequisites","page":"Home","title":"Prerequisites","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Minimum prerequisites : Julia ≥ 1.9\nMO-ADK/MO-SFA and WFAT molecular calculations :   Data for some small molecules are available in the molecule database.   If the user wants to perform molecular calculations with customized parameters, the platform should be Linux or macOS, and having Python 3 with the PySCF python package installed and the PyCall.jl julia package successfully built.","category":"page"},{"location":"#Installing-the-package","page":"Home","title":"Installing the package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is currently not in julia's general registry, but can be added through the repository URL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/TheStarAlight/eTraj.jl.git\")\n# In pkg mode of REPL:\n# (@v1.9) pkg> add https://github.com/TheStarAlight/eTraj.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"To enter the pkg mode of REPL, type ] in REPL, and the pkg> prompt will appear, replacing the julia>.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For offline installation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"/path/to/eTraj/\")\n# In pkg mode of REPL:\n# (@v1.9) pkg> add /path/to/eTraj/","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is suggested to test the package to check if the functions (especially molecular calculations) work on your platform:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.test(\"eTraj\")\n# In pkg mode of REPL:\n# (@v1.9) pkg> test eTraj","category":"page"},{"location":"#Configuring-Python-and-PySCF","page":"Home","title":"Configuring Python and PySCF","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently, the calculation of molecules' asymptotic coefficients (for MO-ADK/MO-SFA) and WFAT coefficients rely on the PySCF python package. eTraj calls the PySCF using the PyCall.jl package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are two ways to set up the Python environment used by PyCall:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using your local Python environment by specifying the path of your Python executable in ENV[\"PYTHON\"] and build the PyCall package.\nusing a private Python environment managed by the Conda.jl, which is implicitly installed by the PyCall package by default;","category":"page"},{"location":"#Using-the-local-Python-environment","page":"Home","title":"Using the local Python environment","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To correctly set up the configuration of PyCall, first, set the PYTHON environment variable to the path your Python executable, and build the PyCall package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ENV[\"PYTHON\"] = \"path/to/python_exec\"\nusing Pkg\nPkg.build(\"PyCall\")\n# In pkg mode of REPL:\n# (@v1.9) pkg> build PyCall","category":"page"},{"location":"","page":"Home","title":"Home","text":"And don't forget to install PySCF via pip in your system shell:","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ pip install pyscf==2.3.0","category":"page"},{"location":"#Using-Conda.jl","page":"Home","title":"Using Conda.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Before installing eTraj, install Conda first:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Conda\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then call pip within Conda to install PySCF:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Conda\nConda.pip_interop(true)\nConda.pip(\"install\", \"pyscf==2.3.0\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Note\nSince the PySCF does not support the Windows platform, the molecular calculation must be performed on a Linux or macOS platform. However, for Windows users, they may install the WSL (Windows Subsystem for Linux), which supports the PySCF.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Contributors","page":"Home","title":"Contributors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Mingyu Zhu @ ECNU\nHongcheng Ni @ ECNU","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is licensed under the Apache 2.0 license, and is copyrighted by Mingyu Zhu and the other contributors.","category":"page"}]
}
